
04_Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b28  08004b28  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b28  08004b28  00014b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b30  08004b30  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a04  2000001c  08004b54  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a20  08004b54  00024a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a142  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e0  00000000  00000000  0003a18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003e610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039a1  00000000  00000000  0003f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c53  00000000  00000000  00043249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097c41  00000000  00000000  00057e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efadd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005300  00000000  00000000  000efb30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a90 	.word	0x08004a90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08004a90 	.word	0x08004a90

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af02      	add	r7, sp, #8
  HAL_Init();
 80004de:	f000 fa6b 	bl	80009b8 <HAL_Init>
  SystemClock_Config();
 80004e2:	f000 f85f 	bl	80005a4 <SystemClock_Config>
  MX_GPIO_Init();
 80004e6:	f000 f8f3 	bl	80006d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f8c7 	bl	800067c <MX_USART2_UART_Init>

  xTaskCreate(vRedLEDCOntrollerTask,
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <main+0x34>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2200      	movs	r2, #0
 80004f4:	9201      	str	r2, [sp, #4]
 80004f6:	2203      	movs	r2, #3
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	2264      	movs	r2, #100	; 0x64
 80004fc:	4904      	ldr	r1, [pc, #16]	; (8000510 <main+0x38>)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x3c>)
 8000500:	f002 fc99 	bl	8002e36 <xTaskCreate>
			  100,
			  (void *)red_led,
			  3,
			  NULL);

  vTaskStartScheduler();
 8000504:	f002 fddc 	bl	80030c0 <vTaskStartScheduler>
  while (1);
 8000508:	e7fe      	b.n	8000508 <main+0x30>
 800050a:	bf00      	nop
 800050c:	20000000 	.word	0x20000000
 8000510:	08004aa8 	.word	0x08004aa8
 8000514:	08000519 	.word	0x08000519

08000518 <vRedLEDCOntrollerTask>:
}


void vRedLEDCOntrollerTask(void *pvParams)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af02      	add	r7, sp, #8
 800051e:	6078      	str	r0, [r7, #4]
  xTaskCreate(vGreenLEDCOntrollerTask,
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <vRedLEDCOntrollerTask+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2200      	movs	r2, #0
 8000526:	9201      	str	r2, [sp, #4]
 8000528:	2202      	movs	r2, #2
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	2264      	movs	r2, #100	; 0x64
 800052e:	490b      	ldr	r1, [pc, #44]	; (800055c <vRedLEDCOntrollerTask+0x44>)
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <vRedLEDCOntrollerTask+0x48>)
 8000532:	f002 fc80 	bl	8002e36 <xTaskCreate>
				  100,
				  (void *)green_led,
				  2,
				  NULL);

  xTaskCreate(vBlueLEDCOntrollerTask,
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <vRedLEDCOntrollerTask+0x4c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2200      	movs	r2, #0
 800053c:	9201      	str	r2, [sp, #4]
 800053e:	2202      	movs	r2, #2
 8000540:	9200      	str	r2, [sp, #0]
 8000542:	2264      	movs	r2, #100	; 0x64
 8000544:	4908      	ldr	r1, [pc, #32]	; (8000568 <vRedLEDCOntrollerTask+0x50>)
 8000546:	4809      	ldr	r0, [pc, #36]	; (800056c <vRedLEDCOntrollerTask+0x54>)
 8000548:	f002 fc75 	bl	8002e36 <xTaskCreate>
			  2,
			  NULL);
	while(1)
	{
		//HAL_GPIO_TogglePin(GPIOA, (uint16_t)pvParams);
		RedLEDTskProfiler++;
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <vRedLEDCOntrollerTask+0x58>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <vRedLEDCOntrollerTask+0x58>)
 8000554:	6013      	str	r3, [r2, #0]
 8000556:	e7f9      	b.n	800054c <vRedLEDCOntrollerTask+0x34>
 8000558:	20000004 	.word	0x20000004
 800055c:	08004ac0 	.word	0x08004ac0
 8000560:	08000575 	.word	0x08000575
 8000564:	20000008 	.word	0x20000008
 8000568:	08004adc 	.word	0x08004adc
 800056c:	0800058d 	.word	0x0800058d
 8000570:	20004948 	.word	0x20004948

08000574 <vGreenLEDCOntrollerTask>:
		//vTaskDelay(1000);
	}
}

void vGreenLEDCOntrollerTask(void *pvParams)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//HAL_GPIO_TogglePin(GPIOA, (uint16_t)pvParams);
		GreenLEDTskProfiler++;
 800057c:	4b02      	ldr	r3, [pc, #8]	; (8000588 <vGreenLEDCOntrollerTask+0x14>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a01      	ldr	r2, [pc, #4]	; (8000588 <vGreenLEDCOntrollerTask+0x14>)
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e7f9      	b.n	800057c <vGreenLEDCOntrollerTask+0x8>
 8000588:	20004944 	.word	0x20004944

0800058c <vBlueLEDCOntrollerTask>:
		//vTaskDelay(1000);
	}
}

void vBlueLEDCOntrollerTask(void *pvParams)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//HAL_GPIO_TogglePin(GPIOA, (uint16_t)pvParams);
		//HAL_Delay(1000);
		BlueLEDTskProfiler++;
 8000594:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <vBlueLEDCOntrollerTask+0x14>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	4a01      	ldr	r2, [pc, #4]	; (80005a0 <vBlueLEDCOntrollerTask+0x14>)
 800059c:	6013      	str	r3, [r2, #0]
 800059e:	e7f9      	b.n	8000594 <vBlueLEDCOntrollerTask+0x8>
 80005a0:	2000494c 	.word	0x2000494c

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fa64 	bl	8004a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <SystemClock_Config+0xd0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a28      	ldr	r2, [pc, #160]	; (8000674 <SystemClock_Config+0xd0>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <SystemClock_Config+0xd0>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xd4>)
 80005f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xd4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000618:	2310      	movs	r3, #16
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800061c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000622:	2304      	movs	r3, #4
 8000624:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000626:	2307      	movs	r3, #7
 8000628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fc84 	bl	8000f3c <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800063a:	f000 f88f 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2302      	movs	r3, #2
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2102      	movs	r1, #2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fee6 	bl	800142c <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000666:	f000 f879 	bl	800075c <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_USART2_UART_Init+0x50>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART2_UART_Init+0x4c>)
 80006b4:	f001 fb68 	bl	8001d88 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006be:	f000 f84d 	bl	800075c <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20004950 	.word	0x20004950
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_GPIO_Init+0x60>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	4a10      	ldr	r2, [pc, #64]	; (8000730 <MX_GPIO_Init+0x60>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6313      	str	r3, [r2, #48]	; 0x30
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_GPIO_Init+0x60>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /* Reset Pins */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12 | GPIO_PIN_11 | GPIO_PIN_10, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000706:	480b      	ldr	r0, [pc, #44]	; (8000734 <MX_GPIO_Init+0x64>)
 8000708:	f000 fbfe 	bl	8000f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIN12, PIN11,PIN10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_11 | GPIO_PIN_10;
 800070c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0x64>)
 8000724:	f000 fa6c 	bl	8000c00 <HAL_GPIO_Init>
}
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40020000 	.word	0x40020000

08000738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d101      	bne.n	800074e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800074a:	f000 f957 	bl	80009fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40010000 	.word	0x40010000

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_MspInit+0x54>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a11      	ldr	r2, [pc, #68]	; (80007bc <HAL_MspInit+0x54>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x54>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_MspInit+0x54>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <HAL_MspInit+0x54>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_MspInit+0x54>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	210f      	movs	r1, #15
 80007aa:	f06f 0001 	mvn.w	r0, #1
 80007ae:	f000 f9fd 	bl	8000bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_UART_MspInit+0x84>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d12b      	bne.n	800083a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_UART_MspInit+0x88>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_UART_MspInit+0x88>)
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	6413      	str	r3, [r2, #64]	; 0x40
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_UART_MspInit+0x88>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_UART_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <HAL_UART_MspInit+0x88>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_UART_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800081a:	230c      	movs	r3, #12
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800082a:	2307      	movs	r3, #7
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_UART_MspInit+0x8c>)
 8000836:	f000 f9e3 	bl	8000c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40004400 	.word	0x40004400
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000

08000850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	2019      	movs	r0, #25
 8000866:	f000 f9a1 	bl	8000bac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800086a:	2019      	movs	r0, #25
 800086c:	f000 f9ba 	bl	8000be4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <HAL_InitTick+0xa0>)
 8000876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000878:	4a1d      	ldr	r2, [pc, #116]	; (80008f0 <HAL_InitTick+0xa0>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6453      	str	r3, [r2, #68]	; 0x44
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <HAL_InitTick+0xa0>)
 8000882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800088c:	f107 0210 	add.w	r2, r7, #16
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f000 ffc4 	bl	8001824 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800089c:	f000 ffae 	bl	80017fc <HAL_RCC_GetPCLK2Freq>
 80008a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <HAL_InitTick+0xa4>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9b      	lsrs	r3, r3, #18
 80008ac:	3b01      	subs	r3, #1
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_InitTick+0xa8>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <HAL_InitTick+0xac>)
 80008b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_InitTick+0xa8>)
 80008b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_InitTick+0xa8>)
 80008c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_InitTick+0xa8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_InitTick+0xa8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_InitTick+0xa8>)
 80008d2:	f000 ffd9 	bl	8001888 <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d104      	bne.n	80008e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_InitTick+0xa8>)
 80008de:	f001 f82d 	bl	800193c <HAL_TIM_Base_Start_IT>
 80008e2:	4603      	mov	r3, r0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	431bde83 	.word	0x431bde83
 80008f8:	20004994 	.word	0x20004994
 80008fc:	40010000 	.word	0x40010000

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000932:	f001 f865 	bl	8001a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20004994 	.word	0x20004994

08000940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <SystemInit+0x20>)
 8000946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <SystemInit+0x20>)
 800094c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800096c:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000980:	4c0b      	ldr	r4, [pc, #44]	; (80009b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800098e:	f7ff ffd7 	bl	8000940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f004 f843 	bl	8004a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f7ff fd9f 	bl	80004d8 <main>
  bx  lr    
 800099a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800099c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80009a8:	08004b38 	.word	0x08004b38
  ldr r2, =_sbss
 80009ac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80009b0:	20004a20 	.word	0x20004a20

080009b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <HAL_Init+0x40>)
 80009c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <HAL_Init+0x40>)
 80009ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x40>)
 80009da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f8d8 	bl	8000b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f7ff ff32 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff febc 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023c00 	.word	0x40023c00

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000014 	.word	0x20000014
 8000a20:	200049dc 	.word	0x200049dc

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	200049dc 	.word	0x200049dc

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4907      	ldr	r1, [pc, #28]	; (8000ad8 <__NVIC_EnableIRQ+0x38>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff4c 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbe:	f7ff ff61 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000bc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	6978      	ldr	r0, [r7, #20]
 8000bca:	f7ff ffb1 	bl	8000b30 <NVIC_EncodePriority>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff80 	bl	8000adc <__NVIC_SetPriority>
}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff54 	bl	8000aa0 <__NVIC_EnableIRQ>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	e159      	b.n	8000ed0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f040 8148 	bne.w	8000eca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d005      	beq.n	8000c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d130      	bne.n	8000cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	2203      	movs	r2, #3
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68da      	ldr	r2, [r3, #12]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	091b      	lsrs	r3, r3, #4
 8000c9e:	f003 0201 	and.w	r2, r3, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d017      	beq.n	8000cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d123      	bne.n	8000d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	08da      	lsrs	r2, r3, #3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3208      	adds	r2, #8
 8000d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	f003 0307 	and.w	r3, r3, #7
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	220f      	movs	r2, #15
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	691a      	ldr	r2, [r3, #16]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	69b9      	ldr	r1, [r7, #24]
 8000d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0203 	and.w	r2, r3, #3
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 80a2 	beq.w	8000eca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b57      	ldr	r3, [pc, #348]	; (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a56      	ldr	r2, [pc, #344]	; (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b54      	ldr	r3, [pc, #336]	; (8000ee8 <HAL_GPIO_Init+0x2e8>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da2:	4a52      	ldr	r2, [pc, #328]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3302      	adds	r3, #2
 8000daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a49      	ldr	r2, [pc, #292]	; (8000ef0 <HAL_GPIO_Init+0x2f0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0x202>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a48      	ldr	r2, [pc, #288]	; (8000ef4 <HAL_GPIO_Init+0x2f4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x1fe>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a47      	ldr	r2, [pc, #284]	; (8000ef8 <HAL_GPIO_Init+0x2f8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x1fa>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a46      	ldr	r2, [pc, #280]	; (8000efc <HAL_GPIO_Init+0x2fc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x1f6>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a45      	ldr	r2, [pc, #276]	; (8000f00 <HAL_GPIO_Init+0x300>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x1f2>
 8000dee:	2304      	movs	r3, #4
 8000df0:	e008      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000df2:	2307      	movs	r3, #7
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000df6:	2303      	movs	r3, #3
 8000df8:	e004      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x204>
 8000e02:	2300      	movs	r3, #0
 8000e04:	69fa      	ldr	r2, [r7, #28]
 8000e06:	f002 0203 	and.w	r2, r2, #3
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4093      	lsls	r3, r2
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e14:	4935      	ldr	r1, [pc, #212]	; (8000eec <HAL_GPIO_Init+0x2ec>)
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e22:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e70:	4a24      	ldr	r2, [pc, #144]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e9a:	4a1a      	ldr	r2, [pc, #104]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <HAL_GPIO_Init+0x304>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	f67f aea2 	bls.w	8000c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40013c00 	.word	0x40013c00

08000f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
 8000f14:	4613      	mov	r3, r2
 8000f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f18:	787b      	ldrb	r3, [r7, #1]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1e:	887a      	ldrh	r2, [r7, #2]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f24:	e003      	b.n	8000f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	041a      	lsls	r2, r3, #16
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	619a      	str	r2, [r3, #24]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e264      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d075      	beq.n	8001046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f5a:	4ba3      	ldr	r3, [pc, #652]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d00c      	beq.n	8000f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f66:	4ba0      	ldr	r3, [pc, #640]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d112      	bne.n	8000f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f72:	4b9d      	ldr	r3, [pc, #628]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f7e:	d10b      	bne.n	8000f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	4b99      	ldr	r3, [pc, #612]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d05b      	beq.n	8001044 <HAL_RCC_OscConfig+0x108>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d157      	bne.n	8001044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e23f      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa0:	d106      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x74>
 8000fa2:	4b91      	ldr	r3, [pc, #580]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a90      	ldr	r2, [pc, #576]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e01d      	b.n	8000fec <HAL_RCC_OscConfig+0xb0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x98>
 8000fba:	4b8b      	ldr	r3, [pc, #556]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a8a      	ldr	r2, [pc, #552]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b88      	ldr	r3, [pc, #544]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a87      	ldr	r2, [pc, #540]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e00b      	b.n	8000fec <HAL_RCC_OscConfig+0xb0>
 8000fd4:	4b84      	ldr	r3, [pc, #528]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a83      	ldr	r2, [pc, #524]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b81      	ldr	r3, [pc, #516]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a80      	ldr	r2, [pc, #512]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fd16 	bl	8000a24 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fd12 	bl	8000a24 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	; 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e204      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	4b76      	ldr	r3, [pc, #472]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0xc0>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fd02 	bl	8000a24 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fcfe 	bl	8000a24 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e1f0      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0xe8>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d063      	beq.n	800111a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001052:	4b65      	ldr	r3, [pc, #404]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800105e:	4b62      	ldr	r3, [pc, #392]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001066:	2b08      	cmp	r3, #8
 8001068:	d11c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800106a:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d116      	bne.n	80010a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_RCC_OscConfig+0x152>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d001      	beq.n	800108e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e1c4      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4b56      	ldr	r3, [pc, #344]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4952      	ldr	r1, [pc, #328]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	e03a      	b.n	800111a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d020      	beq.n	80010ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ac:	4b4f      	ldr	r3, [pc, #316]	; (80011ec <HAL_RCC_OscConfig+0x2b0>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b2:	f7ff fcb7 	bl	8000a24 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fcb3 	bl	8000a24 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e1a5      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	4b46      	ldr	r3, [pc, #280]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4940      	ldr	r1, [pc, #256]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <HAL_RCC_OscConfig+0x2b0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f4:	f7ff fc96 	bl	8000a24 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fc:	f7ff fc92 	bl	8000a24 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e184      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d030      	beq.n	8001188 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d016      	beq.n	800115c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112e:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <HAL_RCC_OscConfig+0x2b4>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001134:	f7ff fc76 	bl	8000a24 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fc72 	bl	8000a24 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e164      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x200>
 800115a:	e015      	b.n	8001188 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_RCC_OscConfig+0x2b4>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001162:	f7ff fc5f 	bl	8000a24 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116a:	f7ff fc5b 	bl	8000a24 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e14d      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 800117e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f0      	bne.n	800116a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80a0 	beq.w	80012d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10f      	bne.n	80011c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011c2:	2301      	movs	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_RCC_OscConfig+0x2b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d121      	bne.n	8001216 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_RCC_OscConfig+0x2b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_RCC_OscConfig+0x2b8>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011de:	f7ff fc21 	bl	8000a24 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	e011      	b.n	800120a <HAL_RCC_OscConfig+0x2ce>
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	42470000 	.word	0x42470000
 80011f0:	42470e80 	.word	0x42470e80
 80011f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f8:	f7ff fc14 	bl	8000a24 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e106      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120a:	4b85      	ldr	r3, [pc, #532]	; (8001420 <HAL_RCC_OscConfig+0x4e4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d106      	bne.n	800122c <HAL_RCC_OscConfig+0x2f0>
 800121e:	4b81      	ldr	r3, [pc, #516]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 8001220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001222:	4a80      	ldr	r2, [pc, #512]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6713      	str	r3, [r2, #112]	; 0x70
 800122a:	e01c      	b.n	8001266 <HAL_RCC_OscConfig+0x32a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0x312>
 8001234:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001238:	4a7a      	ldr	r2, [pc, #488]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6713      	str	r3, [r2, #112]	; 0x70
 8001240:	4b78      	ldr	r3, [pc, #480]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	4a77      	ldr	r2, [pc, #476]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6713      	str	r3, [r2, #112]	; 0x70
 800124c:	e00b      	b.n	8001266 <HAL_RCC_OscConfig+0x32a>
 800124e:	4b75      	ldr	r3, [pc, #468]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 8001250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001252:	4a74      	ldr	r2, [pc, #464]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6713      	str	r3, [r2, #112]	; 0x70
 800125a:	4b72      	ldr	r3, [pc, #456]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	4a71      	ldr	r2, [pc, #452]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d015      	beq.n	800129a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126e:	f7ff fbd9 	bl	8000a24 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fbd5 	bl	8000a24 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	; 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0c5      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	4b65      	ldr	r3, [pc, #404]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 800128e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ee      	beq.n	8001276 <HAL_RCC_OscConfig+0x33a>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fbc3 	bl	8000a24 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fbbf 	bl	8000a24 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0af      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	4b5a      	ldr	r3, [pc, #360]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ee      	bne.n	80012a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d105      	bne.n	80012d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ca:	4b56      	ldr	r3, [pc, #344]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a55      	ldr	r2, [pc, #340]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 80012d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 809b 	beq.w	8001416 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012e0:	4b50      	ldr	r3, [pc, #320]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d05c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d141      	bne.n	8001378 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <HAL_RCC_OscConfig+0x4ec>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb93 	bl	8000a24 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fb8f 	bl	8000a24 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e081      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f0      	bne.n	8001302 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69da      	ldr	r2, [r3, #28]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	019b      	lsls	r3, r3, #6
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	085b      	lsrs	r3, r3, #1
 8001338:	3b01      	subs	r3, #1
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	061b      	lsls	r3, r3, #24
 8001344:	4937      	ldr	r1, [pc, #220]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <HAL_RCC_OscConfig+0x4ec>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb68 	bl	8000a24 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff fb64 	bl	8000a24 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e056      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136a:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x41c>
 8001376:	e04e      	b.n	8001416 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_RCC_OscConfig+0x4ec>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fb51 	bl	8000a24 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fb4d 	bl	8000a24 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e03f      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x44a>
 80013a4:	e037      	b.n	8001416 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e032      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_RCC_OscConfig+0x4e8>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d028      	beq.n	8001412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d121      	bne.n	8001412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d11a      	bne.n	8001412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013e2:	4013      	ands	r3, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d111      	bne.n	8001412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	3b01      	subs	r3, #1
 80013fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013fe:	429a      	cmp	r2, r3
 8001400:	d107      	bne.n	8001412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800140e:	429a      	cmp	r2, r3
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40007000 	.word	0x40007000
 8001424:	40023800 	.word	0x40023800
 8001428:	42470060 	.word	0x42470060

0800142c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0cc      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001440:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d90c      	bls.n	8001468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0b8      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001480:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a58      	ldr	r2, [pc, #352]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800148a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001498:	4b53      	ldr	r3, [pc, #332]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a52      	ldr	r2, [pc, #328]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a4:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	494d      	ldr	r1, [pc, #308]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d044      	beq.n	800154c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d119      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e07f      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d003      	beq.n	80014ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06f      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e067      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f023 0203 	bic.w	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4934      	ldr	r1, [pc, #208]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	4313      	orrs	r3, r2
 800151a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800151c:	f7ff fa82 	bl	8000a24 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	e00a      	b.n	800153a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f7ff fa7e 	bl	8000a24 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e04f      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 020c 	and.w	r2, r3, #12
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	429a      	cmp	r2, r3
 800154a:	d1eb      	bne.n	8001524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d20c      	bcs.n	8001574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e032      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4916      	ldr	r1, [pc, #88]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	490e      	ldr	r1, [pc, #56]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015b2:	f000 f821 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	490a      	ldr	r1, [pc, #40]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	5ccb      	ldrb	r3, [r1, r3]
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_RCC_ClockConfig+0x1c8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f93c 	bl	8000850 <HAL_InitTick>

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00
 80015e8:	40023800 	.word	0x40023800
 80015ec:	08004b10 	.word	0x08004b10
 80015f0:	2000000c 	.word	0x2000000c
 80015f4:	20000010 	.word	0x20000010

080015f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001610:	4b67      	ldr	r3, [pc, #412]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d00d      	beq.n	8001638 <HAL_RCC_GetSysClockFreq+0x40>
 800161c:	2b08      	cmp	r3, #8
 800161e:	f200 80bd 	bhi.w	800179c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_RCC_GetSysClockFreq+0x34>
 8001626:	2b04      	cmp	r3, #4
 8001628:	d003      	beq.n	8001632 <HAL_RCC_GetSysClockFreq+0x3a>
 800162a:	e0b7      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800162e:	60bb      	str	r3, [r7, #8]
       break;
 8001630:	e0b7      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001632:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001634:	60bb      	str	r3, [r7, #8]
      break;
 8001636:	e0b4      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001638:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001640:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001642:	4b5b      	ldr	r3, [pc, #364]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d04d      	beq.n	80016ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164e:	4b58      	ldr	r3, [pc, #352]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	099b      	lsrs	r3, r3, #6
 8001654:	461a      	mov	r2, r3
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	ea02 0800 	and.w	r8, r2, r0
 8001666:	ea03 0901 	and.w	r9, r3, r1
 800166a:	4640      	mov	r0, r8
 800166c:	4649      	mov	r1, r9
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	014b      	lsls	r3, r1, #5
 8001678:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800167c:	0142      	lsls	r2, r0, #5
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	ebb0 0008 	subs.w	r0, r0, r8
 8001686:	eb61 0109 	sbc.w	r1, r1, r9
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	018b      	lsls	r3, r1, #6
 8001694:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001698:	0182      	lsls	r2, r0, #6
 800169a:	1a12      	subs	r2, r2, r0
 800169c:	eb63 0301 	sbc.w	r3, r3, r1
 80016a0:	f04f 0000 	mov.w	r0, #0
 80016a4:	f04f 0100 	mov.w	r1, #0
 80016a8:	00d9      	lsls	r1, r3, #3
 80016aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016ae:	00d0      	lsls	r0, r2, #3
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	eb12 0208 	adds.w	r2, r2, r8
 80016b8:	eb43 0309 	adc.w	r3, r3, r9
 80016bc:	f04f 0000 	mov.w	r0, #0
 80016c0:	f04f 0100 	mov.w	r1, #0
 80016c4:	0259      	lsls	r1, r3, #9
 80016c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016ca:	0250      	lsls	r0, r2, #9
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	461a      	mov	r2, r3
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	f7fe fd80 	bl	80001e0 <__aeabi_uldivmod>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4613      	mov	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e04a      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	461a      	mov	r2, r3
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	ea02 0400 	and.w	r4, r2, r0
 8001702:	ea03 0501 	and.w	r5, r3, r1
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	014b      	lsls	r3, r1, #5
 8001714:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001718:	0142      	lsls	r2, r0, #5
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	1b00      	subs	r0, r0, r4
 8001720:	eb61 0105 	sbc.w	r1, r1, r5
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	018b      	lsls	r3, r1, #6
 800172e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001732:	0182      	lsls	r2, r0, #6
 8001734:	1a12      	subs	r2, r2, r0
 8001736:	eb63 0301 	sbc.w	r3, r3, r1
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	00d9      	lsls	r1, r3, #3
 8001744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001748:	00d0      	lsls	r0, r2, #3
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	1912      	adds	r2, r2, r4
 8001750:	eb45 0303 	adc.w	r3, r5, r3
 8001754:	f04f 0000 	mov.w	r0, #0
 8001758:	f04f 0100 	mov.w	r1, #0
 800175c:	0299      	lsls	r1, r3, #10
 800175e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001762:	0290      	lsls	r0, r2, #10
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	461a      	mov	r2, r3
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	f7fe fd34 	bl	80001e0 <__aeabi_uldivmod>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4613      	mov	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	0c1b      	lsrs	r3, r3, #16
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	3301      	adds	r3, #1
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	fbb2 f3f3 	udiv	r3, r2, r3
 8001798:	60bb      	str	r3, [r7, #8]
      break;
 800179a:	e002      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800179e:	60bb      	str	r3, [r7, #8]
      break;
 80017a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017a2:	68bb      	ldr	r3, [r7, #8]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	00f42400 	.word	0x00f42400
 80017b8:	007a1200 	.word	0x007a1200

080017bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000000c 	.word	0x2000000c

080017d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017d8:	f7ff fff0 	bl	80017bc <HAL_RCC_GetHCLKFreq>
 80017dc:	4602      	mov	r2, r0
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	0a9b      	lsrs	r3, r3, #10
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	4903      	ldr	r1, [pc, #12]	; (80017f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ea:	5ccb      	ldrb	r3, [r1, r3]
 80017ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	08004b20 	.word	0x08004b20

080017fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001800:	f7ff ffdc 	bl	80017bc <HAL_RCC_GetHCLKFreq>
 8001804:	4602      	mov	r2, r0
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	0b5b      	lsrs	r3, r3, #13
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	4903      	ldr	r1, [pc, #12]	; (8001820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001812:	5ccb      	ldrb	r3, [r1, r3]
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001818:	4618      	mov	r0, r3
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40023800 	.word	0x40023800
 8001820:	08004b20 	.word	0x08004b20

08001824 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	220f      	movs	r2, #15
 8001832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_RCC_GetClockConfig+0x5c>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0203 	and.w	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_RCC_GetClockConfig+0x5c>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_RCC_GetClockConfig+0x5c>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_GetClockConfig+0x5c>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	08db      	lsrs	r3, r3, #3
 800185e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_RCC_GetClockConfig+0x60>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0207 	and.w	r2, r3, #7
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	601a      	str	r2, [r3, #0]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e041      	b.n	800191e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f839 	bl	8001926 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3304      	adds	r3, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4610      	mov	r0, r2
 80018c8:	f000 f9ca 	bl	8001c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d001      	beq.n	8001954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e044      	b.n	80019de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <HAL_TIM_Base_Start_IT+0xb0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d018      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x6c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197e:	d013      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x6c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1a      	ldr	r2, [pc, #104]	; (80019f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00e      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x6c>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d009      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x6c>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d004      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0x6c>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a16      	ldr	r2, [pc, #88]	; (80019fc <HAL_TIM_Base_Start_IT+0xc0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d111      	bne.n	80019cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d010      	beq.n	80019dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0201 	orr.w	r2, r2, #1
 80019c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ca:	e007      	b.n	80019dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40000400 	.word	0x40000400
 80019f4:	40000800 	.word	0x40000800
 80019f8:	40000c00 	.word	0x40000c00
 80019fc:	40014000 	.word	0x40014000

08001a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d122      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d11b      	bne.n	8001a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0202 	mvn.w	r2, #2
 8001a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8ee 	bl	8001c24 <HAL_TIM_IC_CaptureCallback>
 8001a48:	e005      	b.n	8001a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8e0 	bl	8001c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8f1 	bl	8001c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d122      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d11b      	bne.n	8001ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0204 	mvn.w	r2, #4
 8001a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2202      	movs	r2, #2
 8001a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8c4 	bl	8001c24 <HAL_TIM_IC_CaptureCallback>
 8001a9c:	e005      	b.n	8001aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8b6 	bl	8001c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8c7 	bl	8001c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d122      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d11b      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f06f 0208 	mvn.w	r2, #8
 8001ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2204      	movs	r2, #4
 8001ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f89a 	bl	8001c24 <HAL_TIM_IC_CaptureCallback>
 8001af0:	e005      	b.n	8001afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f88c 	bl	8001c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f89d 	bl	8001c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d122      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d11b      	bne.n	8001b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0210 	mvn.w	r2, #16
 8001b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f870 	bl	8001c24 <HAL_TIM_IC_CaptureCallback>
 8001b44:	e005      	b.n	8001b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f862 	bl	8001c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f873 	bl	8001c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10e      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0201 	mvn.w	r2, #1
 8001b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe fdda 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b80      	cmp	r3, #128	; 0x80
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	2b80      	cmp	r3, #128	; 0x80
 8001b9e:	d107      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8e2 	bl	8001d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d10e      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d107      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f838 	bl	8001c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d107      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0220 	mvn.w	r2, #32
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8ac 	bl	8001d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <TIM_Base_SetConfig+0xe4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d00f      	beq.n	8001c98 <TIM_Base_SetConfig+0x38>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7e:	d00b      	beq.n	8001c98 <TIM_Base_SetConfig+0x38>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <TIM_Base_SetConfig+0xe8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d007      	beq.n	8001c98 <TIM_Base_SetConfig+0x38>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <TIM_Base_SetConfig+0xec>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <TIM_Base_SetConfig+0x38>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a2f      	ldr	r2, [pc, #188]	; (8001d50 <TIM_Base_SetConfig+0xf0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d108      	bne.n	8001caa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a25      	ldr	r2, [pc, #148]	; (8001d44 <TIM_Base_SetConfig+0xe4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01b      	beq.n	8001cea <TIM_Base_SetConfig+0x8a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb8:	d017      	beq.n	8001cea <TIM_Base_SetConfig+0x8a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a22      	ldr	r2, [pc, #136]	; (8001d48 <TIM_Base_SetConfig+0xe8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <TIM_Base_SetConfig+0x8a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a21      	ldr	r2, [pc, #132]	; (8001d4c <TIM_Base_SetConfig+0xec>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00f      	beq.n	8001cea <TIM_Base_SetConfig+0x8a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <TIM_Base_SetConfig+0xf0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00b      	beq.n	8001cea <TIM_Base_SetConfig+0x8a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <TIM_Base_SetConfig+0xf4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d007      	beq.n	8001cea <TIM_Base_SetConfig+0x8a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <TIM_Base_SetConfig+0xf8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d003      	beq.n	8001cea <TIM_Base_SetConfig+0x8a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <TIM_Base_SetConfig+0xfc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d108      	bne.n	8001cfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <TIM_Base_SetConfig+0xe4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d103      	bne.n	8001d30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	615a      	str	r2, [r3, #20]
}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40000800 	.word	0x40000800
 8001d50:	40000c00 	.word	0x40000c00
 8001d54:	40014000 	.word	0x40014000
 8001d58:	40014400 	.word	0x40014400
 8001d5c:	40014800 	.word	0x40014800

08001d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e03f      	b.n	8001e1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fd06 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2224      	movs	r2, #36	; 0x24
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f829 	bl	8001e24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e28:	b09f      	sub	sp, #124	; 0x7c
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3a:	68d9      	ldr	r1, [r3, #12]
 8001e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	ea40 0301 	orr.w	r3, r0, r1
 8001e44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e68:	f021 010c 	bic.w	r1, r1, #12
 8001e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e72:	430b      	orrs	r3, r1
 8001e74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e82:	6999      	ldr	r1, [r3, #24]
 8001e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	ea40 0301 	orr.w	r3, r0, r1
 8001e8c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4bc5      	ldr	r3, [pc, #788]	; (80021a8 <UART_SetConfig+0x384>)
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d004      	beq.n	8001ea2 <UART_SetConfig+0x7e>
 8001e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4bc3      	ldr	r3, [pc, #780]	; (80021ac <UART_SetConfig+0x388>)
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d103      	bne.n	8001eaa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ea2:	f7ff fcab 	bl	80017fc <HAL_RCC_GetPCLK2Freq>
 8001ea6:	6778      	str	r0, [r7, #116]	; 0x74
 8001ea8:	e002      	b.n	8001eb0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001eaa:	f7ff fc93 	bl	80017d4 <HAL_RCC_GetPCLK1Freq>
 8001eae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eb8:	f040 80b6 	bne.w	8002028 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ebe:	461c      	mov	r4, r3
 8001ec0:	f04f 0500 	mov.w	r5, #0
 8001ec4:	4622      	mov	r2, r4
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	1891      	adds	r1, r2, r2
 8001eca:	6439      	str	r1, [r7, #64]	; 0x40
 8001ecc:	415b      	adcs	r3, r3
 8001ece:	647b      	str	r3, [r7, #68]	; 0x44
 8001ed0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ed4:	1912      	adds	r2, r2, r4
 8001ed6:	eb45 0303 	adc.w	r3, r5, r3
 8001eda:	f04f 0000 	mov.w	r0, #0
 8001ede:	f04f 0100 	mov.w	r1, #0
 8001ee2:	00d9      	lsls	r1, r3, #3
 8001ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ee8:	00d0      	lsls	r0, r2, #3
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	1911      	adds	r1, r2, r4
 8001ef0:	6639      	str	r1, [r7, #96]	; 0x60
 8001ef2:	416b      	adcs	r3, r5
 8001ef4:	667b      	str	r3, [r7, #100]	; 0x64
 8001ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	1891      	adds	r1, r2, r2
 8001f02:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f04:	415b      	adcs	r3, r3
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f10:	f7fe f966 	bl	80001e0 <__aeabi_uldivmod>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4ba5      	ldr	r3, [pc, #660]	; (80021b0 <UART_SetConfig+0x38c>)
 8001f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	011e      	lsls	r6, r3, #4
 8001f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f24:	461c      	mov	r4, r3
 8001f26:	f04f 0500 	mov.w	r5, #0
 8001f2a:	4622      	mov	r2, r4
 8001f2c:	462b      	mov	r3, r5
 8001f2e:	1891      	adds	r1, r2, r2
 8001f30:	6339      	str	r1, [r7, #48]	; 0x30
 8001f32:	415b      	adcs	r3, r3
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
 8001f36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f3a:	1912      	adds	r2, r2, r4
 8001f3c:	eb45 0303 	adc.w	r3, r5, r3
 8001f40:	f04f 0000 	mov.w	r0, #0
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	00d9      	lsls	r1, r3, #3
 8001f4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f4e:	00d0      	lsls	r0, r2, #3
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	1911      	adds	r1, r2, r4
 8001f56:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f58:	416b      	adcs	r3, r5
 8001f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	1891      	adds	r1, r2, r2
 8001f68:	62b9      	str	r1, [r7, #40]	; 0x28
 8001f6a:	415b      	adcs	r3, r3
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f76:	f7fe f933 	bl	80001e0 <__aeabi_uldivmod>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4b8c      	ldr	r3, [pc, #560]	; (80021b0 <UART_SetConfig+0x38c>)
 8001f80:	fba3 1302 	umull	r1, r3, r3, r2
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	2164      	movs	r1, #100	; 0x64
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	3332      	adds	r3, #50	; 0x32
 8001f92:	4a87      	ldr	r2, [pc, #540]	; (80021b0 <UART_SetConfig+0x38c>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	095b      	lsrs	r3, r3, #5
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fa0:	441e      	add	r6, r3
 8001fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	1894      	adds	r4, r2, r2
 8001fb0:	623c      	str	r4, [r7, #32]
 8001fb2:	415b      	adcs	r3, r3
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fba:	1812      	adds	r2, r2, r0
 8001fbc:	eb41 0303 	adc.w	r3, r1, r3
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	f04f 0500 	mov.w	r5, #0
 8001fc8:	00dd      	lsls	r5, r3, #3
 8001fca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001fce:	00d4      	lsls	r4, r2, #3
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	462b      	mov	r3, r5
 8001fd4:	1814      	adds	r4, r2, r0
 8001fd6:	653c      	str	r4, [r7, #80]	; 0x50
 8001fd8:	414b      	adcs	r3, r1
 8001fda:	657b      	str	r3, [r7, #84]	; 0x54
 8001fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	1891      	adds	r1, r2, r2
 8001fe8:	61b9      	str	r1, [r7, #24]
 8001fea:	415b      	adcs	r3, r3
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ff2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ff6:	f7fe f8f3 	bl	80001e0 <__aeabi_uldivmod>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <UART_SetConfig+0x38c>)
 8002000:	fba3 1302 	umull	r1, r3, r3, r2
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	2164      	movs	r1, #100	; 0x64
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	3332      	adds	r3, #50	; 0x32
 8002012:	4a67      	ldr	r2, [pc, #412]	; (80021b0 <UART_SetConfig+0x38c>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	f003 0207 	and.w	r2, r3, #7
 800201e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4432      	add	r2, r6
 8002024:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002026:	e0b9      	b.n	800219c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800202a:	461c      	mov	r4, r3
 800202c:	f04f 0500 	mov.w	r5, #0
 8002030:	4622      	mov	r2, r4
 8002032:	462b      	mov	r3, r5
 8002034:	1891      	adds	r1, r2, r2
 8002036:	6139      	str	r1, [r7, #16]
 8002038:	415b      	adcs	r3, r3
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002040:	1912      	adds	r2, r2, r4
 8002042:	eb45 0303 	adc.w	r3, r5, r3
 8002046:	f04f 0000 	mov.w	r0, #0
 800204a:	f04f 0100 	mov.w	r1, #0
 800204e:	00d9      	lsls	r1, r3, #3
 8002050:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002054:	00d0      	lsls	r0, r2, #3
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	eb12 0804 	adds.w	r8, r2, r4
 800205e:	eb43 0905 	adc.w	r9, r3, r5
 8002062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	f04f 0100 	mov.w	r1, #0
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	008b      	lsls	r3, r1, #2
 8002076:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800207a:	0082      	lsls	r2, r0, #2
 800207c:	4640      	mov	r0, r8
 800207e:	4649      	mov	r1, r9
 8002080:	f7fe f8ae 	bl	80001e0 <__aeabi_uldivmod>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4b49      	ldr	r3, [pc, #292]	; (80021b0 <UART_SetConfig+0x38c>)
 800208a:	fba3 2302 	umull	r2, r3, r3, r2
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	011e      	lsls	r6, r3, #4
 8002092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002094:	4618      	mov	r0, r3
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	1894      	adds	r4, r2, r2
 80020a0:	60bc      	str	r4, [r7, #8]
 80020a2:	415b      	adcs	r3, r3
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020aa:	1812      	adds	r2, r2, r0
 80020ac:	eb41 0303 	adc.w	r3, r1, r3
 80020b0:	f04f 0400 	mov.w	r4, #0
 80020b4:	f04f 0500 	mov.w	r5, #0
 80020b8:	00dd      	lsls	r5, r3, #3
 80020ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80020be:	00d4      	lsls	r4, r2, #3
 80020c0:	4622      	mov	r2, r4
 80020c2:	462b      	mov	r3, r5
 80020c4:	1814      	adds	r4, r2, r0
 80020c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80020c8:	414b      	adcs	r3, r1
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f04f 0100 	mov.w	r1, #0
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	008b      	lsls	r3, r1, #2
 80020e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020e4:	0082      	lsls	r2, r0, #2
 80020e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80020ea:	f7fe f879 	bl	80001e0 <__aeabi_uldivmod>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <UART_SetConfig+0x38c>)
 80020f4:	fba3 1302 	umull	r1, r3, r3, r2
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	2164      	movs	r1, #100	; 0x64
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	3332      	adds	r3, #50	; 0x32
 8002106:	4a2a      	ldr	r2, [pc, #168]	; (80021b0 <UART_SetConfig+0x38c>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002112:	441e      	add	r6, r3
 8002114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002116:	4618      	mov	r0, r3
 8002118:	f04f 0100 	mov.w	r1, #0
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	1894      	adds	r4, r2, r2
 8002122:	603c      	str	r4, [r7, #0]
 8002124:	415b      	adcs	r3, r3
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800212c:	1812      	adds	r2, r2, r0
 800212e:	eb41 0303 	adc.w	r3, r1, r3
 8002132:	f04f 0400 	mov.w	r4, #0
 8002136:	f04f 0500 	mov.w	r5, #0
 800213a:	00dd      	lsls	r5, r3, #3
 800213c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002140:	00d4      	lsls	r4, r2, #3
 8002142:	4622      	mov	r2, r4
 8002144:	462b      	mov	r3, r5
 8002146:	eb12 0a00 	adds.w	sl, r2, r0
 800214a:	eb43 0b01 	adc.w	fp, r3, r1
 800214e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	008b      	lsls	r3, r1, #2
 8002162:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002166:	0082      	lsls	r2, r0, #2
 8002168:	4650      	mov	r0, sl
 800216a:	4659      	mov	r1, fp
 800216c:	f7fe f838 	bl	80001e0 <__aeabi_uldivmod>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <UART_SetConfig+0x38c>)
 8002176:	fba3 1302 	umull	r1, r3, r3, r2
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2164      	movs	r1, #100	; 0x64
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	3332      	adds	r3, #50	; 0x32
 8002188:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <UART_SetConfig+0x38c>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4432      	add	r2, r6
 800219a:	609a      	str	r2, [r3, #8]
}
 800219c:	bf00      	nop
 800219e:	377c      	adds	r7, #124	; 0x7c
 80021a0:	46bd      	mov	sp, r7
 80021a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021a6:	bf00      	nop
 80021a8:	40011000 	.word	0x40011000
 80021ac:	40011400 	.word	0x40011400
 80021b0:	51eb851f 	.word	0x51eb851f

080021b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <SysTick_Handler+0x1c>)
 80021ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80021bc:	f001 fbc8 	bl	8003950 <xTaskGetSchedulerState>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d001      	beq.n	80021ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80021c6:	f002 f9af 	bl	8004528 <xPortSysTickHandler>
  }
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a07      	ldr	r2, [pc, #28]	; (8002200 <vApplicationGetIdleTaskMemory+0x2c>)
 80021e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <vApplicationGetIdleTaskMemory+0x30>)
 80021ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000038 	.word	0x20000038
 8002204:	20000094 	.word	0x20000094

08002208 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a07      	ldr	r2, [pc, #28]	; (8002234 <vApplicationGetTimerTaskMemory+0x2c>)
 8002218:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <vApplicationGetTimerTaskMemory+0x30>)
 800221e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002226:	601a      	str	r2, [r3, #0]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	20000294 	.word	0x20000294
 8002238:	200002f0 	.word	0x200002f0

0800223c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 0208 	add.w	r2, r3, #8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f103 0208 	add.w	r2, r3, #8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f103 0208 	add.w	r2, r3, #8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d103      	bne.n	80022fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e00c      	b.n	8002318 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3308      	adds	r3, #8
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e002      	b.n	800230c <vListInsert+0x2e>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	429a      	cmp	r2, r3
 8002316:	d2f6      	bcs.n	8002306 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6892      	ldr	r2, [r2, #8]
 8002366:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6852      	ldr	r2, [r2, #4]
 8002370:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d103      	bne.n	8002384 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023ca:	bf00      	nop
 80023cc:	e7fe      	b.n	80023cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023ce:	f002 f819 	bl	8004404 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	68f9      	ldr	r1, [r7, #12]
 80023dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	441a      	add	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	3b01      	subs	r3, #1
 8002400:	68f9      	ldr	r1, [r7, #12]
 8002402:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	441a      	add	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	22ff      	movs	r2, #255	; 0xff
 8002412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	22ff      	movs	r2, #255	; 0xff
 800241a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d114      	bne.n	800244e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01a      	beq.n	8002462 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3310      	adds	r3, #16
 8002430:	4618      	mov	r0, r3
 8002432:	f001 f8cf 	bl	80035d4 <xTaskRemoveFromEventList>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <xQueueGenericReset+0xcc>)
 800243e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	e009      	b.n	8002462 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3310      	adds	r3, #16
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fef2 	bl	800223c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3324      	adds	r3, #36	; 0x24
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff feed 	bl	800223c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002462:	f001 ffff 	bl	8004464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	e000ed04 	.word	0xe000ed04

08002474 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08e      	sub	sp, #56	; 0x38
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800249a:	bf00      	nop
 800249c:	e7fe      	b.n	800249c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <xQueueGenericCreateStatic+0x52>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <xQueueGenericCreateStatic+0x56>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <xQueueGenericCreateStatic+0x58>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	623b      	str	r3, [r7, #32]
}
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <xQueueGenericCreateStatic+0x7e>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <xQueueGenericCreateStatic+0x82>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <xQueueGenericCreateStatic+0x84>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	61fb      	str	r3, [r7, #28]
}
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002512:	2350      	movs	r3, #80	; 0x50
 8002514:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b50      	cmp	r3, #80	; 0x50
 800251a:	d00a      	beq.n	8002532 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	61bb      	str	r3, [r7, #24]
}
 800252e:	bf00      	nop
 8002530:	e7fe      	b.n	8002530 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002532:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00d      	beq.n	800255a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002546:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	4613      	mov	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f805 	bl	8002564 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800255c:	4618      	mov	r0, r3
 800255e:	3730      	adds	r7, #48	; 0x30
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e002      	b.n	8002586 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002592:	2101      	movs	r1, #1
 8002594:	69b8      	ldr	r0, [r7, #24]
 8002596:	f7ff ff05 	bl	80023a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08e      	sub	sp, #56	; 0x38
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025ba:	2300      	movs	r3, #0
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <xQueueGenericSend+0x32>
	__asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d103      	bne.n	80025ec <xQueueGenericSend+0x40>
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <xQueueGenericSend+0x44>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <xQueueGenericSend+0x46>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10a      	bne.n	800260c <xQueueGenericSend+0x60>
	__asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002608:	bf00      	nop
 800260a:	e7fe      	b.n	800260a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d103      	bne.n	800261a <xQueueGenericSend+0x6e>
 8002612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <xQueueGenericSend+0x72>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <xQueueGenericSend+0x74>
 800261e:	2300      	movs	r3, #0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <xQueueGenericSend+0x8e>
	__asm volatile
 8002624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	623b      	str	r3, [r7, #32]
}
 8002636:	bf00      	nop
 8002638:	e7fe      	b.n	8002638 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800263a:	f001 f989 	bl	8003950 <xTaskGetSchedulerState>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <xQueueGenericSend+0x9e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <xQueueGenericSend+0xa2>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <xQueueGenericSend+0xa4>
 800264e:	2300      	movs	r3, #0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <xQueueGenericSend+0xbe>
	__asm volatile
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	61fb      	str	r3, [r7, #28]
}
 8002666:	bf00      	nop
 8002668:	e7fe      	b.n	8002668 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800266a:	f001 fecb 	bl	8004404 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <xQueueGenericSend+0xd4>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d129      	bne.n	80026d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002686:	f000 fa0b 	bl	8002aa0 <prvCopyDataToQueue>
 800268a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2b00      	cmp	r3, #0
 8002692:	d010      	beq.n	80026b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	3324      	adds	r3, #36	; 0x24
 8002698:	4618      	mov	r0, r3
 800269a:	f000 ff9b 	bl	80035d4 <xTaskRemoveFromEventList>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <xQueueGenericSend+0x1f8>)
 80026a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	e00a      	b.n	80026cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026bc:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <xQueueGenericSend+0x1f8>)
 80026be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026cc:	f001 feca 	bl	8004464 <vPortExitCritical>
				return pdPASS;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e063      	b.n	800279c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026da:	f001 fec3 	bl	8004464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	e05c      	b.n	800279c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 ffd5 	bl	800369c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026f6:	f001 feb5 	bl	8004464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026fa:	f000 fd47 	bl	800318c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026fe:	f001 fe81 	bl	8004404 <vPortEnterCritical>
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002708:	b25b      	sxtb	r3, r3
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d103      	bne.n	8002718 <xQueueGenericSend+0x16c>
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800271e:	b25b      	sxtb	r3, r3
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d103      	bne.n	800272e <xQueueGenericSend+0x182>
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800272e:	f001 fe99 	bl	8004464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002732:	1d3a      	adds	r2, r7, #4
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f000 ffc4 	bl	80036c8 <xTaskCheckForTimeOut>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d124      	bne.n	8002790 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002748:	f000 faa2 	bl	8002c90 <prvIsQueueFull>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d018      	beq.n	8002784 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	3310      	adds	r3, #16
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f000 feea 	bl	8003534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002762:	f000 fa2d 	bl	8002bc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002766:	f000 fd1f 	bl	80031a8 <xTaskResumeAll>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f af7c 	bne.w	800266a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <xQueueGenericSend+0x1f8>)
 8002774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	e772      	b.n	800266a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002786:	f000 fa1b 	bl	8002bc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800278a:	f000 fd0d 	bl	80031a8 <xTaskResumeAll>
 800278e:	e76c      	b.n	800266a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002792:	f000 fa15 	bl	8002bc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002796:	f000 fd07 	bl	80031a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800279a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800279c:	4618      	mov	r0, r3
 800279e:	3738      	adds	r7, #56	; 0x38
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	e000ed04 	.word	0xe000ed04

080027a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b090      	sub	sp, #64	; 0x40
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d103      	bne.n	80027e4 <xQueueGenericSendFromISR+0x3c>
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <xQueueGenericSendFromISR+0x40>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <xQueueGenericSendFromISR+0x42>
 80027e8:	2300      	movs	r3, #0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80027ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002800:	bf00      	nop
 8002802:	e7fe      	b.n	8002802 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d103      	bne.n	8002812 <xQueueGenericSendFromISR+0x6a>
 800280a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <xQueueGenericSendFromISR+0x6e>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <xQueueGenericSendFromISR+0x70>
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	623b      	str	r3, [r7, #32]
}
 800282e:	bf00      	nop
 8002830:	e7fe      	b.n	8002830 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002832:	f001 fec9 	bl	80045c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002836:	f3ef 8211 	mrs	r2, BASEPRI
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	61fa      	str	r2, [r7, #28]
 800284c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800284e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002850:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <xQueueGenericSendFromISR+0xbc>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d12f      	bne.n	80028c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800286a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800287a:	f000 f911 	bl	8002aa0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800287e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002886:	d112      	bne.n	80028ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	2b00      	cmp	r3, #0
 800288e:	d016      	beq.n	80028be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002892:	3324      	adds	r3, #36	; 0x24
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fe9d 	bl	80035d4 <xTaskRemoveFromEventList>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00e      	beq.n	80028be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e007      	b.n	80028be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028b2:	3301      	adds	r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	b25a      	sxtb	r2, r3
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028be:	2301      	movs	r3, #1
 80028c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80028c2:	e001      	b.n	80028c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3740      	adds	r7, #64	; 0x40
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	; 0x30
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <xQueueReceive+0x30>
	__asm volatile
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	623b      	str	r3, [r7, #32]
}
 800290c:	bf00      	nop
 800290e:	e7fe      	b.n	800290e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <xQueueReceive+0x3e>
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <xQueueReceive+0x42>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <xQueueReceive+0x44>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <xQueueReceive+0x5e>
	__asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	61fb      	str	r3, [r7, #28]
}
 800293a:	bf00      	nop
 800293c:	e7fe      	b.n	800293c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800293e:	f001 f807 	bl	8003950 <xTaskGetSchedulerState>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <xQueueReceive+0x6e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <xQueueReceive+0x72>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <xQueueReceive+0x74>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <xQueueReceive+0x8e>
	__asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	61bb      	str	r3, [r7, #24]
}
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800296e:	f001 fd49 	bl	8004404 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01f      	beq.n	80029be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002982:	f000 f8f7 	bl	8002b74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00f      	beq.n	80029b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	3310      	adds	r3, #16
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fe1a 	bl	80035d4 <xTaskRemoveFromEventList>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029a6:	4b3d      	ldr	r3, [pc, #244]	; (8002a9c <xQueueReceive+0x1bc>)
 80029a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029b6:	f001 fd55 	bl	8004464 <vPortExitCritical>
				return pdPASS;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e069      	b.n	8002a92 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029c4:	f001 fd4e 	bl	8004464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e062      	b.n	8002a92 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029d2:	f107 0310 	add.w	r3, r7, #16
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fe60 	bl	800369c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029dc:	2301      	movs	r3, #1
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029e0:	f001 fd40 	bl	8004464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029e4:	f000 fbd2 	bl	800318c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029e8:	f001 fd0c 	bl	8004404 <vPortEnterCritical>
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029f2:	b25b      	sxtb	r3, r3
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d103      	bne.n	8002a02 <xQueueReceive+0x122>
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d103      	bne.n	8002a18 <xQueueReceive+0x138>
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a18:	f001 fd24 	bl	8004464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a1c:	1d3a      	adds	r2, r7, #4
 8002a1e:	f107 0310 	add.w	r3, r7, #16
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fe4f 	bl	80036c8 <xTaskCheckForTimeOut>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d123      	bne.n	8002a78 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a32:	f000 f917 	bl	8002c64 <prvIsQueueEmpty>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d017      	beq.n	8002a6c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	3324      	adds	r3, #36	; 0x24
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fd75 	bl	8003534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4c:	f000 f8b8 	bl	8002bc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a50:	f000 fbaa 	bl	80031a8 <xTaskResumeAll>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d189      	bne.n	800296e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <xQueueReceive+0x1bc>)
 8002a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	e780      	b.n	800296e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a6e:	f000 f8a7 	bl	8002bc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a72:	f000 fb99 	bl	80031a8 <xTaskResumeAll>
 8002a76:	e77a      	b.n	800296e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a7a:	f000 f8a1 	bl	8002bc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a7e:	f000 fb93 	bl	80031a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a84:	f000 f8ee 	bl	8002c64 <prvIsQueueEmpty>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f43f af6f 	beq.w	800296e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3730      	adds	r7, #48	; 0x30
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000ed04 	.word	0xe000ed04

08002aa0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10d      	bne.n	8002ada <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d14d      	bne.n	8002b62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 ff5e 	bl	800398c <xTaskPriorityDisinherit>
 8002ad0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	e043      	b.n	8002b62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d119      	bne.n	8002b14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6858      	ldr	r0, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	f001 ffba 	bl	8004a64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	441a      	add	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d32b      	bcc.n	8002b62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	e026      	b.n	8002b62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68d8      	ldr	r0, [r3, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	f001 ffa0 	bl	8004a64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	425b      	negs	r3, r3
 8002b2e:	441a      	add	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d207      	bcs.n	8002b50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	425b      	negs	r3, r3
 8002b4a:	441a      	add	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d105      	bne.n	8002b62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b6a:	697b      	ldr	r3, [r7, #20]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d018      	beq.n	8002bb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	441a      	add	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d303      	bcc.n	8002ba8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68d9      	ldr	r1, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6838      	ldr	r0, [r7, #0]
 8002bb4:	f001 ff56 	bl	8004a64 <memcpy>
	}
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bc8:	f001 fc1c 	bl	8004404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bd4:	e011      	b.n	8002bfa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d012      	beq.n	8002c04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3324      	adds	r3, #36	; 0x24
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fcf6 	bl	80035d4 <xTaskRemoveFromEventList>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002bee:	f000 fdcd 	bl	800378c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	dce9      	bgt.n	8002bd6 <prvUnlockQueue+0x16>
 8002c02:	e000      	b.n	8002c06 <prvUnlockQueue+0x46>
					break;
 8002c04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c0e:	f001 fc29 	bl	8004464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c12:	f001 fbf7 	bl	8004404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c1e:	e011      	b.n	8002c44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d012      	beq.n	8002c4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3310      	adds	r3, #16
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 fcd1 	bl	80035d4 <xTaskRemoveFromEventList>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c38:	f000 fda8 	bl	800378c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c3c:	7bbb      	ldrb	r3, [r7, #14]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	dce9      	bgt.n	8002c20 <prvUnlockQueue+0x60>
 8002c4c:	e000      	b.n	8002c50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c58:	f001 fc04 	bl	8004464 <vPortExitCritical>
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c6c:	f001 fbca 	bl	8004404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e001      	b.n	8002c82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c82:	f001 fbef 	bl	8004464 <vPortExitCritical>

	return xReturn;
 8002c86:	68fb      	ldr	r3, [r7, #12]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c98:	f001 fbb4 	bl	8004404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d102      	bne.n	8002cae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e001      	b.n	8002cb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cb2:	f001 fbd7 	bl	8004464 <vPortExitCritical>

	return xReturn;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e014      	b.n	8002cfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cd0:	4a0f      	ldr	r2, [pc, #60]	; (8002d10 <vQueueAddToRegistry+0x50>)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10b      	bne.n	8002cf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cdc:	490c      	ldr	r1, [pc, #48]	; (8002d10 <vQueueAddToRegistry+0x50>)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <vQueueAddToRegistry+0x50>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002cf2:	e006      	b.n	8002d02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b07      	cmp	r3, #7
 8002cfe:	d9e7      	bls.n	8002cd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	200049e0 	.word	0x200049e0

08002d14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d24:	f001 fb6e 	bl	8004404 <vPortEnterCritical>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d103      	bne.n	8002d3e <vQueueWaitForMessageRestricted+0x2a>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d103      	bne.n	8002d54 <vQueueWaitForMessageRestricted+0x40>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d54:	f001 fb86 	bl	8004464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d106      	bne.n	8002d6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3324      	adds	r3, #36	; 0x24
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fc07 	bl	800357c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d6e:	6978      	ldr	r0, [r7, #20]
 8002d70:	f7ff ff26 	bl	8002bc0 <prvUnlockQueue>
	}
 8002d74:	bf00      	nop
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08e      	sub	sp, #56	; 0x38
 8002d80:	af04      	add	r7, sp, #16
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	623b      	str	r3, [r7, #32]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	61fb      	str	r3, [r7, #28]
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dc2:	235c      	movs	r3, #92	; 0x5c
 8002dc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b5c      	cmp	r3, #92	; 0x5c
 8002dca:	d00a      	beq.n	8002de2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	61bb      	str	r3, [r7, #24]
}
 8002dde:	bf00      	nop
 8002de0:	e7fe      	b.n	8002de0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002de2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01e      	beq.n	8002e28 <xTaskCreateStatic+0xac>
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e02:	2300      	movs	r3, #0
 8002e04:	9303      	str	r3, [sp, #12]
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f850 	bl	8002ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e22:	f000 f8dd 	bl	8002fe0 <prvAddNewTaskToReadyList>
 8002e26:	e001      	b.n	8002e2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e2c:	697b      	ldr	r3, [r7, #20]
	}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3728      	adds	r7, #40	; 0x28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08c      	sub	sp, #48	; 0x30
 8002e3a:	af04      	add	r7, sp, #16
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 fbfc 	bl	8004648 <pvPortMalloc>
 8002e50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00e      	beq.n	8002e76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e58:	205c      	movs	r0, #92	; 0x5c
 8002e5a:	f001 fbf5 	bl	8004648 <pvPortMalloc>
 8002e5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e6c:	e005      	b.n	8002e7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f001 fcb6 	bl	80047e0 <vPortFree>
 8002e74:	e001      	b.n	8002e7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d017      	beq.n	8002eb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e88:	88fa      	ldrh	r2, [r7, #6]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9303      	str	r3, [sp, #12]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	9302      	str	r3, [sp, #8]
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	9301      	str	r3, [sp, #4]
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f80e 	bl	8002ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ea4:	69f8      	ldr	r0, [r7, #28]
 8002ea6:	f000 f89b 	bl	8002fe0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	e002      	b.n	8002eb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
	}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	21a5      	movs	r1, #165	; 0xa5
 8002eda:	f001 fdd1 	bl	8004a80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f023 0307 	bic.w	r3, r3, #7
 8002ef6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	617b      	str	r3, [r7, #20]
}
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01f      	beq.n	8002f5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e012      	b.n	8002f4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	4413      	add	r3, r2
 8002f2a:	7819      	ldrb	r1, [r3, #0]
 8002f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	4413      	add	r3, r2
 8002f32:	3334      	adds	r3, #52	; 0x34
 8002f34:	460a      	mov	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d006      	beq.n	8002f52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	3301      	adds	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	2b0f      	cmp	r3, #15
 8002f4e:	d9e9      	bls.n	8002f24 <prvInitialiseNewTask+0x64>
 8002f50:	e000      	b.n	8002f54 <prvInitialiseNewTask+0x94>
			{
				break;
 8002f52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5c:	e003      	b.n	8002f66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	2b37      	cmp	r3, #55	; 0x37
 8002f6a:	d901      	bls.n	8002f70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f6c:	2337      	movs	r3, #55	; 0x37
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	2200      	movs	r2, #0
 8002f80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	3304      	adds	r3, #4
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff f978 	bl	800227c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	3318      	adds	r3, #24
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff f973 	bl	800227c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	2200      	movs	r2, #0
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	68f9      	ldr	r1, [r7, #12]
 8002fbe:	69b8      	ldr	r0, [r7, #24]
 8002fc0:	f001 f8f4 	bl	80041ac <pxPortInitialiseStack>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fd6:	bf00      	nop
 8002fd8:	3720      	adds	r7, #32
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fe8:	f001 fa0c 	bl	8004404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fec:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <prvAddNewTaskToReadyList+0xc4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a2c      	ldr	r2, [pc, #176]	; (80030a4 <prvAddNewTaskToReadyList+0xc4>)
 8002ff4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ff6:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <prvAddNewTaskToReadyList+0xc8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ffe:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <prvAddNewTaskToReadyList+0xc8>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003004:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <prvAddNewTaskToReadyList+0xc4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d110      	bne.n	800302e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800300c:	f000 fbe2 	bl	80037d4 <prvInitialiseTaskLists>
 8003010:	e00d      	b.n	800302e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003012:	4b26      	ldr	r3, [pc, #152]	; (80030ac <prvAddNewTaskToReadyList+0xcc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <prvAddNewTaskToReadyList+0xc8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	429a      	cmp	r2, r3
 8003026:	d802      	bhi.n	800302e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <prvAddNewTaskToReadyList+0xc8>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <prvAddNewTaskToReadyList+0xd0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <prvAddNewTaskToReadyList+0xd0>)
 8003036:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <prvAddNewTaskToReadyList+0xd0>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <prvAddNewTaskToReadyList+0xd4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d903      	bls.n	8003054 <prvAddNewTaskToReadyList+0x74>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <prvAddNewTaskToReadyList+0xd4>)
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <prvAddNewTaskToReadyList+0xd8>)
 8003062:	441a      	add	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f7ff f913 	bl	8002296 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003070:	f001 f9f8 	bl	8004464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <prvAddNewTaskToReadyList+0xcc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00e      	beq.n	800309a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <prvAddNewTaskToReadyList+0xc8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	429a      	cmp	r2, r3
 8003088:	d207      	bcs.n	800309a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800308a:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <prvAddNewTaskToReadyList+0xdc>)
 800308c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000bc4 	.word	0x20000bc4
 80030a8:	200006f0 	.word	0x200006f0
 80030ac:	20000bd0 	.word	0x20000bd0
 80030b0:	20000be0 	.word	0x20000be0
 80030b4:	20000bcc 	.word	0x20000bcc
 80030b8:	200006f4 	.word	0x200006f4
 80030bc:	e000ed04 	.word	0xe000ed04

080030c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030ce:	463a      	mov	r2, r7
 80030d0:	1d39      	adds	r1, r7, #4
 80030d2:	f107 0308 	add.w	r3, r7, #8
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f87c 	bl	80021d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	9202      	str	r2, [sp, #8]
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	460a      	mov	r2, r1
 80030ee:	4921      	ldr	r1, [pc, #132]	; (8003174 <vTaskStartScheduler+0xb4>)
 80030f0:	4821      	ldr	r0, [pc, #132]	; (8003178 <vTaskStartScheduler+0xb8>)
 80030f2:	f7ff fe43 	bl	8002d7c <xTaskCreateStatic>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4a20      	ldr	r2, [pc, #128]	; (800317c <vTaskStartScheduler+0xbc>)
 80030fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030fc:	4b1f      	ldr	r3, [pc, #124]	; (800317c <vTaskStartScheduler+0xbc>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003104:	2301      	movs	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e001      	b.n	800310e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d102      	bne.n	800311a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003114:	f000 fcfc 	bl	8003b10 <xTimerCreateTimerTask>
 8003118:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d116      	bne.n	800314e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	613b      	str	r3, [r7, #16]
}
 8003132:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <vTaskStartScheduler+0xc0>)
 8003136:	f04f 32ff 	mov.w	r2, #4294967295
 800313a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <vTaskStartScheduler+0xc4>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003142:	4b11      	ldr	r3, [pc, #68]	; (8003188 <vTaskStartScheduler+0xc8>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003148:	f001 f8ba 	bl	80042c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800314c:	e00e      	b.n	800316c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d10a      	bne.n	800316c <vTaskStartScheduler+0xac>
	__asm volatile
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	60fb      	str	r3, [r7, #12]
}
 8003168:	bf00      	nop
 800316a:	e7fe      	b.n	800316a <vTaskStartScheduler+0xaa>
}
 800316c:	bf00      	nop
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	08004af8 	.word	0x08004af8
 8003178:	080037a5 	.word	0x080037a5
 800317c:	20000be8 	.word	0x20000be8
 8003180:	20000be4 	.word	0x20000be4
 8003184:	20000bd0 	.word	0x20000bd0
 8003188:	20000bc8 	.word	0x20000bc8

0800318c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <vTaskSuspendAll+0x18>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4a03      	ldr	r2, [pc, #12]	; (80031a4 <vTaskSuspendAll+0x18>)
 8003198:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000bec 	.word	0x20000bec

080031a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031b6:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <xTaskResumeAll+0x118>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	603b      	str	r3, [r7, #0]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031d4:	f001 f916 	bl	8004404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031d8:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <xTaskResumeAll+0x118>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3b01      	subs	r3, #1
 80031de:	4a38      	ldr	r2, [pc, #224]	; (80032c0 <xTaskResumeAll+0x118>)
 80031e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <xTaskResumeAll+0x118>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d162      	bne.n	80032b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <xTaskResumeAll+0x11c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d05e      	beq.n	80032b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031f2:	e02f      	b.n	8003254 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f4:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <xTaskResumeAll+0x120>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3318      	adds	r3, #24
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff f8a5 	bl	8002350 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3304      	adds	r3, #4
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff f8a0 	bl	8002350 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <xTaskResumeAll+0x124>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d903      	bls.n	8003224 <xTaskResumeAll+0x7c>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <xTaskResumeAll+0x124>)
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <xTaskResumeAll+0x128>)
 8003232:	441a      	add	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f7ff f82b 	bl	8002296 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <xTaskResumeAll+0x12c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800324e:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <xTaskResumeAll+0x130>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003254:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <xTaskResumeAll+0x120>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1cb      	bne.n	80031f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003262:	f000 fb55 	bl	8003910 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <xTaskResumeAll+0x134>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d010      	beq.n	8003294 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003272:	f000 f847 	bl	8003304 <xTaskIncrementTick>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <xTaskResumeAll+0x130>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3b01      	subs	r3, #1
 8003286:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f1      	bne.n	8003272 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <xTaskResumeAll+0x134>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <xTaskResumeAll+0x130>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800329c:	2301      	movs	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <xTaskResumeAll+0x138>)
 80032a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032b0:	f001 f8d8 	bl	8004464 <vPortExitCritical>

	return xAlreadyYielded;
 80032b4:	68bb      	ldr	r3, [r7, #8]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000bec 	.word	0x20000bec
 80032c4:	20000bc4 	.word	0x20000bc4
 80032c8:	20000b84 	.word	0x20000b84
 80032cc:	20000bcc 	.word	0x20000bcc
 80032d0:	200006f4 	.word	0x200006f4
 80032d4:	200006f0 	.word	0x200006f0
 80032d8:	20000bd8 	.word	0x20000bd8
 80032dc:	20000bd4 	.word	0x20000bd4
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <xTaskGetTickCount+0x1c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032f0:	687b      	ldr	r3, [r7, #4]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000bc8 	.word	0x20000bc8

08003304 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800330e:	4b4f      	ldr	r3, [pc, #316]	; (800344c <xTaskIncrementTick+0x148>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 808f 	bne.w	8003436 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003318:	4b4d      	ldr	r3, [pc, #308]	; (8003450 <xTaskIncrementTick+0x14c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003320:	4a4b      	ldr	r2, [pc, #300]	; (8003450 <xTaskIncrementTick+0x14c>)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d120      	bne.n	800336e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800332c:	4b49      	ldr	r3, [pc, #292]	; (8003454 <xTaskIncrementTick+0x150>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <xTaskIncrementTick+0x48>
	__asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	603b      	str	r3, [r7, #0]
}
 8003348:	bf00      	nop
 800334a:	e7fe      	b.n	800334a <xTaskIncrementTick+0x46>
 800334c:	4b41      	ldr	r3, [pc, #260]	; (8003454 <xTaskIncrementTick+0x150>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <xTaskIncrementTick+0x154>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a3f      	ldr	r2, [pc, #252]	; (8003454 <xTaskIncrementTick+0x150>)
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4a3f      	ldr	r2, [pc, #252]	; (8003458 <xTaskIncrementTick+0x154>)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b3e      	ldr	r3, [pc, #248]	; (800345c <xTaskIncrementTick+0x158>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	4a3d      	ldr	r2, [pc, #244]	; (800345c <xTaskIncrementTick+0x158>)
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	f000 fad1 	bl	8003910 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800336e:	4b3c      	ldr	r3, [pc, #240]	; (8003460 <xTaskIncrementTick+0x15c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	429a      	cmp	r2, r3
 8003376:	d349      	bcc.n	800340c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003378:	4b36      	ldr	r3, [pc, #216]	; (8003454 <xTaskIncrementTick+0x150>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d104      	bne.n	800338c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003382:	4b37      	ldr	r3, [pc, #220]	; (8003460 <xTaskIncrementTick+0x15c>)
 8003384:	f04f 32ff 	mov.w	r2, #4294967295
 8003388:	601a      	str	r2, [r3, #0]
					break;
 800338a:	e03f      	b.n	800340c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800338c:	4b31      	ldr	r3, [pc, #196]	; (8003454 <xTaskIncrementTick+0x150>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d203      	bcs.n	80033ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033a4:	4a2e      	ldr	r2, [pc, #184]	; (8003460 <xTaskIncrementTick+0x15c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033aa:	e02f      	b.n	800340c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe ffcd 	bl	8002350 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	3318      	adds	r3, #24
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe ffc4 	bl	8002350 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <xTaskIncrementTick+0x160>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d903      	bls.n	80033dc <xTaskIncrementTick+0xd8>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	4a22      	ldr	r2, [pc, #136]	; (8003464 <xTaskIncrementTick+0x160>)
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <xTaskIncrementTick+0x164>)
 80033ea:	441a      	add	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f7fe ff4f 	bl	8002296 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <xTaskIncrementTick+0x168>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	429a      	cmp	r2, r3
 8003404:	d3b8      	bcc.n	8003378 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003406:	2301      	movs	r3, #1
 8003408:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800340a:	e7b5      	b.n	8003378 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800340c:	4b17      	ldr	r3, [pc, #92]	; (800346c <xTaskIncrementTick+0x168>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003412:	4915      	ldr	r1, [pc, #84]	; (8003468 <xTaskIncrementTick+0x164>)
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d901      	bls.n	8003428 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003424:	2301      	movs	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <xTaskIncrementTick+0x16c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003430:	2301      	movs	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e004      	b.n	8003440 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <xTaskIncrementTick+0x170>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3301      	adds	r3, #1
 800343c:	4a0d      	ldr	r2, [pc, #52]	; (8003474 <xTaskIncrementTick+0x170>)
 800343e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003440:	697b      	ldr	r3, [r7, #20]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000bec 	.word	0x20000bec
 8003450:	20000bc8 	.word	0x20000bc8
 8003454:	20000b7c 	.word	0x20000b7c
 8003458:	20000b80 	.word	0x20000b80
 800345c:	20000bdc 	.word	0x20000bdc
 8003460:	20000be4 	.word	0x20000be4
 8003464:	20000bcc 	.word	0x20000bcc
 8003468:	200006f4 	.word	0x200006f4
 800346c:	200006f0 	.word	0x200006f0
 8003470:	20000bd8 	.word	0x20000bd8
 8003474:	20000bd4 	.word	0x20000bd4

08003478 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800347e:	4b28      	ldr	r3, [pc, #160]	; (8003520 <vTaskSwitchContext+0xa8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003486:	4b27      	ldr	r3, [pc, #156]	; (8003524 <vTaskSwitchContext+0xac>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800348c:	e041      	b.n	8003512 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800348e:	4b25      	ldr	r3, [pc, #148]	; (8003524 <vTaskSwitchContext+0xac>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <vTaskSwitchContext+0xb0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e010      	b.n	80034be <vTaskSwitchContext+0x46>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	607b      	str	r3, [r7, #4]
}
 80034b4:	bf00      	nop
 80034b6:	e7fe      	b.n	80034b6 <vTaskSwitchContext+0x3e>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	491b      	ldr	r1, [pc, #108]	; (800352c <vTaskSwitchContext+0xb4>)
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0e4      	beq.n	800349c <vTaskSwitchContext+0x24>
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4a13      	ldr	r2, [pc, #76]	; (800352c <vTaskSwitchContext+0xb4>)
 80034de:	4413      	add	r3, r2
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	605a      	str	r2, [r3, #4]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	3308      	adds	r3, #8
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d104      	bne.n	8003502 <vTaskSwitchContext+0x8a>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a09      	ldr	r2, [pc, #36]	; (8003530 <vTaskSwitchContext+0xb8>)
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4a06      	ldr	r2, [pc, #24]	; (8003528 <vTaskSwitchContext+0xb0>)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6013      	str	r3, [r2, #0]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000bec 	.word	0x20000bec
 8003524:	20000bd8 	.word	0x20000bd8
 8003528:	20000bcc 	.word	0x20000bcc
 800352c:	200006f4 	.word	0x200006f4
 8003530:	200006f0 	.word	0x200006f0

08003534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	60fb      	str	r3, [r7, #12]
}
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <vTaskPlaceOnEventList+0x44>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3318      	adds	r3, #24
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fe febb 	bl	80022de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003568:	2101      	movs	r1, #1
 800356a:	6838      	ldr	r0, [r7, #0]
 800356c:	f000 fa7c 	bl	8003a68 <prvAddCurrentTaskToDelayedList>
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	200006f0 	.word	0x200006f0

0800357c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	617b      	str	r3, [r7, #20]
}
 80035a0:	bf00      	nop
 80035a2:	e7fe      	b.n	80035a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3318      	adds	r3, #24
 80035aa:	4619      	mov	r1, r3
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7fe fe72 	bl	8002296 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80035b8:	f04f 33ff 	mov.w	r3, #4294967295
 80035bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	68b8      	ldr	r0, [r7, #8]
 80035c2:	f000 fa51 	bl	8003a68 <prvAddCurrentTaskToDelayedList>
	}
 80035c6:	bf00      	nop
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200006f0 	.word	0x200006f0

080035d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	60fb      	str	r3, [r7, #12]
}
 80035fc:	bf00      	nop
 80035fe:	e7fe      	b.n	80035fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3318      	adds	r3, #24
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe fea3 	bl	8002350 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800360a:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <xTaskRemoveFromEventList+0xb0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11d      	bne.n	800364e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	3304      	adds	r3, #4
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fe9a 	bl	8002350 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <xTaskRemoveFromEventList+0xb4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d903      	bls.n	8003630 <xTaskRemoveFromEventList+0x5c>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4a16      	ldr	r2, [pc, #88]	; (8003688 <xTaskRemoveFromEventList+0xb4>)
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4a13      	ldr	r2, [pc, #76]	; (800368c <xTaskRemoveFromEventList+0xb8>)
 800363e:	441a      	add	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3304      	adds	r3, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f7fe fe25 	bl	8002296 <vListInsertEnd>
 800364c:	e005      	b.n	800365a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	3318      	adds	r3, #24
 8003652:	4619      	mov	r1, r3
 8003654:	480e      	ldr	r0, [pc, #56]	; (8003690 <xTaskRemoveFromEventList+0xbc>)
 8003656:	f7fe fe1e 	bl	8002296 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <xTaskRemoveFromEventList+0xc0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	429a      	cmp	r2, r3
 8003666:	d905      	bls.n	8003674 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003668:	2301      	movs	r3, #1
 800366a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800366c:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <xTaskRemoveFromEventList+0xc4>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	e001      	b.n	8003678 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003678:	697b      	ldr	r3, [r7, #20]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20000bec 	.word	0x20000bec
 8003688:	20000bcc 	.word	0x20000bcc
 800368c:	200006f4 	.word	0x200006f4
 8003690:	20000b84 	.word	0x20000b84
 8003694:	200006f0 	.word	0x200006f0
 8003698:	20000bd8 	.word	0x20000bd8

0800369c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <vTaskInternalSetTimeOutState+0x24>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <vTaskInternalSetTimeOutState+0x28>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	605a      	str	r2, [r3, #4]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	20000bdc 	.word	0x20000bdc
 80036c4:	20000bc8 	.word	0x20000bc8

080036c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	613b      	str	r3, [r7, #16]
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	60fb      	str	r3, [r7, #12]
}
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800370a:	f000 fe7b 	bl	8004404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <xTaskCheckForTimeOut+0xbc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d102      	bne.n	800372e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	e023      	b.n	8003776 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <xTaskCheckForTimeOut+0xc0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d007      	beq.n	800374a <xTaskCheckForTimeOut+0x82>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	429a      	cmp	r2, r3
 8003742:	d302      	bcc.n	800374a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003744:	2301      	movs	r3, #1
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	e015      	b.n	8003776 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	429a      	cmp	r2, r3
 8003752:	d20b      	bcs.n	800376c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	1ad2      	subs	r2, r2, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff9b 	bl	800369c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	e004      	b.n	8003776 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003772:	2301      	movs	r3, #1
 8003774:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003776:	f000 fe75 	bl	8004464 <vPortExitCritical>

	return xReturn;
 800377a:	69fb      	ldr	r3, [r7, #28]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000bc8 	.word	0x20000bc8
 8003788:	20000bdc 	.word	0x20000bdc

0800378c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <vTaskMissedYield+0x14>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	20000bd8 	.word	0x20000bd8

080037a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037ac:	f000 f852 	bl	8003854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <prvIdleTask+0x28>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d9f9      	bls.n	80037ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <prvIdleTask+0x2c>)
 80037ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037c8:	e7f0      	b.n	80037ac <prvIdleTask+0x8>
 80037ca:	bf00      	nop
 80037cc:	200006f4 	.word	0x200006f4
 80037d0:	e000ed04 	.word	0xe000ed04

080037d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037da:	2300      	movs	r3, #0
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	e00c      	b.n	80037fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4a12      	ldr	r2, [pc, #72]	; (8003834 <prvInitialiseTaskLists+0x60>)
 80037ec:	4413      	add	r3, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fd24 	bl	800223c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3301      	adds	r3, #1
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b37      	cmp	r3, #55	; 0x37
 80037fe:	d9ef      	bls.n	80037e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003800:	480d      	ldr	r0, [pc, #52]	; (8003838 <prvInitialiseTaskLists+0x64>)
 8003802:	f7fe fd1b 	bl	800223c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003806:	480d      	ldr	r0, [pc, #52]	; (800383c <prvInitialiseTaskLists+0x68>)
 8003808:	f7fe fd18 	bl	800223c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800380c:	480c      	ldr	r0, [pc, #48]	; (8003840 <prvInitialiseTaskLists+0x6c>)
 800380e:	f7fe fd15 	bl	800223c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003812:	480c      	ldr	r0, [pc, #48]	; (8003844 <prvInitialiseTaskLists+0x70>)
 8003814:	f7fe fd12 	bl	800223c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003818:	480b      	ldr	r0, [pc, #44]	; (8003848 <prvInitialiseTaskLists+0x74>)
 800381a:	f7fe fd0f 	bl	800223c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <prvInitialiseTaskLists+0x78>)
 8003820:	4a05      	ldr	r2, [pc, #20]	; (8003838 <prvInitialiseTaskLists+0x64>)
 8003822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <prvInitialiseTaskLists+0x7c>)
 8003826:	4a05      	ldr	r2, [pc, #20]	; (800383c <prvInitialiseTaskLists+0x68>)
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200006f4 	.word	0x200006f4
 8003838:	20000b54 	.word	0x20000b54
 800383c:	20000b68 	.word	0x20000b68
 8003840:	20000b84 	.word	0x20000b84
 8003844:	20000b98 	.word	0x20000b98
 8003848:	20000bb0 	.word	0x20000bb0
 800384c:	20000b7c 	.word	0x20000b7c
 8003850:	20000b80 	.word	0x20000b80

08003854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800385a:	e019      	b.n	8003890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800385c:	f000 fdd2 	bl	8004404 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <prvCheckTasksWaitingTermination+0x50>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe fd6f 	bl	8002350 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <prvCheckTasksWaitingTermination+0x54>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3b01      	subs	r3, #1
 8003878:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <prvCheckTasksWaitingTermination+0x54>)
 800387a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <prvCheckTasksWaitingTermination+0x58>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3b01      	subs	r3, #1
 8003882:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <prvCheckTasksWaitingTermination+0x58>)
 8003884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003886:	f000 fded 	bl	8004464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f810 	bl	80038b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <prvCheckTasksWaitingTermination+0x58>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e1      	bne.n	800385c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000b98 	.word	0x20000b98
 80038a8:	20000bc4 	.word	0x20000bc4
 80038ac:	20000bac 	.word	0x20000bac

080038b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 ff8a 	bl	80047e0 <vPortFree>
				vPortFree( pxTCB );
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 ff87 	bl	80047e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038d2:	e018      	b.n	8003906 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d103      	bne.n	80038e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 ff7e 	bl	80047e0 <vPortFree>
	}
 80038e4:	e00f      	b.n	8003906 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d00a      	beq.n	8003906 <prvDeleteTCB+0x56>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	60fb      	str	r3, [r7, #12]
}
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <prvDeleteTCB+0x54>
	}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <prvResetNextTaskUnblockTime+0x38>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <prvResetNextTaskUnblockTime+0x3c>)
 8003922:	f04f 32ff 	mov.w	r2, #4294967295
 8003926:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003928:	e008      	b.n	800393c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <prvResetNextTaskUnblockTime+0x38>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a04      	ldr	r2, [pc, #16]	; (800394c <prvResetNextTaskUnblockTime+0x3c>)
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	20000b7c 	.word	0x20000b7c
 800394c:	20000be4 	.word	0x20000be4

08003950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <xTaskGetSchedulerState+0x34>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800395e:	2301      	movs	r3, #1
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	e008      	b.n	8003976 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <xTaskGetSchedulerState+0x38>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800396c:	2302      	movs	r3, #2
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	e001      	b.n	8003976 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003976:	687b      	ldr	r3, [r7, #4]
	}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	20000bd0 	.word	0x20000bd0
 8003988:	20000bec 	.word	0x20000bec

0800398c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d056      	beq.n	8003a50 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039a2:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <xTaskPriorityDisinherit+0xd0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d00a      	beq.n	80039c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	60fb      	str	r3, [r7, #12]
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60bb      	str	r3, [r7, #8]
}
 80039dc:	bf00      	nop
 80039de:	e7fe      	b.n	80039de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d02c      	beq.n	8003a50 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d128      	bne.n	8003a50 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fca4 	bl	8002350 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a20:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <xTaskPriorityDisinherit+0xd4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d903      	bls.n	8003a30 <xTaskPriorityDisinherit+0xa4>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	4a0c      	ldr	r2, [pc, #48]	; (8003a60 <xTaskPriorityDisinherit+0xd4>)
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <xTaskPriorityDisinherit+0xd8>)
 8003a3e:	441a      	add	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f7fe fc25 	bl	8002296 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a50:	697b      	ldr	r3, [r7, #20]
	}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200006f0 	.word	0x200006f0
 8003a60:	20000bcc 	.word	0x20000bcc
 8003a64:	200006f4 	.word	0x200006f4

08003a68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a72:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a78:	4b20      	ldr	r3, [pc, #128]	; (8003afc <prvAddCurrentTaskToDelayedList+0x94>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fc66 	bl	8002350 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d10a      	bne.n	8003aa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a92:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <prvAddCurrentTaskToDelayedList+0x94>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4819      	ldr	r0, [pc, #100]	; (8003b00 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a9c:	f7fe fbfb 	bl	8002296 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003aa0:	e026      	b.n	8003af0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <prvAddCurrentTaskToDelayedList+0x94>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d209      	bcs.n	8003ace <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7fe fc09 	bl	80022de <vListInsert>
}
 8003acc:	e010      	b.n	8003af0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ace:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <prvAddCurrentTaskToDelayedList+0x94>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4610      	mov	r0, r2
 8003adc:	f7fe fbff 	bl	80022de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d202      	bcs.n	8003af0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003aea:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000bc8 	.word	0x20000bc8
 8003afc:	200006f0 	.word	0x200006f0
 8003b00:	20000bb0 	.word	0x20000bb0
 8003b04:	20000b80 	.word	0x20000b80
 8003b08:	20000b7c 	.word	0x20000b7c
 8003b0c:	20000be4 	.word	0x20000be4

08003b10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b1a:	f000 fb07 	bl	800412c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b1e:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <xTimerCreateTimerTask+0x80>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d021      	beq.n	8003b6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b2e:	1d3a      	adds	r2, r7, #4
 8003b30:	f107 0108 	add.w	r1, r7, #8
 8003b34:	f107 030c 	add.w	r3, r7, #12
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fb65 	bl	8002208 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	9202      	str	r2, [sp, #8]
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	2302      	movs	r3, #2
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	460a      	mov	r2, r1
 8003b50:	4910      	ldr	r1, [pc, #64]	; (8003b94 <xTimerCreateTimerTask+0x84>)
 8003b52:	4811      	ldr	r0, [pc, #68]	; (8003b98 <xTimerCreateTimerTask+0x88>)
 8003b54:	f7ff f912 	bl	8002d7c <xTaskCreateStatic>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4a10      	ldr	r2, [pc, #64]	; (8003b9c <xTimerCreateTimerTask+0x8c>)
 8003b5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <xTimerCreateTimerTask+0x8c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b66:	2301      	movs	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	613b      	str	r3, [r7, #16]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b86:	697b      	ldr	r3, [r7, #20]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	20000c20 	.word	0x20000c20
 8003b94:	08004b00 	.word	0x08004b00
 8003b98:	08003cd5 	.word	0x08003cd5
 8003b9c:	20000c24 	.word	0x20000c24

08003ba0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10a      	bne.n	8003bce <xTimerGenericCommand+0x2e>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	623b      	str	r3, [r7, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	e7fe      	b.n	8003bcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003bce:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <xTimerGenericCommand+0x98>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02a      	beq.n	8003c2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b05      	cmp	r3, #5
 8003be6:	dc18      	bgt.n	8003c1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003be8:	f7ff feb2 	bl	8003950 <xTaskGetSchedulerState>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d109      	bne.n	8003c06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bf2:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <xTimerGenericCommand+0x98>)
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	f107 0110 	add.w	r1, r7, #16
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfe:	f7fe fcd5 	bl	80025ac <xQueueGenericSend>
 8003c02:	6278      	str	r0, [r7, #36]	; 0x24
 8003c04:	e012      	b.n	8003c2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <xTimerGenericCommand+0x98>)
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	f107 0110 	add.w	r1, r7, #16
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2200      	movs	r2, #0
 8003c12:	f7fe fccb 	bl	80025ac <xQueueGenericSend>
 8003c16:	6278      	str	r0, [r7, #36]	; 0x24
 8003c18:	e008      	b.n	8003c2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <xTimerGenericCommand+0x98>)
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	f107 0110 	add.w	r1, r7, #16
 8003c22:	2300      	movs	r3, #0
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	f7fe fdbf 	bl	80027a8 <xQueueGenericSendFromISR>
 8003c2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3728      	adds	r7, #40	; 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000c20 	.word	0x20000c20

08003c3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c46:	4b22      	ldr	r3, [pc, #136]	; (8003cd0 <prvProcessExpiredTimer+0x94>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fb7b 	bl	8002350 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d022      	beq.n	8003cae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	18d1      	adds	r1, r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	6978      	ldr	r0, [r7, #20]
 8003c76:	f000 f8d1 	bl	8003e1c <prvInsertTimerInActiveList>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01f      	beq.n	8003cc0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c80:	2300      	movs	r3, #0
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	2100      	movs	r1, #0
 8003c8a:	6978      	ldr	r0, [r7, #20]
 8003c8c:	f7ff ff88 	bl	8003ba0 <xTimerGenericCommand>
 8003c90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d113      	bne.n	8003cc0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	60fb      	str	r3, [r7, #12]
}
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	6978      	ldr	r0, [r7, #20]
 8003cc6:	4798      	blx	r3
}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000c18 	.word	0x20000c18

08003cd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cdc:	f107 0308 	add.w	r3, r7, #8
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f857 	bl	8003d94 <prvGetNextExpireTime>
 8003ce6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4619      	mov	r1, r3
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f803 	bl	8003cf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003cf2:	f000 f8d5 	bl	8003ea0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cf6:	e7f1      	b.n	8003cdc <prvTimerTask+0x8>

08003cf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d02:	f7ff fa43 	bl	800318c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d06:	f107 0308 	add.w	r3, r7, #8
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f866 	bl	8003ddc <prvSampleTimeNow>
 8003d10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d130      	bne.n	8003d7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <prvProcessTimerOrBlockTask+0x3c>
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d806      	bhi.n	8003d34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d26:	f7ff fa3f 	bl	80031a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d2a:	68f9      	ldr	r1, [r7, #12]
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff85 	bl	8003c3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d32:	e024      	b.n	8003d7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d3a:	4b13      	ldr	r3, [pc, #76]	; (8003d88 <prvProcessTimerOrBlockTask+0x90>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <prvProcessTimerOrBlockTask+0x50>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <prvProcessTimerOrBlockTask+0x52>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <prvProcessTimerOrBlockTask+0x94>)
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f7fe ffdb 	bl	8002d14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d5e:	f7ff fa23 	bl	80031a8 <xTaskResumeAll>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <prvProcessTimerOrBlockTask+0x98>)
 8003d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	f3bf 8f6f 	isb	sy
}
 8003d78:	e001      	b.n	8003d7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d7a:	f7ff fa15 	bl	80031a8 <xTaskResumeAll>
}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000c1c 	.word	0x20000c1c
 8003d8c:	20000c20 	.word	0x20000c20
 8003d90:	e000ed04 	.word	0xe000ed04

08003d94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <prvGetNextExpireTime+0x44>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <prvGetNextExpireTime+0x16>
 8003da6:	2201      	movs	r2, #1
 8003da8:	e000      	b.n	8003dac <prvGetNextExpireTime+0x18>
 8003daa:	2200      	movs	r2, #0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <prvGetNextExpireTime+0x44>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e001      	b.n	8003dc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000c18 	.word	0x20000c18

08003ddc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003de4:	f7ff fa7e 	bl	80032e4 <xTaskGetTickCount>
 8003de8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <prvSampleTimeNow+0x3c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d205      	bcs.n	8003e00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003df4:	f000 f936 	bl	8004064 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	e002      	b.n	8003e06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e06:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <prvSampleTimeNow+0x3c>)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000c28 	.word	0x20000c28

08003e1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d812      	bhi.n	8003e68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	1ad2      	subs	r2, r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d302      	bcc.n	8003e56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e01b      	b.n	8003e8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <prvInsertTimerInActiveList+0x7c>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7fe fa3c 	bl	80022de <vListInsert>
 8003e66:	e012      	b.n	8003e8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d206      	bcs.n	8003e7e <prvInsertTimerInActiveList+0x62>
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	e007      	b.n	8003e8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <prvInsertTimerInActiveList+0x80>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f7fe fa28 	bl	80022de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e8e:	697b      	ldr	r3, [r7, #20]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000c1c 	.word	0x20000c1c
 8003e9c:	20000c18 	.word	0x20000c18

08003ea0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08e      	sub	sp, #56	; 0x38
 8003ea4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ea6:	e0ca      	b.n	800403e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da18      	bge.n	8003ee0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003eae:	1d3b      	adds	r3, r7, #4
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	61fb      	str	r3, [r7, #28]
}
 8003ecc:	bf00      	nop
 8003ece:	e7fe      	b.n	8003ece <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed6:	6850      	ldr	r0, [r2, #4]
 8003ed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eda:	6892      	ldr	r2, [r2, #8]
 8003edc:	4611      	mov	r1, r2
 8003ede:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f2c0 80aa 	blt.w	800403c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fa29 	bl	8002350 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003efe:	463b      	mov	r3, r7
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff ff6b 	bl	8003ddc <prvSampleTimeNow>
 8003f06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b09      	cmp	r3, #9
 8003f0c:	f200 8097 	bhi.w	800403e <prvProcessReceivedCommands+0x19e>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <prvProcessReceivedCommands+0x78>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f41 	.word	0x08003f41
 8003f1c:	08003f41 	.word	0x08003f41
 8003f20:	08003f41 	.word	0x08003f41
 8003f24:	08003fb5 	.word	0x08003fb5
 8003f28:	08003fc9 	.word	0x08003fc9
 8003f2c:	08004013 	.word	0x08004013
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f41 	.word	0x08003f41
 8003f38:	08003fb5 	.word	0x08003fb5
 8003f3c:	08003fc9 	.word	0x08003fc9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	18d1      	adds	r1, r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f60:	f7ff ff5c 	bl	8003e1c <prvInsertTimerInActiveList>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d069      	beq.n	800403e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d05e      	beq.n	800403e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	441a      	add	r2, r3
 8003f88:	2300      	movs	r3, #0
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2100      	movs	r1, #0
 8003f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f92:	f7ff fe05 	bl	8003ba0 <xTimerGenericCommand>
 8003f96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d14f      	bne.n	800403e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	61bb      	str	r3, [r7, #24]
}
 8003fb0:	bf00      	nop
 8003fb2:	e7fe      	b.n	8003fb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003fc6:	e03a      	b.n	800403e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	617b      	str	r3, [r7, #20]
}
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	699a      	ldr	r2, [r3, #24]
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	18d1      	adds	r1, r2, r3
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800400c:	f7ff ff06 	bl	8003e1c <prvInsertTimerInActiveList>
					break;
 8004010:	e015      	b.n	800403e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004022:	f000 fbdd 	bl	80047e0 <vPortFree>
 8004026:	e00a      	b.n	800403e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800403a:	e000      	b.n	800403e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800403c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <prvProcessReceivedCommands+0x1c0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	1d39      	adds	r1, r7, #4
 8004044:	2200      	movs	r2, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fc4a 	bl	80028e0 <xQueueReceive>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f47f af2a 	bne.w	8003ea8 <prvProcessReceivedCommands+0x8>
	}
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3730      	adds	r7, #48	; 0x30
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000c20 	.word	0x20000c20

08004064 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800406a:	e048      	b.n	80040fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800406c:	4b2d      	ldr	r3, [pc, #180]	; (8004124 <prvSwitchTimerLists+0xc0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004076:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <prvSwitchTimerLists+0xc0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3304      	adds	r3, #4
 8004084:	4618      	mov	r0, r3
 8004086:	f7fe f963 	bl	8002350 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d02e      	beq.n	80040fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4413      	add	r3, r2
 80040a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d90e      	bls.n	80040d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040be:	4b19      	ldr	r3, [pc, #100]	; (8004124 <prvSwitchTimerLists+0xc0>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f7fe f908 	bl	80022de <vListInsert>
 80040ce:	e016      	b.n	80040fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040d0:	2300      	movs	r3, #0
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	2300      	movs	r3, #0
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	2100      	movs	r1, #0
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fd60 	bl	8003ba0 <xTimerGenericCommand>
 80040e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	603b      	str	r3, [r7, #0]
}
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040fe:	4b09      	ldr	r3, [pc, #36]	; (8004124 <prvSwitchTimerLists+0xc0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1b1      	bne.n	800406c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <prvSwitchTimerLists+0xc0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <prvSwitchTimerLists+0xc4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a04      	ldr	r2, [pc, #16]	; (8004124 <prvSwitchTimerLists+0xc0>)
 8004114:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004116:	4a04      	ldr	r2, [pc, #16]	; (8004128 <prvSwitchTimerLists+0xc4>)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	6013      	str	r3, [r2, #0]
}
 800411c:	bf00      	nop
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000c18 	.word	0x20000c18
 8004128:	20000c1c 	.word	0x20000c1c

0800412c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004132:	f000 f967 	bl	8004404 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <prvCheckForValidListAndQueue+0x60>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d120      	bne.n	8004180 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800413e:	4814      	ldr	r0, [pc, #80]	; (8004190 <prvCheckForValidListAndQueue+0x64>)
 8004140:	f7fe f87c 	bl	800223c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004144:	4813      	ldr	r0, [pc, #76]	; (8004194 <prvCheckForValidListAndQueue+0x68>)
 8004146:	f7fe f879 	bl	800223c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <prvCheckForValidListAndQueue+0x6c>)
 800414c:	4a10      	ldr	r2, [pc, #64]	; (8004190 <prvCheckForValidListAndQueue+0x64>)
 800414e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <prvCheckForValidListAndQueue+0x70>)
 8004152:	4a10      	ldr	r2, [pc, #64]	; (8004194 <prvCheckForValidListAndQueue+0x68>)
 8004154:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004156:	2300      	movs	r3, #0
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <prvCheckForValidListAndQueue+0x74>)
 800415c:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <prvCheckForValidListAndQueue+0x78>)
 800415e:	2110      	movs	r1, #16
 8004160:	200a      	movs	r0, #10
 8004162:	f7fe f987 	bl	8002474 <xQueueGenericCreateStatic>
 8004166:	4603      	mov	r3, r0
 8004168:	4a08      	ldr	r2, [pc, #32]	; (800418c <prvCheckForValidListAndQueue+0x60>)
 800416a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800416c:	4b07      	ldr	r3, [pc, #28]	; (800418c <prvCheckForValidListAndQueue+0x60>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <prvCheckForValidListAndQueue+0x60>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	490b      	ldr	r1, [pc, #44]	; (80041a8 <prvCheckForValidListAndQueue+0x7c>)
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fda0 	bl	8002cc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004180:	f000 f970 	bl	8004464 <vPortExitCritical>
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000c20 	.word	0x20000c20
 8004190:	20000bf0 	.word	0x20000bf0
 8004194:	20000c04 	.word	0x20000c04
 8004198:	20000c18 	.word	0x20000c18
 800419c:	20000c1c 	.word	0x20000c1c
 80041a0:	20000ccc 	.word	0x20000ccc
 80041a4:	20000c2c 	.word	0x20000c2c
 80041a8:	08004b08 	.word	0x08004b08

080041ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3b04      	subs	r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3b04      	subs	r3, #4
 80041ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b04      	subs	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041dc:	4a0c      	ldr	r2, [pc, #48]	; (8004210 <pxPortInitialiseStack+0x64>)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3b14      	subs	r3, #20
 80041e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b04      	subs	r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f06f 0202 	mvn.w	r2, #2
 80041fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3b20      	subs	r3, #32
 8004200:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004202:	68fb      	ldr	r3, [r7, #12]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	08004215 	.word	0x08004215

08004214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <prvTaskExitError+0x54>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d00a      	beq.n	800423e <prvTaskExitError+0x2a>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60fb      	str	r3, [r7, #12]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <prvTaskExitError+0x28>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	60bb      	str	r3, [r7, #8]
}
 8004250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004252:	bf00      	nop
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0fc      	beq.n	8004254 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800425a:	bf00      	nop
 800425c:	bf00      	nop
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	20000018 	.word	0x20000018
 800426c:	00000000 	.word	0x00000000

08004270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <pxCurrentTCBConst2>)
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6808      	ldr	r0, [r1, #0]
 8004276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	f380 8809 	msr	PSP, r0
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	4770      	bx	lr
 800428c:	f3af 8000 	nop.w

08004290 <pxCurrentTCBConst2>:
 8004290:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004298:	4808      	ldr	r0, [pc, #32]	; (80042bc <prvPortStartFirstTask+0x24>)
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	6800      	ldr	r0, [r0, #0]
 800429e:	f380 8808 	msr	MSP, r0
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8814 	msr	CONTROL, r0
 80042aa:	b662      	cpsie	i
 80042ac:	b661      	cpsie	f
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	df00      	svc	0
 80042b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042ba:	bf00      	nop
 80042bc:	e000ed08 	.word	0xe000ed08

080042c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042c6:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <xPortStartScheduler+0x120>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a46      	ldr	r2, [pc, #280]	; (80043e4 <xPortStartScheduler+0x124>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10a      	bne.n	80042e6 <xPortStartScheduler+0x26>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	613b      	str	r3, [r7, #16]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042e6:	4b3e      	ldr	r3, [pc, #248]	; (80043e0 <xPortStartScheduler+0x120>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a3f      	ldr	r2, [pc, #252]	; (80043e8 <xPortStartScheduler+0x128>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d10a      	bne.n	8004306 <xPortStartScheduler+0x46>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	60fb      	str	r3, [r7, #12]
}
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004306:	4b39      	ldr	r3, [pc, #228]	; (80043ec <xPortStartScheduler+0x12c>)
 8004308:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	22ff      	movs	r2, #255	; 0xff
 8004316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4b31      	ldr	r3, [pc, #196]	; (80043f0 <xPortStartScheduler+0x130>)
 800432c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800432e:	4b31      	ldr	r3, [pc, #196]	; (80043f4 <xPortStartScheduler+0x134>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004334:	e009      	b.n	800434a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004336:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <xPortStartScheduler+0x134>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3b01      	subs	r3, #1
 800433c:	4a2d      	ldr	r2, [pc, #180]	; (80043f4 <xPortStartScheduler+0x134>)
 800433e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	b2db      	uxtb	r3, r3
 8004348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b80      	cmp	r3, #128	; 0x80
 8004354:	d0ef      	beq.n	8004336 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004356:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <xPortStartScheduler+0x134>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1c3 0307 	rsb	r3, r3, #7
 800435e:	2b04      	cmp	r3, #4
 8004360:	d00a      	beq.n	8004378 <xPortStartScheduler+0xb8>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60bb      	str	r3, [r7, #8]
}
 8004374:	bf00      	nop
 8004376:	e7fe      	b.n	8004376 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004378:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <xPortStartScheduler+0x134>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <xPortStartScheduler+0x134>)
 8004380:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004382:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <xPortStartScheduler+0x134>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800438a:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <xPortStartScheduler+0x134>)
 800438c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004396:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <xPortStartScheduler+0x138>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a17      	ldr	r2, [pc, #92]	; (80043f8 <xPortStartScheduler+0x138>)
 800439c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043a2:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <xPortStartScheduler+0x138>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a14      	ldr	r2, [pc, #80]	; (80043f8 <xPortStartScheduler+0x138>)
 80043a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043ae:	f000 f8dd 	bl	800456c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <xPortStartScheduler+0x13c>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043b8:	f000 f8fc 	bl	80045b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <xPortStartScheduler+0x140>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <xPortStartScheduler+0x140>)
 80043c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043c8:	f7ff ff66 	bl	8004298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043cc:	f7ff f854 	bl	8003478 <vTaskSwitchContext>
	prvTaskExitError();
 80043d0:	f7ff ff20 	bl	8004214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	e000ed00 	.word	0xe000ed00
 80043e4:	410fc271 	.word	0x410fc271
 80043e8:	410fc270 	.word	0x410fc270
 80043ec:	e000e400 	.word	0xe000e400
 80043f0:	20000d1c 	.word	0x20000d1c
 80043f4:	20000d20 	.word	0x20000d20
 80043f8:	e000ed20 	.word	0xe000ed20
 80043fc:	20000018 	.word	0x20000018
 8004400:	e000ef34 	.word	0xe000ef34

08004404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	607b      	str	r3, [r7, #4]
}
 800441c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800441e:	4b0f      	ldr	r3, [pc, #60]	; (800445c <vPortEnterCritical+0x58>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3301      	adds	r3, #1
 8004424:	4a0d      	ldr	r2, [pc, #52]	; (800445c <vPortEnterCritical+0x58>)
 8004426:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004428:	4b0c      	ldr	r3, [pc, #48]	; (800445c <vPortEnterCritical+0x58>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d10f      	bne.n	8004450 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004430:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <vPortEnterCritical+0x5c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <vPortEnterCritical+0x4c>
	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	603b      	str	r3, [r7, #0]
}
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <vPortEnterCritical+0x4a>
	}
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	20000018 	.word	0x20000018
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800446a:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <vPortExitCritical+0x50>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <vPortExitCritical+0x24>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	607b      	str	r3, [r7, #4]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <vPortExitCritical+0x50>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3b01      	subs	r3, #1
 800448e:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <vPortExitCritical+0x50>)
 8004490:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <vPortExitCritical+0x50>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d105      	bne.n	80044a6 <vPortExitCritical+0x42>
 800449a:	2300      	movs	r3, #0
 800449c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f383 8811 	msr	BASEPRI, r3
}
 80044a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000018 	.word	0x20000018
	...

080044c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044c0:	f3ef 8009 	mrs	r0, PSP
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4b15      	ldr	r3, [pc, #84]	; (8004520 <pxCurrentTCBConst>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	f01e 0f10 	tst.w	lr, #16
 80044d0:	bf08      	it	eq
 80044d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044da:	6010      	str	r0, [r2, #0]
 80044dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044e4:	f380 8811 	msr	BASEPRI, r0
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f7fe ffc2 	bl	8003478 <vTaskSwitchContext>
 80044f4:	f04f 0000 	mov.w	r0, #0
 80044f8:	f380 8811 	msr	BASEPRI, r0
 80044fc:	bc09      	pop	{r0, r3}
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	6808      	ldr	r0, [r1, #0]
 8004502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004506:	f01e 0f10 	tst.w	lr, #16
 800450a:	bf08      	it	eq
 800450c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004510:	f380 8809 	msr	PSP, r0
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	f3af 8000 	nop.w

08004520 <pxCurrentTCBConst>:
 8004520:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop

08004528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	607b      	str	r3, [r7, #4]
}
 8004540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004542:	f7fe fedf 	bl	8003304 <xTaskIncrementTick>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <xPortSysTickHandler+0x40>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f383 8811 	msr	BASEPRI, r3
}
 800455e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <vPortSetupTimerInterrupt+0x38>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <vPortSetupTimerInterrupt+0x3c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <vPortSetupTimerInterrupt+0x40>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <vPortSetupTimerInterrupt+0x44>)
 800458a:	3b01      	subs	r3, #1
 800458c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000e010 	.word	0xe000e010
 80045a4:	e000e018 	.word	0xe000e018
 80045a8:	2000000c 	.word	0x2000000c
 80045ac:	10624dd3 	.word	0x10624dd3
 80045b0:	e000e014 	.word	0xe000e014

080045b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045c4 <vPortEnableVFP+0x10>
 80045b8:	6801      	ldr	r1, [r0, #0]
 80045ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045be:	6001      	str	r1, [r0, #0]
 80045c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045c2:	bf00      	nop
 80045c4:	e000ed88 	.word	0xe000ed88

080045c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045ce:	f3ef 8305 	mrs	r3, IPSR
 80045d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	d914      	bls.n	8004604 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045da:	4a17      	ldr	r2, [pc, #92]	; (8004638 <vPortValidateInterruptPriority+0x70>)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045e4:	4b15      	ldr	r3, [pc, #84]	; (800463c <vPortValidateInterruptPriority+0x74>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	7afa      	ldrb	r2, [r7, #11]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d20a      	bcs.n	8004604 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	607b      	str	r3, [r7, #4]
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004604:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <vPortValidateInterruptPriority+0x78>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800460c:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <vPortValidateInterruptPriority+0x7c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d90a      	bls.n	800462a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	603b      	str	r3, [r7, #0]
}
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <vPortValidateInterruptPriority+0x60>
	}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	e000e3f0 	.word	0xe000e3f0
 800463c:	20000d1c 	.word	0x20000d1c
 8004640:	e000ed0c 	.word	0xe000ed0c
 8004644:	20000d20 	.word	0x20000d20

08004648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	; 0x28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004654:	f7fe fd9a 	bl	800318c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004658:	4b5b      	ldr	r3, [pc, #364]	; (80047c8 <pvPortMalloc+0x180>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004660:	f000 f920 	bl	80048a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004664:	4b59      	ldr	r3, [pc, #356]	; (80047cc <pvPortMalloc+0x184>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 8093 	bne.w	8004798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01d      	beq.n	80046b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004678:	2208      	movs	r2, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	2b00      	cmp	r3, #0
 8004688:	d014      	beq.n	80046b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f023 0307 	bic.w	r3, r3, #7
 8004690:	3308      	adds	r3, #8
 8004692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <pvPortMalloc+0x6c>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	617b      	str	r3, [r7, #20]
}
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d06e      	beq.n	8004798 <pvPortMalloc+0x150>
 80046ba:	4b45      	ldr	r3, [pc, #276]	; (80047d0 <pvPortMalloc+0x188>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d869      	bhi.n	8004798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046c4:	4b43      	ldr	r3, [pc, #268]	; (80047d4 <pvPortMalloc+0x18c>)
 80046c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046c8:	4b42      	ldr	r3, [pc, #264]	; (80047d4 <pvPortMalloc+0x18c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ce:	e004      	b.n	80046da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d903      	bls.n	80046ec <pvPortMalloc+0xa4>
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f1      	bne.n	80046d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046ec:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <pvPortMalloc+0x180>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d050      	beq.n	8004798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2208      	movs	r2, #8
 80046fc:	4413      	add	r3, r2
 80046fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	1ad2      	subs	r2, r2, r3
 8004710:	2308      	movs	r3, #8
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	429a      	cmp	r2, r3
 8004716:	d91f      	bls.n	8004758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <pvPortMalloc+0xf8>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	613b      	str	r3, [r7, #16]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	1ad2      	subs	r2, r2, r3
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004752:	69b8      	ldr	r0, [r7, #24]
 8004754:	f000 f908 	bl	8004968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004758:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <pvPortMalloc+0x188>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <pvPortMalloc+0x188>)
 8004764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004766:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <pvPortMalloc+0x188>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <pvPortMalloc+0x190>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d203      	bcs.n	800477a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <pvPortMalloc+0x188>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <pvPortMalloc+0x190>)
 8004778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <pvPortMalloc+0x184>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	431a      	orrs	r2, r3
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800478e:	4b13      	ldr	r3, [pc, #76]	; (80047dc <pvPortMalloc+0x194>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3301      	adds	r3, #1
 8004794:	4a11      	ldr	r2, [pc, #68]	; (80047dc <pvPortMalloc+0x194>)
 8004796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004798:	f7fe fd06 	bl	80031a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <pvPortMalloc+0x174>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	60fb      	str	r3, [r7, #12]
}
 80047b8:	bf00      	nop
 80047ba:	e7fe      	b.n	80047ba <pvPortMalloc+0x172>
	return pvReturn;
 80047bc:	69fb      	ldr	r3, [r7, #28]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3728      	adds	r7, #40	; 0x28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	2000492c 	.word	0x2000492c
 80047cc:	20004940 	.word	0x20004940
 80047d0:	20004930 	.word	0x20004930
 80047d4:	20004924 	.word	0x20004924
 80047d8:	20004934 	.word	0x20004934
 80047dc:	20004938 	.word	0x20004938

080047e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d04d      	beq.n	800488e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047f2:	2308      	movs	r3, #8
 80047f4:	425b      	negs	r3, r3
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4413      	add	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <vPortFree+0xb8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <vPortFree+0x44>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	60fb      	str	r3, [r7, #12]
}
 8004820:	bf00      	nop
 8004822:	e7fe      	b.n	8004822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <vPortFree+0x62>
	__asm volatile
 800482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004830:	f383 8811 	msr	BASEPRI, r3
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	60bb      	str	r3, [r7, #8]
}
 800483e:	bf00      	nop
 8004840:	e7fe      	b.n	8004840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <vPortFree+0xb8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01e      	beq.n	800488e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d11a      	bne.n	800488e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <vPortFree+0xb8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	43db      	mvns	r3, r3
 8004862:	401a      	ands	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004868:	f7fe fc90 	bl	800318c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	4b0a      	ldr	r3, [pc, #40]	; (800489c <vPortFree+0xbc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4413      	add	r3, r2
 8004876:	4a09      	ldr	r2, [pc, #36]	; (800489c <vPortFree+0xbc>)
 8004878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800487a:	6938      	ldr	r0, [r7, #16]
 800487c:	f000 f874 	bl	8004968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <vPortFree+0xc0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	4a06      	ldr	r2, [pc, #24]	; (80048a0 <vPortFree+0xc0>)
 8004888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800488a:	f7fe fc8d 	bl	80031a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800488e:	bf00      	nop
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20004940 	.word	0x20004940
 800489c:	20004930 	.word	0x20004930
 80048a0:	2000493c 	.word	0x2000493c

080048a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80048ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048b0:	4b27      	ldr	r3, [pc, #156]	; (8004950 <prvHeapInit+0xac>)
 80048b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3307      	adds	r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0307 	bic.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <prvHeapInit+0xac>)
 80048d4:	4413      	add	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048dc:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <prvHeapInit+0xb0>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048e2:	4b1c      	ldr	r3, [pc, #112]	; (8004954 <prvHeapInit+0xb0>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4413      	add	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048f0:	2208      	movs	r2, #8
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0307 	bic.w	r3, r3, #7
 80048fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a15      	ldr	r2, [pc, #84]	; (8004958 <prvHeapInit+0xb4>)
 8004904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <prvHeapInit+0xb4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <prvHeapInit+0xb4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <prvHeapInit+0xb4>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a0a      	ldr	r2, [pc, #40]	; (800495c <prvHeapInit+0xb8>)
 8004932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a09      	ldr	r2, [pc, #36]	; (8004960 <prvHeapInit+0xbc>)
 800493a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800493c:	4b09      	ldr	r3, [pc, #36]	; (8004964 <prvHeapInit+0xc0>)
 800493e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	20000d24 	.word	0x20000d24
 8004954:	20004924 	.word	0x20004924
 8004958:	2000492c 	.word	0x2000492c
 800495c:	20004934 	.word	0x20004934
 8004960:	20004930 	.word	0x20004930
 8004964:	20004940 	.word	0x20004940

08004968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004970:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <prvInsertBlockIntoFreeList+0xac>)
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e002      	b.n	800497c <prvInsertBlockIntoFreeList+0x14>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	429a      	cmp	r2, r3
 8004984:	d8f7      	bhi.n	8004976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	4413      	add	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d108      	bne.n	80049aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	441a      	add	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	441a      	add	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d118      	bne.n	80049f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <prvInsertBlockIntoFreeList+0xb0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d00d      	beq.n	80049e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	441a      	add	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	e008      	b.n	80049f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049e6:	4b0c      	ldr	r3, [pc, #48]	; (8004a18 <prvInsertBlockIntoFreeList+0xb0>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e003      	b.n	80049f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d002      	beq.n	8004a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a06:	bf00      	nop
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20004924 	.word	0x20004924
 8004a18:	2000492c 	.word	0x2000492c

08004a1c <__libc_init_array>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4d0d      	ldr	r5, [pc, #52]	; (8004a54 <__libc_init_array+0x38>)
 8004a20:	4c0d      	ldr	r4, [pc, #52]	; (8004a58 <__libc_init_array+0x3c>)
 8004a22:	1b64      	subs	r4, r4, r5
 8004a24:	10a4      	asrs	r4, r4, #2
 8004a26:	2600      	movs	r6, #0
 8004a28:	42a6      	cmp	r6, r4
 8004a2a:	d109      	bne.n	8004a40 <__libc_init_array+0x24>
 8004a2c:	4d0b      	ldr	r5, [pc, #44]	; (8004a5c <__libc_init_array+0x40>)
 8004a2e:	4c0c      	ldr	r4, [pc, #48]	; (8004a60 <__libc_init_array+0x44>)
 8004a30:	f000 f82e 	bl	8004a90 <_init>
 8004a34:	1b64      	subs	r4, r4, r5
 8004a36:	10a4      	asrs	r4, r4, #2
 8004a38:	2600      	movs	r6, #0
 8004a3a:	42a6      	cmp	r6, r4
 8004a3c:	d105      	bne.n	8004a4a <__libc_init_array+0x2e>
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a44:	4798      	blx	r3
 8004a46:	3601      	adds	r6, #1
 8004a48:	e7ee      	b.n	8004a28 <__libc_init_array+0xc>
 8004a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4e:	4798      	blx	r3
 8004a50:	3601      	adds	r6, #1
 8004a52:	e7f2      	b.n	8004a3a <__libc_init_array+0x1e>
 8004a54:	08004b30 	.word	0x08004b30
 8004a58:	08004b30 	.word	0x08004b30
 8004a5c:	08004b30 	.word	0x08004b30
 8004a60:	08004b34 	.word	0x08004b34

08004a64 <memcpy>:
 8004a64:	440a      	add	r2, r1
 8004a66:	4291      	cmp	r1, r2
 8004a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a6c:	d100      	bne.n	8004a70 <memcpy+0xc>
 8004a6e:	4770      	bx	lr
 8004a70:	b510      	push	{r4, lr}
 8004a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a7a:	4291      	cmp	r1, r2
 8004a7c:	d1f9      	bne.n	8004a72 <memcpy+0xe>
 8004a7e:	bd10      	pop	{r4, pc}

08004a80 <memset>:
 8004a80:	4402      	add	r2, r0
 8004a82:	4603      	mov	r3, r0
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d100      	bne.n	8004a8a <memset+0xa>
 8004a88:	4770      	bx	lr
 8004a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8e:	e7f9      	b.n	8004a84 <memset+0x4>

08004a90 <_init>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr

08004a9c <_fini>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr
