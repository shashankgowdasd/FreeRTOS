
02_CreatingTaskfromOtherTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b88  08004b88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004b88  08004b88  00014b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b90  08004b90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a04  20000010  08004ba8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a14  08004ba8  00024a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a182  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003129  00000000  00000000  0003a1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003e698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000398f  00000000  00000000  0003f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c79  00000000  00000000  000432c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097c02  00000000  00000000  00057f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efb42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005320  00000000  00000000  000efb98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004af0 	.word	0x08004af0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004af0 	.word	0x08004af0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af02      	add	r7, sp, #8
  HAL_Init();
 80004de:	f000 fa9b 	bl	8000a18 <HAL_Init>
  SystemClock_Config();
 80004e2:	f000 f855 	bl	8000590 <SystemClock_Config>
  MX_GPIO_Init();
 80004e6:	f000 f8e9 	bl	80006bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f8bd 	bl	8000668 <MX_USART2_UART_Init>

  xTaskCreate(vRedLEDCOntrollerTask,
 80004ee:	2300      	movs	r3, #0
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2300      	movs	r3, #0
 80004f8:	2264      	movs	r2, #100	; 0x64
 80004fa:	4903      	ldr	r1, [pc, #12]	; (8000508 <main+0x30>)
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <main+0x34>)
 80004fe:	f002 fcca 	bl	8002e96 <xTaskCreate>
			  100,
			  NULL,
			  1,
			  NULL);

  vTaskStartScheduler();
 8000502:	f002 fe0d 	bl	8003120 <vTaskStartScheduler>
  while (1);
 8000506:	e7fe      	b.n	8000506 <main+0x2e>
 8000508:	08004b08 	.word	0x08004b08
 800050c:	08000511 	.word	0x08000511

08000510 <vRedLEDCOntrollerTask>:
}


void vRedLEDCOntrollerTask(void *pvParams)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
 8000516:	6078      	str	r0, [r7, #4]
  xTaskCreate(vGreenLEDCOntrollerTask,
 8000518:	2300      	movs	r3, #0
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	2301      	movs	r3, #1
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2300      	movs	r3, #0
 8000522:	2264      	movs	r2, #100	; 0x64
 8000524:	4909      	ldr	r1, [pc, #36]	; (800054c <vRedLEDCOntrollerTask+0x3c>)
 8000526:	480a      	ldr	r0, [pc, #40]	; (8000550 <vRedLEDCOntrollerTask+0x40>)
 8000528:	f002 fcb5 	bl	8002e96 <xTaskCreate>
				  100,
				  NULL,
				  1,
				  NULL);

  xTaskCreate(vBlueLEDCOntrollerTask,
 800052c:	2300      	movs	r3, #0
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	2301      	movs	r3, #1
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2300      	movs	r3, #0
 8000536:	2264      	movs	r2, #100	; 0x64
 8000538:	4906      	ldr	r1, [pc, #24]	; (8000554 <vRedLEDCOntrollerTask+0x44>)
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <vRedLEDCOntrollerTask+0x48>)
 800053c:	f002 fcab 	bl	8002e96 <xTaskCreate>
			  NULL,
			  1,
			  NULL);
	while(1)
	{
		RedLEDTskProfiler++;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <vRedLEDCOntrollerTask+0x4c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	4a05      	ldr	r2, [pc, #20]	; (800055c <vRedLEDCOntrollerTask+0x4c>)
 8000548:	6013      	str	r3, [r2, #0]
 800054a:	e7f9      	b.n	8000540 <vRedLEDCOntrollerTask+0x30>
 800054c:	08004b20 	.word	0x08004b20
 8000550:	08000561 	.word	0x08000561
 8000554:	08004b3c 	.word	0x08004b3c
 8000558:	08000579 	.word	0x08000579
 800055c:	2000493c 	.word	0x2000493c

08000560 <vGreenLEDCOntrollerTask>:
		//vTaskDelay(1000);
	}
}

void vGreenLEDCOntrollerTask(void *pvParams)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	while(1)
	{
		GreenLEDTskProfiler++;
 8000568:	4b02      	ldr	r3, [pc, #8]	; (8000574 <vGreenLEDCOntrollerTask+0x14>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	4a01      	ldr	r2, [pc, #4]	; (8000574 <vGreenLEDCOntrollerTask+0x14>)
 8000570:	6013      	str	r3, [r2, #0]
 8000572:	e7f9      	b.n	8000568 <vGreenLEDCOntrollerTask+0x8>
 8000574:	20004938 	.word	0x20004938

08000578 <vBlueLEDCOntrollerTask>:
		//vTaskDelay(1000);
	}
}

void vBlueLEDCOntrollerTask(void *pvParams)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlueLEDTskProfiler++;
 8000580:	4b02      	ldr	r3, [pc, #8]	; (800058c <vBlueLEDCOntrollerTask+0x14>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a01      	ldr	r2, [pc, #4]	; (800058c <vBlueLEDCOntrollerTask+0x14>)
 8000588:	6013      	str	r3, [r2, #0]
 800058a:	e7f9      	b.n	8000580 <vBlueLEDCOntrollerTask+0x8>
 800058c:	20004940 	.word	0x20004940

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fa9e 	bl	8004ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b29      	ldr	r3, [pc, #164]	; (8000660 <SystemClock_Config+0xd0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a28      	ldr	r2, [pc, #160]	; (8000660 <SystemClock_Config+0xd0>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <SystemClock_Config+0xd0>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd4>)
 80005de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000604:	2310      	movs	r3, #16
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fcbe 	bl	8000f9c <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000626:	f000 f8c9 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f000 ff20 	bl	800148c <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000652:	f000 f8b3 	bl	80007bc <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_USART2_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f001 fba2 	bl	8001de8 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f887 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20004944 	.word	0x20004944
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a2c      	ldr	r2, [pc, #176]	; (800078c <MX_GPIO_Init+0xd0>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a25      	ldr	r2, [pc, #148]	; (800078c <MX_GPIO_Init+0xd0>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a1e      	ldr	r2, [pc, #120]	; (800078c <MX_GPIO_Init+0xd0>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a17      	ldr	r2, [pc, #92]	; (800078c <MX_GPIO_Init+0xd0>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_GPIO_Init+0xd0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <MX_GPIO_Init+0xd4>)
 8000748:	f000 fc0e 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000752:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_GPIO_Init+0xd8>)
 8000764:	f000 fa7c 	bl	8000c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000768:	2320      	movs	r3, #32
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_GPIO_Init+0xd4>)
 8000780:	f000 fa6e 	bl	8000c60 <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020000 	.word	0x40020000
 8000794:	40020800 	.word	0x40020800

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 f957 	bl	8000a5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40010000 	.word	0x40010000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_MspInit+0x54>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a11      	ldr	r2, [pc, #68]	; (800081c <HAL_MspInit+0x54>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x54>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <HAL_MspInit+0x54>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <HAL_MspInit+0x54>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_MspInit+0x54>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	210f      	movs	r1, #15
 800080a:	f06f 0001 	mvn.w	r0, #1
 800080e:	f000 f9fd 	bl	8000c0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <HAL_UART_MspInit+0x84>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d12b      	bne.n	800089a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_UART_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <HAL_UART_MspInit+0x88>)
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_UART_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_UART_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <HAL_UART_MspInit+0x88>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_UART_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800087a:	230c      	movs	r3, #12
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088a:	2307      	movs	r3, #7
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <HAL_UART_MspInit+0x8c>)
 8000896:	f000 f9e3 	bl	8000c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	; 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000

080008b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	; 0x30
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	2019      	movs	r0, #25
 80008c6:	f000 f9a1 	bl	8000c0c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008ca:	2019      	movs	r0, #25
 80008cc:	f000 f9ba 	bl	8000c44 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <HAL_InitTick+0xa0>)
 80008d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d8:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <HAL_InitTick+0xa0>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6453      	str	r3, [r2, #68]	; 0x44
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <HAL_InitTick+0xa0>)
 80008e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ec:	f107 0210 	add.w	r2, r7, #16
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 ffc4 	bl	8001884 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008fc:	f000 ffae 	bl	800185c <HAL_RCC_GetPCLK2Freq>
 8000900:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000904:	4a13      	ldr	r2, [pc, #76]	; (8000954 <HAL_InitTick+0xa4>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	0c9b      	lsrs	r3, r3, #18
 800090c:	3b01      	subs	r3, #1
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_InitTick+0xa8>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <HAL_InitTick+0xac>)
 8000914:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_InitTick+0xa8>)
 8000918:	f240 32e7 	movw	r2, #999	; 0x3e7
 800091c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_InitTick+0xa8>)
 8000920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000922:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_InitTick+0xa8>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_InitTick+0xa8>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <HAL_InitTick+0xa8>)
 8000932:	f000 ffd9 	bl	80018e8 <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d104      	bne.n	8000946 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <HAL_InitTick+0xa8>)
 800093e:	f001 f82d 	bl	800199c <HAL_TIM_Base_Start_IT>
 8000942:	4603      	mov	r3, r0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3730      	adds	r7, #48	; 0x30
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	431bde83 	.word	0x431bde83
 8000958:	20004988 	.word	0x20004988
 800095c:	40010000 	.word	0x40010000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000992:	f001 f865 	bl	8001a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20004988 	.word	0x20004988

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e0:	4c0b      	ldr	r4, [pc, #44]	; (8000a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ee:	f7ff ffd7 	bl	80009a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f004 f843 	bl	8004a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fd6f 	bl	80004d8 <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a08:	08004b98 	.word	0x08004b98
  ldr r2, =_sbss
 8000a0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a10:	20004a14 	.word	0x20004a14

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_Init+0x40>)
 8000a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_Init+0x40>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_Init+0x40>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f8d8 	bl	8000bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f7ff ff32 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff febc 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023c00 	.word	0x40023c00

08000a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200049d0 	.word	0x200049d0

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200049d0 	.word	0x200049d0

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ace:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	60d3      	str	r3, [r2, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ff4c 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1e:	f7ff ff61 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	6978      	ldr	r0, [r7, #20]
 8000c2a:	f7ff ffb1 	bl	8000b90 <NVIC_EncodePriority>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c34:	4611      	mov	r1, r2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff80 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff54 	bl	8000b00 <__NVIC_EnableIRQ>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e159      	b.n	8000f30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8148 	bne.w	8000f2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d005      	beq.n	8000cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d130      	bne.n	8000d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b03      	cmp	r3, #3
 8000d1e:	d017      	beq.n	8000d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d123      	bne.n	8000da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0307 	and.w	r3, r3, #7
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	220f      	movs	r2, #15
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	69b9      	ldr	r1, [r7, #24]
 8000da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0203 	and.w	r2, r3, #3
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a2 	beq.w	8000f2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b57      	ldr	r3, [pc, #348]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a56      	ldr	r2, [pc, #344]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <HAL_GPIO_Init+0x2e8>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e02:	4a52      	ldr	r2, [pc, #328]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a49      	ldr	r2, [pc, #292]	; (8000f50 <HAL_GPIO_Init+0x2f0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_GPIO_Init+0x202>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_GPIO_Init+0x2f4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0x1fe>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a47      	ldr	r2, [pc, #284]	; (8000f58 <HAL_GPIO_Init+0x2f8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <HAL_GPIO_Init+0x1fa>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a46      	ldr	r2, [pc, #280]	; (8000f5c <HAL_GPIO_Init+0x2fc>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x1f6>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a45      	ldr	r2, [pc, #276]	; (8000f60 <HAL_GPIO_Init+0x300>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_GPIO_Init+0x1f2>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	e008      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e56:	2303      	movs	r3, #3
 8000e58:	e004      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	e002      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <HAL_GPIO_Init+0x204>
 8000e62:	2300      	movs	r3, #0
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	f002 0203 	and.w	r2, r2, #3
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	4093      	lsls	r3, r2
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e74:	4935      	ldr	r1, [pc, #212]	; (8000f4c <HAL_GPIO_Init+0x2ec>)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea6:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed0:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000efa:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_GPIO_Init+0x304>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	f67f aea2 	bls.w	8000c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40013c00 	.word	0x40013c00

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f84:	e003      	b.n	8000f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	041a      	lsls	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e264      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d075      	beq.n	80010a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fba:	4ba3      	ldr	r3, [pc, #652]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d00c      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc6:	4ba0      	ldr	r3, [pc, #640]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d112      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fd2:	4b9d      	ldr	r3, [pc, #628]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fde:	d10b      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe0:	4b99      	ldr	r3, [pc, #612]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d05b      	beq.n	80010a4 <HAL_RCC_OscConfig+0x108>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d157      	bne.n	80010a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e23f      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001000:	d106      	bne.n	8001010 <HAL_RCC_OscConfig+0x74>
 8001002:	4b91      	ldr	r3, [pc, #580]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a90      	ldr	r2, [pc, #576]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e01d      	b.n	800104c <HAL_RCC_OscConfig+0xb0>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0x98>
 800101a:	4b8b      	ldr	r3, [pc, #556]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a8a      	ldr	r2, [pc, #552]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b88      	ldr	r3, [pc, #544]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a87      	ldr	r2, [pc, #540]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 800102c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e00b      	b.n	800104c <HAL_RCC_OscConfig+0xb0>
 8001034:	4b84      	ldr	r3, [pc, #528]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a83      	ldr	r2, [pc, #524]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 800103a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b81      	ldr	r3, [pc, #516]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a80      	ldr	r2, [pc, #512]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d013      	beq.n	800107c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fd16 	bl	8000a84 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fd12 	bl	8000a84 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b64      	cmp	r3, #100	; 0x64
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e204      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	4b76      	ldr	r3, [pc, #472]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f0      	beq.n	800105c <HAL_RCC_OscConfig+0xc0>
 800107a:	e014      	b.n	80010a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fd02 	bl	8000a84 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001084:	f7ff fcfe 	bl	8000a84 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b64      	cmp	r3, #100	; 0x64
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e1f0      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	4b6c      	ldr	r3, [pc, #432]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0xe8>
 80010a2:	e000      	b.n	80010a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d063      	beq.n	800117a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010b2:	4b65      	ldr	r3, [pc, #404]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010be:	4b62      	ldr	r3, [pc, #392]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d11c      	bne.n	8001104 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ca:	4b5f      	ldr	r3, [pc, #380]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d116      	bne.n	8001104 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	4b5c      	ldr	r3, [pc, #368]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_RCC_OscConfig+0x152>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d001      	beq.n	80010ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e1c4      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ee:	4b56      	ldr	r3, [pc, #344]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4952      	ldr	r1, [pc, #328]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	e03a      	b.n	800117a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800110c:	4b4f      	ldr	r3, [pc, #316]	; (800124c <HAL_RCC_OscConfig+0x2b0>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001112:	f7ff fcb7 	bl	8000a84 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800111a:	f7ff fcb3 	bl	8000a84 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e1a5      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	4b46      	ldr	r3, [pc, #280]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4940      	ldr	r1, [pc, #256]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_RCC_OscConfig+0x2b0>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001154:	f7ff fc96 	bl	8000a84 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fc92 	bl	8000a84 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e184      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116e:	4b36      	ldr	r3, [pc, #216]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d030      	beq.n	80011e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d016      	beq.n	80011bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_RCC_OscConfig+0x2b4>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001194:	f7ff fc76 	bl	8000a84 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fc72 	bl	8000a84 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e164      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x200>
 80011ba:	e015      	b.n	80011e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_RCC_OscConfig+0x2b4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fc5f 	bl	8000a84 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ca:	f7ff fc5b 	bl	8000a84 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e14d      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 80011de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f0      	bne.n	80011ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80a0 	beq.w	8001336 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10f      	bne.n	8001226 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001222:	2301      	movs	r3, #1
 8001224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_RCC_OscConfig+0x2b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	2b00      	cmp	r3, #0
 8001230:	d121      	bne.n	8001276 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_RCC_OscConfig+0x2b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_RCC_OscConfig+0x2b8>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123e:	f7ff fc21 	bl	8000a84 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	e011      	b.n	800126a <HAL_RCC_OscConfig+0x2ce>
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	42470000 	.word	0x42470000
 8001250:	42470e80 	.word	0x42470e80
 8001254:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001258:	f7ff fc14 	bl	8000a84 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e106      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126a:	4b85      	ldr	r3, [pc, #532]	; (8001480 <HAL_RCC_OscConfig+0x4e4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d106      	bne.n	800128c <HAL_RCC_OscConfig+0x2f0>
 800127e:	4b81      	ldr	r3, [pc, #516]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 8001280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001282:	4a80      	ldr	r2, [pc, #512]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6713      	str	r3, [r2, #112]	; 0x70
 800128a:	e01c      	b.n	80012c6 <HAL_RCC_OscConfig+0x32a>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b05      	cmp	r3, #5
 8001292:	d10c      	bne.n	80012ae <HAL_RCC_OscConfig+0x312>
 8001294:	4b7b      	ldr	r3, [pc, #492]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	4a7a      	ldr	r2, [pc, #488]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6713      	str	r3, [r2, #112]	; 0x70
 80012a0:	4b78      	ldr	r3, [pc, #480]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a4:	4a77      	ldr	r2, [pc, #476]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6713      	str	r3, [r2, #112]	; 0x70
 80012ac:	e00b      	b.n	80012c6 <HAL_RCC_OscConfig+0x32a>
 80012ae:	4b75      	ldr	r3, [pc, #468]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 80012b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b2:	4a74      	ldr	r2, [pc, #464]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6713      	str	r3, [r2, #112]	; 0x70
 80012ba:	4b72      	ldr	r3, [pc, #456]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012be:	4a71      	ldr	r2, [pc, #452]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d015      	beq.n	80012fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ce:	f7ff fbd9 	bl	8000a84 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff fbd5 	bl	8000a84 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0c5      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ec:	4b65      	ldr	r3, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 80012ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ee      	beq.n	80012d6 <HAL_RCC_OscConfig+0x33a>
 80012f8:	e014      	b.n	8001324 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fbc3 	bl	8000a84 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff fbbf 	bl	8000a84 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e0af      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001318:	4b5a      	ldr	r3, [pc, #360]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 800131a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1ee      	bne.n	8001302 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132a:	4b56      	ldr	r3, [pc, #344]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a55      	ldr	r2, [pc, #340]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 8001330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 809b 	beq.w	8001476 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001340:	4b50      	ldr	r3, [pc, #320]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b08      	cmp	r3, #8
 800134a:	d05c      	beq.n	8001406 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d141      	bne.n	80013d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001354:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <HAL_RCC_OscConfig+0x4ec>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fb93 	bl	8000a84 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fb8f 	bl	8000a84 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e081      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001374:	4b43      	ldr	r3, [pc, #268]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69da      	ldr	r2, [r3, #28]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	019b      	lsls	r3, r3, #6
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	085b      	lsrs	r3, r3, #1
 8001398:	3b01      	subs	r3, #1
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	061b      	lsls	r3, r3, #24
 80013a4:	4937      	ldr	r1, [pc, #220]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013aa:	4b37      	ldr	r3, [pc, #220]	; (8001488 <HAL_RCC_OscConfig+0x4ec>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fb68 	bl	8000a84 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b8:	f7ff fb64 	bl	8000a84 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e056      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x41c>
 80013d6:	e04e      	b.n	8001476 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <HAL_RCC_OscConfig+0x4ec>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fb51 	bl	8000a84 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff fb4d 	bl	8000a84 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e03f      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_RCC_OscConfig+0x44a>
 8001404:	e037      	b.n	8001476 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e032      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_RCC_OscConfig+0x4e8>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d028      	beq.n	8001472 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800142a:	429a      	cmp	r2, r3
 800142c:	d121      	bne.n	8001472 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001438:	429a      	cmp	r2, r3
 800143a:	d11a      	bne.n	8001472 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001442:	4013      	ands	r3, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001448:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800144a:	4293      	cmp	r3, r2
 800144c:	d111      	bne.n	8001472 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	3b01      	subs	r3, #1
 800145c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800145e:	429a      	cmp	r2, r3
 8001460:	d107      	bne.n	8001472 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d001      	beq.n	8001476 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40007000 	.word	0x40007000
 8001484:	40023800 	.word	0x40023800
 8001488:	42470060 	.word	0x42470060

0800148c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0cc      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4b68      	ldr	r3, [pc, #416]	; (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d90c      	bls.n	80014c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b65      	ldr	r3, [pc, #404]	; (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b63      	ldr	r3, [pc, #396]	; (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0b8      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d020      	beq.n	8001516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e0:	4b59      	ldr	r3, [pc, #356]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4a58      	ldr	r2, [pc, #352]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f8:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	4a52      	ldr	r2, [pc, #328]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001504:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	494d      	ldr	r1, [pc, #308]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d044      	beq.n	80015ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d119      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e07f      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d003      	beq.n	800154a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001546:	2b03      	cmp	r3, #3
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e06f      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e067      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156a:	4b37      	ldr	r3, [pc, #220]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f023 0203 	bic.w	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4934      	ldr	r1, [pc, #208]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157c:	f7ff fa82 	bl	8000a84 <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	e00a      	b.n	800159a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	f7ff fa7e 	bl	8000a84 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e04f      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 020c 	and.w	r2, r3, #12
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1eb      	bne.n	8001584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d20c      	bcs.n	80015d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e032      	b.n	800163a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	4916      	ldr	r1, [pc, #88]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	490e      	ldr	r1, [pc, #56]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001612:	f000 f821 	bl	8001658 <HAL_RCC_GetSysClockFreq>
 8001616:	4602      	mov	r2, r0
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	490a      	ldr	r1, [pc, #40]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	5ccb      	ldrb	r3, [r1, r3]
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f93c 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00
 8001648:	40023800 	.word	0x40023800
 800164c:	08004b70 	.word	0x08004b70
 8001650:	20000000 	.word	0x20000000
 8001654:	20000004 	.word	0x20000004

08001658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	2300      	movs	r3, #0
 800166a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001670:	4b67      	ldr	r3, [pc, #412]	; (8001810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d00d      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x40>
 800167c:	2b08      	cmp	r3, #8
 800167e:	f200 80bd 	bhi.w	80017fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x34>
 8001686:	2b04      	cmp	r3, #4
 8001688:	d003      	beq.n	8001692 <HAL_RCC_GetSysClockFreq+0x3a>
 800168a:	e0b7      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800168c:	4b61      	ldr	r3, [pc, #388]	; (8001814 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800168e:	60bb      	str	r3, [r7, #8]
       break;
 8001690:	e0b7      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001692:	4b61      	ldr	r3, [pc, #388]	; (8001818 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001694:	60bb      	str	r3, [r7, #8]
      break;
 8001696:	e0b4      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001698:	4b5d      	ldr	r3, [pc, #372]	; (8001810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a2:	4b5b      	ldr	r3, [pc, #364]	; (8001810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d04d      	beq.n	800174a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ae:	4b58      	ldr	r3, [pc, #352]	; (8001810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	099b      	lsrs	r3, r3, #6
 80016b4:	461a      	mov	r2, r3
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	ea02 0800 	and.w	r8, r2, r0
 80016c6:	ea03 0901 	and.w	r9, r3, r1
 80016ca:	4640      	mov	r0, r8
 80016cc:	4649      	mov	r1, r9
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	014b      	lsls	r3, r1, #5
 80016d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016dc:	0142      	lsls	r2, r0, #5
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	ebb0 0008 	subs.w	r0, r0, r8
 80016e6:	eb61 0109 	sbc.w	r1, r1, r9
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	018b      	lsls	r3, r1, #6
 80016f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016f8:	0182      	lsls	r2, r0, #6
 80016fa:	1a12      	subs	r2, r2, r0
 80016fc:	eb63 0301 	sbc.w	r3, r3, r1
 8001700:	f04f 0000 	mov.w	r0, #0
 8001704:	f04f 0100 	mov.w	r1, #0
 8001708:	00d9      	lsls	r1, r3, #3
 800170a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800170e:	00d0      	lsls	r0, r2, #3
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	eb12 0208 	adds.w	r2, r2, r8
 8001718:	eb43 0309 	adc.w	r3, r3, r9
 800171c:	f04f 0000 	mov.w	r0, #0
 8001720:	f04f 0100 	mov.w	r1, #0
 8001724:	0259      	lsls	r1, r3, #9
 8001726:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800172a:	0250      	lsls	r0, r2, #9
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	461a      	mov	r2, r3
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	f7fe fd50 	bl	80001e0 <__aeabi_uldivmod>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4613      	mov	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e04a      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	461a      	mov	r2, r3
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	f240 10ff 	movw	r0, #511	; 0x1ff
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	ea02 0400 	and.w	r4, r2, r0
 8001762:	ea03 0501 	and.w	r5, r3, r1
 8001766:	4620      	mov	r0, r4
 8001768:	4629      	mov	r1, r5
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f04f 0300 	mov.w	r3, #0
 8001772:	014b      	lsls	r3, r1, #5
 8001774:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001778:	0142      	lsls	r2, r0, #5
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	1b00      	subs	r0, r0, r4
 8001780:	eb61 0105 	sbc.w	r1, r1, r5
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	018b      	lsls	r3, r1, #6
 800178e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001792:	0182      	lsls	r2, r0, #6
 8001794:	1a12      	subs	r2, r2, r0
 8001796:	eb63 0301 	sbc.w	r3, r3, r1
 800179a:	f04f 0000 	mov.w	r0, #0
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	00d9      	lsls	r1, r3, #3
 80017a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017a8:	00d0      	lsls	r0, r2, #3
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	1912      	adds	r2, r2, r4
 80017b0:	eb45 0303 	adc.w	r3, r5, r3
 80017b4:	f04f 0000 	mov.w	r0, #0
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	0299      	lsls	r1, r3, #10
 80017be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017c2:	0290      	lsls	r0, r2, #10
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	f7fe fd04 	bl	80001e0 <__aeabi_uldivmod>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4613      	mov	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	3301      	adds	r3, #1
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f8:	60bb      	str	r3, [r7, #8]
      break;
 80017fa:	e002      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017fe:	60bb      	str	r3, [r7, #8]
      break;
 8001800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001802:	68bb      	ldr	r3, [r7, #8]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	00f42400 	.word	0x00f42400
 8001818:	007a1200 	.word	0x007a1200

0800181c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_RCC_GetHCLKFreq+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000

08001834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001838:	f7ff fff0 	bl	800181c <HAL_RCC_GetHCLKFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	0a9b      	lsrs	r3, r3, #10
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	4903      	ldr	r1, [pc, #12]	; (8001858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800184a:	5ccb      	ldrb	r3, [r1, r3]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	08004b80 	.word	0x08004b80

0800185c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001860:	f7ff ffdc 	bl	800181c <HAL_RCC_GetHCLKFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	0b5b      	lsrs	r3, r3, #13
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	4903      	ldr	r1, [pc, #12]	; (8001880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	08004b80 	.word	0x08004b80

08001884 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	220f      	movs	r2, #15
 8001892:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0203 	and.w	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_RCC_GetClockConfig+0x60>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0207 	and.w	r2, r3, #7
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e041      	b.n	800197e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f839 	bl	8001986 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3304      	adds	r3, #4
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f000 f9ca 	bl	8001cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d001      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e044      	b.n	8001a3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_TIM_Base_Start_IT+0xb0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d018      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x6c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019de:	d013      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x6c>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1a      	ldr	r2, [pc, #104]	; (8001a50 <HAL_TIM_Base_Start_IT+0xb4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00e      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x6c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_TIM_Base_Start_IT+0xb8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d009      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x6c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_TIM_Base_Start_IT+0xbc>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d004      	beq.n	8001a08 <HAL_TIM_Base_Start_IT+0x6c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <HAL_TIM_Base_Start_IT+0xc0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d111      	bne.n	8001a2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d010      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0201 	orr.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a2a:	e007      	b.n	8001a3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40000800 	.word	0x40000800
 8001a58:	40000c00 	.word	0x40000c00
 8001a5c:	40014000 	.word	0x40014000

08001a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d122      	bne.n	8001abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d11b      	bne.n	8001abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0202 	mvn.w	r2, #2
 8001a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f8ee 	bl	8001c84 <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8e0 	bl	8001c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f8f1 	bl	8001c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d122      	bne.n	8001b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d11b      	bne.n	8001b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0204 	mvn.w	r2, #4
 8001ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8c4 	bl	8001c84 <HAL_TIM_IC_CaptureCallback>
 8001afc:	e005      	b.n	8001b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8b6 	bl	8001c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f8c7 	bl	8001c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d122      	bne.n	8001b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d11b      	bne.n	8001b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f06f 0208 	mvn.w	r2, #8
 8001b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f89a 	bl	8001c84 <HAL_TIM_IC_CaptureCallback>
 8001b50:	e005      	b.n	8001b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f88c 	bl	8001c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f89d 	bl	8001c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d122      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	d11b      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f06f 0210 	mvn.w	r2, #16
 8001b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f870 	bl	8001c84 <HAL_TIM_IC_CaptureCallback>
 8001ba4:	e005      	b.n	8001bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f862 	bl	8001c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f873 	bl	8001c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d10e      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0201 	mvn.w	r2, #1
 8001bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fdda 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	2b80      	cmp	r3, #128	; 0x80
 8001bf0:	d10e      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfc:	2b80      	cmp	r3, #128	; 0x80
 8001bfe:	d107      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f8e2 	bl	8001dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1a:	2b40      	cmp	r3, #64	; 0x40
 8001c1c:	d10e      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c28:	2b40      	cmp	r3, #64	; 0x40
 8001c2a:	d107      	bne.n	8001c3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f838 	bl	8001cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d10e      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d107      	bne.n	8001c68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0220 	mvn.w	r2, #32
 8001c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8ac 	bl	8001dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a34      	ldr	r2, [pc, #208]	; (8001da4 <TIM_Base_SetConfig+0xe4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00f      	beq.n	8001cf8 <TIM_Base_SetConfig+0x38>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cde:	d00b      	beq.n	8001cf8 <TIM_Base_SetConfig+0x38>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a31      	ldr	r2, [pc, #196]	; (8001da8 <TIM_Base_SetConfig+0xe8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d007      	beq.n	8001cf8 <TIM_Base_SetConfig+0x38>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a30      	ldr	r2, [pc, #192]	; (8001dac <TIM_Base_SetConfig+0xec>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d003      	beq.n	8001cf8 <TIM_Base_SetConfig+0x38>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <TIM_Base_SetConfig+0xf0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d108      	bne.n	8001d0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <TIM_Base_SetConfig+0xe4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01b      	beq.n	8001d4a <TIM_Base_SetConfig+0x8a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d18:	d017      	beq.n	8001d4a <TIM_Base_SetConfig+0x8a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <TIM_Base_SetConfig+0xe8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <TIM_Base_SetConfig+0x8a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a21      	ldr	r2, [pc, #132]	; (8001dac <TIM_Base_SetConfig+0xec>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00f      	beq.n	8001d4a <TIM_Base_SetConfig+0x8a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a20      	ldr	r2, [pc, #128]	; (8001db0 <TIM_Base_SetConfig+0xf0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00b      	beq.n	8001d4a <TIM_Base_SetConfig+0x8a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <TIM_Base_SetConfig+0xf4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <TIM_Base_SetConfig+0x8a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a1e      	ldr	r2, [pc, #120]	; (8001db8 <TIM_Base_SetConfig+0xf8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d003      	beq.n	8001d4a <TIM_Base_SetConfig+0x8a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <TIM_Base_SetConfig+0xfc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d108      	bne.n	8001d5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <TIM_Base_SetConfig+0xe4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d103      	bne.n	8001d90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	615a      	str	r2, [r3, #20]
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40000400 	.word	0x40000400
 8001dac:	40000800 	.word	0x40000800
 8001db0:	40000c00 	.word	0x40000c00
 8001db4:	40014000 	.word	0x40014000
 8001db8:	40014400 	.word	0x40014400
 8001dbc:	40014800 	.word	0x40014800

08001dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e03f      	b.n	8001e7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fd06 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2224      	movs	r2, #36	; 0x24
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f829 	bl	8001e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e88:	b09f      	sub	sp, #124	; 0x7c
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9a:	68d9      	ldr	r1, [r3, #12]
 8001e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	ea40 0301 	orr.w	r3, r0, r1
 8001ea4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ec8:	f021 010c 	bic.w	r1, r1, #12
 8001ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee2:	6999      	ldr	r1, [r3, #24]
 8001ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	ea40 0301 	orr.w	r3, r0, r1
 8001eec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4bc5      	ldr	r3, [pc, #788]	; (8002208 <UART_SetConfig+0x384>)
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d004      	beq.n	8001f02 <UART_SetConfig+0x7e>
 8001ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4bc3      	ldr	r3, [pc, #780]	; (800220c <UART_SetConfig+0x388>)
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d103      	bne.n	8001f0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f02:	f7ff fcab 	bl	800185c <HAL_RCC_GetPCLK2Freq>
 8001f06:	6778      	str	r0, [r7, #116]	; 0x74
 8001f08:	e002      	b.n	8001f10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f0a:	f7ff fc93 	bl	8001834 <HAL_RCC_GetPCLK1Freq>
 8001f0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f18:	f040 80b6 	bne.w	8002088 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f1e:	461c      	mov	r4, r3
 8001f20:	f04f 0500 	mov.w	r5, #0
 8001f24:	4622      	mov	r2, r4
 8001f26:	462b      	mov	r3, r5
 8001f28:	1891      	adds	r1, r2, r2
 8001f2a:	6439      	str	r1, [r7, #64]	; 0x40
 8001f2c:	415b      	adcs	r3, r3
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f34:	1912      	adds	r2, r2, r4
 8001f36:	eb45 0303 	adc.w	r3, r5, r3
 8001f3a:	f04f 0000 	mov.w	r0, #0
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	00d9      	lsls	r1, r3, #3
 8001f44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f48:	00d0      	lsls	r0, r2, #3
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	1911      	adds	r1, r2, r4
 8001f50:	6639      	str	r1, [r7, #96]	; 0x60
 8001f52:	416b      	adcs	r3, r5
 8001f54:	667b      	str	r3, [r7, #100]	; 0x64
 8001f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	1891      	adds	r1, r2, r2
 8001f62:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f64:	415b      	adcs	r3, r3
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f70:	f7fe f936 	bl	80001e0 <__aeabi_uldivmod>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4ba5      	ldr	r3, [pc, #660]	; (8002210 <UART_SetConfig+0x38c>)
 8001f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	011e      	lsls	r6, r3, #4
 8001f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f84:	461c      	mov	r4, r3
 8001f86:	f04f 0500 	mov.w	r5, #0
 8001f8a:	4622      	mov	r2, r4
 8001f8c:	462b      	mov	r3, r5
 8001f8e:	1891      	adds	r1, r2, r2
 8001f90:	6339      	str	r1, [r7, #48]	; 0x30
 8001f92:	415b      	adcs	r3, r3
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
 8001f96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f9a:	1912      	adds	r2, r2, r4
 8001f9c:	eb45 0303 	adc.w	r3, r5, r3
 8001fa0:	f04f 0000 	mov.w	r0, #0
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	00d9      	lsls	r1, r3, #3
 8001faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fae:	00d0      	lsls	r0, r2, #3
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	1911      	adds	r1, r2, r4
 8001fb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8001fb8:	416b      	adcs	r3, r5
 8001fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	1891      	adds	r1, r2, r2
 8001fc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8001fca:	415b      	adcs	r3, r3
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fd2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fd6:	f7fe f903 	bl	80001e0 <__aeabi_uldivmod>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4b8c      	ldr	r3, [pc, #560]	; (8002210 <UART_SetConfig+0x38c>)
 8001fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	2164      	movs	r1, #100	; 0x64
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	3332      	adds	r3, #50	; 0x32
 8001ff2:	4a87      	ldr	r2, [pc, #540]	; (8002210 <UART_SetConfig+0x38c>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002000:	441e      	add	r6, r3
 8002002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002004:	4618      	mov	r0, r3
 8002006:	f04f 0100 	mov.w	r1, #0
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	1894      	adds	r4, r2, r2
 8002010:	623c      	str	r4, [r7, #32]
 8002012:	415b      	adcs	r3, r3
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800201a:	1812      	adds	r2, r2, r0
 800201c:	eb41 0303 	adc.w	r3, r1, r3
 8002020:	f04f 0400 	mov.w	r4, #0
 8002024:	f04f 0500 	mov.w	r5, #0
 8002028:	00dd      	lsls	r5, r3, #3
 800202a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800202e:	00d4      	lsls	r4, r2, #3
 8002030:	4622      	mov	r2, r4
 8002032:	462b      	mov	r3, r5
 8002034:	1814      	adds	r4, r2, r0
 8002036:	653c      	str	r4, [r7, #80]	; 0x50
 8002038:	414b      	adcs	r3, r1
 800203a:	657b      	str	r3, [r7, #84]	; 0x54
 800203c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	461a      	mov	r2, r3
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	1891      	adds	r1, r2, r2
 8002048:	61b9      	str	r1, [r7, #24]
 800204a:	415b      	adcs	r3, r3
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002052:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002056:	f7fe f8c3 	bl	80001e0 <__aeabi_uldivmod>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <UART_SetConfig+0x38c>)
 8002060:	fba3 1302 	umull	r1, r3, r3, r2
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	2164      	movs	r1, #100	; 0x64
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	3332      	adds	r3, #50	; 0x32
 8002072:	4a67      	ldr	r2, [pc, #412]	; (8002210 <UART_SetConfig+0x38c>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	f003 0207 	and.w	r2, r3, #7
 800207e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4432      	add	r2, r6
 8002084:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002086:	e0b9      	b.n	80021fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800208a:	461c      	mov	r4, r3
 800208c:	f04f 0500 	mov.w	r5, #0
 8002090:	4622      	mov	r2, r4
 8002092:	462b      	mov	r3, r5
 8002094:	1891      	adds	r1, r2, r2
 8002096:	6139      	str	r1, [r7, #16]
 8002098:	415b      	adcs	r3, r3
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020a0:	1912      	adds	r2, r2, r4
 80020a2:	eb45 0303 	adc.w	r3, r5, r3
 80020a6:	f04f 0000 	mov.w	r0, #0
 80020aa:	f04f 0100 	mov.w	r1, #0
 80020ae:	00d9      	lsls	r1, r3, #3
 80020b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020b4:	00d0      	lsls	r0, r2, #3
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	eb12 0804 	adds.w	r8, r2, r4
 80020be:	eb43 0905 	adc.w	r9, r3, r5
 80020c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f04f 0100 	mov.w	r1, #0
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	008b      	lsls	r3, r1, #2
 80020d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020da:	0082      	lsls	r2, r0, #2
 80020dc:	4640      	mov	r0, r8
 80020de:	4649      	mov	r1, r9
 80020e0:	f7fe f87e 	bl	80001e0 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <UART_SetConfig+0x38c>)
 80020ea:	fba3 2302 	umull	r2, r3, r3, r2
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	011e      	lsls	r6, r3, #4
 80020f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f4:	4618      	mov	r0, r3
 80020f6:	f04f 0100 	mov.w	r1, #0
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	1894      	adds	r4, r2, r2
 8002100:	60bc      	str	r4, [r7, #8]
 8002102:	415b      	adcs	r3, r3
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800210a:	1812      	adds	r2, r2, r0
 800210c:	eb41 0303 	adc.w	r3, r1, r3
 8002110:	f04f 0400 	mov.w	r4, #0
 8002114:	f04f 0500 	mov.w	r5, #0
 8002118:	00dd      	lsls	r5, r3, #3
 800211a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800211e:	00d4      	lsls	r4, r2, #3
 8002120:	4622      	mov	r2, r4
 8002122:	462b      	mov	r3, r5
 8002124:	1814      	adds	r4, r2, r0
 8002126:	64bc      	str	r4, [r7, #72]	; 0x48
 8002128:	414b      	adcs	r3, r1
 800212a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800212c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	008b      	lsls	r3, r1, #2
 8002140:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002144:	0082      	lsls	r2, r0, #2
 8002146:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800214a:	f7fe f849 	bl	80001e0 <__aeabi_uldivmod>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <UART_SetConfig+0x38c>)
 8002154:	fba3 1302 	umull	r1, r3, r3, r2
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	2164      	movs	r1, #100	; 0x64
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	3332      	adds	r3, #50	; 0x32
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <UART_SetConfig+0x38c>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002172:	441e      	add	r6, r3
 8002174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002176:	4618      	mov	r0, r3
 8002178:	f04f 0100 	mov.w	r1, #0
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	1894      	adds	r4, r2, r2
 8002182:	603c      	str	r4, [r7, #0]
 8002184:	415b      	adcs	r3, r3
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800218c:	1812      	adds	r2, r2, r0
 800218e:	eb41 0303 	adc.w	r3, r1, r3
 8002192:	f04f 0400 	mov.w	r4, #0
 8002196:	f04f 0500 	mov.w	r5, #0
 800219a:	00dd      	lsls	r5, r3, #3
 800219c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80021a0:	00d4      	lsls	r4, r2, #3
 80021a2:	4622      	mov	r2, r4
 80021a4:	462b      	mov	r3, r5
 80021a6:	eb12 0a00 	adds.w	sl, r2, r0
 80021aa:	eb43 0b01 	adc.w	fp, r3, r1
 80021ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f04f 0100 	mov.w	r1, #0
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	008b      	lsls	r3, r1, #2
 80021c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80021c6:	0082      	lsls	r2, r0, #2
 80021c8:	4650      	mov	r0, sl
 80021ca:	4659      	mov	r1, fp
 80021cc:	f7fe f808 	bl	80001e0 <__aeabi_uldivmod>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <UART_SetConfig+0x38c>)
 80021d6:	fba3 1302 	umull	r1, r3, r3, r2
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2164      	movs	r1, #100	; 0x64
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	3332      	adds	r3, #50	; 0x32
 80021e8:	4a09      	ldr	r2, [pc, #36]	; (8002210 <UART_SetConfig+0x38c>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	f003 020f 	and.w	r2, r3, #15
 80021f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4432      	add	r2, r6
 80021fa:	609a      	str	r2, [r3, #8]
}
 80021fc:	bf00      	nop
 80021fe:	377c      	adds	r7, #124	; 0x7c
 8002200:	46bd      	mov	sp, r7
 8002202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002206:	bf00      	nop
 8002208:	40011000 	.word	0x40011000
 800220c:	40011400 	.word	0x40011400
 8002210:	51eb851f 	.word	0x51eb851f

08002214 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <SysTick_Handler+0x1c>)
 800221a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800221c:	f001 fbc8 	bl	80039b0 <xTaskGetSchedulerState>
 8002220:	4603      	mov	r3, r0
 8002222:	2b01      	cmp	r3, #1
 8002224:	d001      	beq.n	800222a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002226:	f002 f9af 	bl	8004588 <xPortSysTickHandler>
  }
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000e010 	.word	0xe000e010

08002234 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <vApplicationGetIdleTaskMemory+0x2c>)
 8002244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4a06      	ldr	r2, [pc, #24]	; (8002264 <vApplicationGetIdleTaskMemory+0x30>)
 800224a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	601a      	str	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000002c 	.word	0x2000002c
 8002264:	20000088 	.word	0x20000088

08002268 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a07      	ldr	r2, [pc, #28]	; (8002294 <vApplicationGetTimerTaskMemory+0x2c>)
 8002278:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	4a06      	ldr	r2, [pc, #24]	; (8002298 <vApplicationGetTimerTaskMemory+0x30>)
 800227e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	20000288 	.word	0x20000288
 8002298:	200002e4 	.word	0x200002e4

0800229c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f103 0208 	add.w	r2, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f103 0208 	add.w	r2, r3, #8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f103 0208 	add.w	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d103      	bne.n	800235e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e00c      	b.n	8002378 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3308      	adds	r3, #8
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e002      	b.n	800236c <vListInsert+0x2e>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	429a      	cmp	r2, r3
 8002376:	d2f6      	bcs.n	8002366 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6892      	ldr	r2, [r2, #8]
 80023c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6852      	ldr	r2, [r2, #4]
 80023d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d103      	bne.n	80023e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1e5a      	subs	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800242e:	f002 f819 	bl	8004464 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	68f9      	ldr	r1, [r7, #12]
 800243c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	441a      	add	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	3b01      	subs	r3, #1
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	441a      	add	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	22ff      	movs	r2, #255	; 0xff
 8002472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	22ff      	movs	r2, #255	; 0xff
 800247a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d114      	bne.n	80024ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01a      	beq.n	80024c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3310      	adds	r3, #16
 8002490:	4618      	mov	r0, r3
 8002492:	f001 f8cf 	bl	8003634 <xTaskRemoveFromEventList>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d012      	beq.n	80024c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <xQueueGenericReset+0xcc>)
 800249e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	e009      	b.n	80024c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3310      	adds	r3, #16
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fef2 	bl	800229c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3324      	adds	r3, #36	; 0x24
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff feed 	bl	800229c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024c2:	f001 ffff 	bl	80044c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	e000ed04 	.word	0xe000ed04

080024d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08e      	sub	sp, #56	; 0x38
 80024d8:	af02      	add	r7, sp, #8
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024fa:	bf00      	nop
 80024fc:	e7fe      	b.n	80024fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <xQueueGenericCreateStatic+0x52>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <xQueueGenericCreateStatic+0x56>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <xQueueGenericCreateStatic+0x58>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	623b      	str	r3, [r7, #32]
}
 8002542:	bf00      	nop
 8002544:	e7fe      	b.n	8002544 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <xQueueGenericCreateStatic+0x7e>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <xQueueGenericCreateStatic+0x82>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <xQueueGenericCreateStatic+0x84>
 8002556:	2300      	movs	r3, #0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10a      	bne.n	8002572 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002560:	f383 8811 	msr	BASEPRI, r3
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	61fb      	str	r3, [r7, #28]
}
 800256e:	bf00      	nop
 8002570:	e7fe      	b.n	8002570 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002572:	2350      	movs	r3, #80	; 0x50
 8002574:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b50      	cmp	r3, #80	; 0x50
 800257a:	d00a      	beq.n	8002592 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	61bb      	str	r3, [r7, #24]
}
 800258e:	bf00      	nop
 8002590:	e7fe      	b.n	8002590 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002592:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00d      	beq.n	80025ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 f805 	bl	80025c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80025bc:	4618      	mov	r0, r3
 80025be:	3730      	adds	r7, #48	; 0x30
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e002      	b.n	80025e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025f2:	2101      	movs	r1, #1
 80025f4:	69b8      	ldr	r0, [r7, #24]
 80025f6:	f7ff ff05 	bl	8002404 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08e      	sub	sp, #56	; 0x38
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800261a:	2300      	movs	r3, #0
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <xQueueGenericSend+0x32>
	__asm volatile
 8002628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262c:	f383 8811 	msr	BASEPRI, r3
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800263a:	bf00      	nop
 800263c:	e7fe      	b.n	800263c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d103      	bne.n	800264c <xQueueGenericSend+0x40>
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <xQueueGenericSend+0x44>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <xQueueGenericSend+0x46>
 8002650:	2300      	movs	r3, #0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <xQueueGenericSend+0x60>
	__asm volatile
 8002656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002668:	bf00      	nop
 800266a:	e7fe      	b.n	800266a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d103      	bne.n	800267a <xQueueGenericSend+0x6e>
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <xQueueGenericSend+0x72>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <xQueueGenericSend+0x74>
 800267e:	2300      	movs	r3, #0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <xQueueGenericSend+0x8e>
	__asm volatile
 8002684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	623b      	str	r3, [r7, #32]
}
 8002696:	bf00      	nop
 8002698:	e7fe      	b.n	8002698 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800269a:	f001 f989 	bl	80039b0 <xTaskGetSchedulerState>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <xQueueGenericSend+0x9e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <xQueueGenericSend+0xa2>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <xQueueGenericSend+0xa4>
 80026ae:	2300      	movs	r3, #0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <xQueueGenericSend+0xbe>
	__asm volatile
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	61fb      	str	r3, [r7, #28]
}
 80026c6:	bf00      	nop
 80026c8:	e7fe      	b.n	80026c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026ca:	f001 fecb 	bl	8004464 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <xQueueGenericSend+0xd4>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d129      	bne.n	8002734 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e6:	f000 fa0b 	bl	8002b00 <prvCopyDataToQueue>
 80026ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	3324      	adds	r3, #36	; 0x24
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 ff9b 	bl	8003634 <xTaskRemoveFromEventList>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002704:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <xQueueGenericSend+0x1f8>)
 8002706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	e00a      	b.n	800272c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800271c:	4b39      	ldr	r3, [pc, #228]	; (8002804 <xQueueGenericSend+0x1f8>)
 800271e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800272c:	f001 feca 	bl	80044c4 <vPortExitCritical>
				return pdPASS;
 8002730:	2301      	movs	r3, #1
 8002732:	e063      	b.n	80027fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800273a:	f001 fec3 	bl	80044c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800273e:	2300      	movs	r3, #0
 8002740:	e05c      	b.n	80027fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4618      	mov	r0, r3
 800274e:	f000 ffd5 	bl	80036fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002752:	2301      	movs	r3, #1
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002756:	f001 feb5 	bl	80044c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800275a:	f000 fd47 	bl	80031ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800275e:	f001 fe81 	bl	8004464 <vPortEnterCritical>
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002768:	b25b      	sxtb	r3, r3
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d103      	bne.n	8002778 <xQueueGenericSend+0x16c>
 8002770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800277e:	b25b      	sxtb	r3, r3
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d103      	bne.n	800278e <xQueueGenericSend+0x182>
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800278e:	f001 fe99 	bl	80044c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002792:	1d3a      	adds	r2, r7, #4
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f000 ffc4 	bl	8003728 <xTaskCheckForTimeOut>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d124      	bne.n	80027f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027a8:	f000 faa2 	bl	8002cf0 <prvIsQueueFull>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d018      	beq.n	80027e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	3310      	adds	r3, #16
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 feea 	bl	8003594 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80027c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027c2:	f000 fa2d 	bl	8002c20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80027c6:	f000 fd1f 	bl	8003208 <xTaskResumeAll>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f af7c 	bne.w	80026ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <xQueueGenericSend+0x1f8>)
 80027d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	e772      	b.n	80026ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027e6:	f000 fa1b 	bl	8002c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027ea:	f000 fd0d 	bl	8003208 <xTaskResumeAll>
 80027ee:	e76c      	b.n	80026ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027f2:	f000 fa15 	bl	8002c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027f6:	f000 fd07 	bl	8003208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3738      	adds	r7, #56	; 0x38
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	e000ed04 	.word	0xe000ed04

08002808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b090      	sub	sp, #64	; 0x40
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002832:	bf00      	nop
 8002834:	e7fe      	b.n	8002834 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d103      	bne.n	8002844 <xQueueGenericSendFromISR+0x3c>
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <xQueueGenericSendFromISR+0x40>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <xQueueGenericSendFromISR+0x42>
 8002848:	2300      	movs	r3, #0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10a      	bne.n	8002864 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002860:	bf00      	nop
 8002862:	e7fe      	b.n	8002862 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d103      	bne.n	8002872 <xQueueGenericSendFromISR+0x6a>
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <xQueueGenericSendFromISR+0x6e>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <xQueueGenericSendFromISR+0x70>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002880:	f383 8811 	msr	BASEPRI, r3
 8002884:	f3bf 8f6f 	isb	sy
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	623b      	str	r3, [r7, #32]
}
 800288e:	bf00      	nop
 8002890:	e7fe      	b.n	8002890 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002892:	f001 fec9 	bl	8004628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002896:	f3ef 8211 	mrs	r2, BASEPRI
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	61fa      	str	r2, [r7, #28]
 80028ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80028ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <xQueueGenericSendFromISR+0xbc>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d12f      	bne.n	8002924 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028da:	f000 f911 	bl	8002b00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d112      	bne.n	800290e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d016      	beq.n	800291e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f2:	3324      	adds	r3, #36	; 0x24
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fe9d 	bl	8003634 <xTaskRemoveFromEventList>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00e      	beq.n	800291e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	e007      	b.n	800291e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800290e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002912:	3301      	adds	r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	b25a      	sxtb	r2, r3
 8002918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800291e:	2301      	movs	r3, #1
 8002920:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002922:	e001      	b.n	8002928 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002924:	2300      	movs	r3, #0
 8002926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002932:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002936:	4618      	mov	r0, r3
 8002938:	3740      	adds	r7, #64	; 0x40
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08c      	sub	sp, #48	; 0x30
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <xQueueReceive+0x30>
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	623b      	str	r3, [r7, #32]
}
 800296c:	bf00      	nop
 800296e:	e7fe      	b.n	800296e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <xQueueReceive+0x3e>
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <xQueueReceive+0x42>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <xQueueReceive+0x44>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <xQueueReceive+0x5e>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	61fb      	str	r3, [r7, #28]
}
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800299e:	f001 f807 	bl	80039b0 <xTaskGetSchedulerState>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <xQueueReceive+0x6e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <xQueueReceive+0x72>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <xQueueReceive+0x74>
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <xQueueReceive+0x8e>
	__asm volatile
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	61bb      	str	r3, [r7, #24]
}
 80029ca:	bf00      	nop
 80029cc:	e7fe      	b.n	80029cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029ce:	f001 fd49 	bl	8004464 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01f      	beq.n	8002a1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e2:	f000 f8f7 	bl	8002bd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00f      	beq.n	8002a16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	3310      	adds	r3, #16
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fe1a 	bl	8003634 <xTaskRemoveFromEventList>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a06:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <xQueueReceive+0x1bc>)
 8002a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a16:	f001 fd55 	bl	80044c4 <vPortExitCritical>
				return pdPASS;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e069      	b.n	8002af2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a24:	f001 fd4e 	bl	80044c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e062      	b.n	8002af2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a32:	f107 0310 	add.w	r3, r7, #16
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fe60 	bl	80036fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a40:	f001 fd40 	bl	80044c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a44:	f000 fbd2 	bl	80031ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a48:	f001 fd0c 	bl	8004464 <vPortEnterCritical>
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d103      	bne.n	8002a62 <xQueueReceive+0x122>
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d103      	bne.n	8002a78 <xQueueReceive+0x138>
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a78:	f001 fd24 	bl	80044c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a7c:	1d3a      	adds	r2, r7, #4
 8002a7e:	f107 0310 	add.w	r3, r7, #16
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fe4f 	bl	8003728 <xTaskCheckForTimeOut>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d123      	bne.n	8002ad8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a92:	f000 f917 	bl	8002cc4 <prvIsQueueEmpty>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d017      	beq.n	8002acc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	3324      	adds	r3, #36	; 0x24
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fd75 	bl	8003594 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aac:	f000 f8b8 	bl	8002c20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ab0:	f000 fbaa 	bl	8003208 <xTaskResumeAll>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d189      	bne.n	80029ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <xQueueReceive+0x1bc>)
 8002abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	e780      	b.n	80029ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ace:	f000 f8a7 	bl	8002c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ad2:	f000 fb99 	bl	8003208 <xTaskResumeAll>
 8002ad6:	e77a      	b.n	80029ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ada:	f000 f8a1 	bl	8002c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ade:	f000 fb93 	bl	8003208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ae4:	f000 f8ee 	bl	8002cc4 <prvIsQueueEmpty>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f43f af6f 	beq.w	80029ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002af0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3730      	adds	r7, #48	; 0x30
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10d      	bne.n	8002b3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d14d      	bne.n	8002bc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 ff5e 	bl	80039ec <xTaskPriorityDisinherit>
 8002b30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	e043      	b.n	8002bc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d119      	bne.n	8002b74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6858      	ldr	r0, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	f001 ffba 	bl	8004ac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	441a      	add	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d32b      	bcc.n	8002bc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	e026      	b.n	8002bc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	68d8      	ldr	r0, [r3, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	f001 ffa0 	bl	8004ac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	425b      	negs	r3, r3
 8002b8e:	441a      	add	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d207      	bcs.n	8002bb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	425b      	negs	r3, r3
 8002baa:	441a      	add	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d105      	bne.n	8002bc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002bca:	697b      	ldr	r3, [r7, #20]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d018      	beq.n	8002c18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	441a      	add	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d303      	bcc.n	8002c08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68d9      	ldr	r1, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	461a      	mov	r2, r3
 8002c12:	6838      	ldr	r0, [r7, #0]
 8002c14:	f001 ff56 	bl	8004ac4 <memcpy>
	}
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c28:	f001 fc1c 	bl	8004464 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c34:	e011      	b.n	8002c5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d012      	beq.n	8002c64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3324      	adds	r3, #36	; 0x24
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fcf6 	bl	8003634 <xTaskRemoveFromEventList>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c4e:	f000 fdcd 	bl	80037ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	dce9      	bgt.n	8002c36 <prvUnlockQueue+0x16>
 8002c62:	e000      	b.n	8002c66 <prvUnlockQueue+0x46>
					break;
 8002c64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	22ff      	movs	r2, #255	; 0xff
 8002c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c6e:	f001 fc29 	bl	80044c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c72:	f001 fbf7 	bl	8004464 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c7e:	e011      	b.n	8002ca4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d012      	beq.n	8002cae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3310      	adds	r3, #16
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fcd1 	bl	8003634 <xTaskRemoveFromEventList>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c98:	f000 fda8 	bl	80037ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	dce9      	bgt.n	8002c80 <prvUnlockQueue+0x60>
 8002cac:	e000      	b.n	8002cb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	22ff      	movs	r2, #255	; 0xff
 8002cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002cb8:	f001 fc04 	bl	80044c4 <vPortExitCritical>
}
 8002cbc:	bf00      	nop
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ccc:	f001 fbca 	bl	8004464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	e001      	b.n	8002ce2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ce2:	f001 fbef 	bl	80044c4 <vPortExitCritical>

	return xReturn;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cf8:	f001 fbb4 	bl	8004464 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d102      	bne.n	8002d0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e001      	b.n	8002d12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d12:	f001 fbd7 	bl	80044c4 <vPortExitCritical>

	return xReturn;
 8002d16:	68fb      	ldr	r3, [r7, #12]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	e014      	b.n	8002d5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d30:	4a0f      	ldr	r2, [pc, #60]	; (8002d70 <vQueueAddToRegistry+0x50>)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10b      	bne.n	8002d54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d3c:	490c      	ldr	r1, [pc, #48]	; (8002d70 <vQueueAddToRegistry+0x50>)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <vQueueAddToRegistry+0x50>)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d52:	e006      	b.n	8002d62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3301      	adds	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b07      	cmp	r3, #7
 8002d5e:	d9e7      	bls.n	8002d30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	200049d4 	.word	0x200049d4

08002d74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d84:	f001 fb6e 	bl	8004464 <vPortEnterCritical>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d8e:	b25b      	sxtb	r3, r3
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d103      	bne.n	8002d9e <vQueueWaitForMessageRestricted+0x2a>
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d103      	bne.n	8002db4 <vQueueWaitForMessageRestricted+0x40>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002db4:	f001 fb86 	bl	80044c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3324      	adds	r3, #36	; 0x24
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fc07 	bl	80035dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002dce:	6978      	ldr	r0, [r7, #20]
 8002dd0:	f7ff ff26 	bl	8002c20 <prvUnlockQueue>
	}
 8002dd4:	bf00      	nop
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	; 0x38
 8002de0:	af04      	add	r7, sp, #16
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10a      	bne.n	8002e06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	623b      	str	r3, [r7, #32]
}
 8002e02:	bf00      	nop
 8002e04:	e7fe      	b.n	8002e04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xTaskCreateStatic+0x46>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	61fb      	str	r3, [r7, #28]
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e22:	235c      	movs	r3, #92	; 0x5c
 8002e24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b5c      	cmp	r3, #92	; 0x5c
 8002e2a:	d00a      	beq.n	8002e42 <xTaskCreateStatic+0x66>
	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	61bb      	str	r3, [r7, #24]
}
 8002e3e:	bf00      	nop
 8002e40:	e7fe      	b.n	8002e40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d01e      	beq.n	8002e88 <xTaskCreateStatic+0xac>
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01b      	beq.n	8002e88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e62:	2300      	movs	r3, #0
 8002e64:	9303      	str	r3, [sp, #12]
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	9302      	str	r3, [sp, #8]
 8002e6a:	f107 0314 	add.w	r3, r7, #20
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f850 	bl	8002f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e82:	f000 f8dd 	bl	8003040 <prvAddNewTaskToReadyList>
 8002e86:	e001      	b.n	8002e8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e8c:	697b      	ldr	r3, [r7, #20]
	}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3728      	adds	r7, #40	; 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b08c      	sub	sp, #48	; 0x30
 8002e9a:	af04      	add	r7, sp, #16
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 fbfc 	bl	80046a8 <pvPortMalloc>
 8002eb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00e      	beq.n	8002ed6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002eb8:	205c      	movs	r0, #92	; 0x5c
 8002eba:	f001 fbf5 	bl	80046a8 <pvPortMalloc>
 8002ebe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
 8002ecc:	e005      	b.n	8002eda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ece:	6978      	ldr	r0, [r7, #20]
 8002ed0:	f001 fcb6 	bl	8004840 <vPortFree>
 8002ed4:	e001      	b.n	8002eda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d017      	beq.n	8002f10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	2300      	movs	r3, #0
 8002eec:	9303      	str	r3, [sp, #12]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	9302      	str	r3, [sp, #8]
 8002ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef4:	9301      	str	r3, [sp, #4]
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f80e 	bl	8002f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f04:	69f8      	ldr	r0, [r7, #28]
 8002f06:	f000 f89b 	bl	8003040 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	e002      	b.n	8002f16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f16:	69bb      	ldr	r3, [r7, #24]
	}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	461a      	mov	r2, r3
 8002f38:	21a5      	movs	r1, #165	; 0xa5
 8002f3a:	f001 fdd1 	bl	8004ae0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f023 0307 	bic.w	r3, r3, #7
 8002f56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	617b      	str	r3, [r7, #20]
}
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01f      	beq.n	8002fbe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e012      	b.n	8002faa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	4413      	add	r3, r2
 8002f8a:	7819      	ldrb	r1, [r3, #0]
 8002f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4413      	add	r3, r2
 8002f92:	3334      	adds	r3, #52	; 0x34
 8002f94:	460a      	mov	r2, r1
 8002f96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d9e9      	bls.n	8002f84 <prvInitialiseNewTask+0x64>
 8002fb0:	e000      	b.n	8002fb4 <prvInitialiseNewTask+0x94>
			{
				break;
 8002fb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fbc:	e003      	b.n	8002fc6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	2b37      	cmp	r3, #55	; 0x37
 8002fca:	d901      	bls.n	8002fd0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002fcc:	2337      	movs	r3, #55	; 0x37
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	2200      	movs	r2, #0
 8002fe0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff f978 	bl	80022dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	3318      	adds	r3, #24
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f973 	bl	80022dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300e:	2200      	movs	r2, #0
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	68f9      	ldr	r1, [r7, #12]
 800301e:	69b8      	ldr	r0, [r7, #24]
 8003020:	f001 f8f4 	bl	800420c <pxPortInitialiseStack>
 8003024:	4602      	mov	r2, r0
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003036:	bf00      	nop
 8003038:	3720      	adds	r7, #32
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003048:	f001 fa0c 	bl	8004464 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800304c:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <prvAddNewTaskToReadyList+0xc4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <prvAddNewTaskToReadyList+0xc4>)
 8003054:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003056:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <prvAddNewTaskToReadyList+0xc8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800305e:	4a2a      	ldr	r2, [pc, #168]	; (8003108 <prvAddNewTaskToReadyList+0xc8>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003064:	4b27      	ldr	r3, [pc, #156]	; (8003104 <prvAddNewTaskToReadyList+0xc4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d110      	bne.n	800308e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800306c:	f000 fbe2 	bl	8003834 <prvInitialiseTaskLists>
 8003070:	e00d      	b.n	800308e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <prvAddNewTaskToReadyList+0xcc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800307a:	4b23      	ldr	r3, [pc, #140]	; (8003108 <prvAddNewTaskToReadyList+0xc8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	429a      	cmp	r2, r3
 8003086:	d802      	bhi.n	800308e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003088:	4a1f      	ldr	r2, [pc, #124]	; (8003108 <prvAddNewTaskToReadyList+0xc8>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <prvAddNewTaskToReadyList+0xd0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3301      	adds	r3, #1
 8003094:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <prvAddNewTaskToReadyList+0xd0>)
 8003096:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003098:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <prvAddNewTaskToReadyList+0xd0>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <prvAddNewTaskToReadyList+0xd4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d903      	bls.n	80030b4 <prvAddNewTaskToReadyList+0x74>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	4a18      	ldr	r2, [pc, #96]	; (8003114 <prvAddNewTaskToReadyList+0xd4>)
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4a15      	ldr	r2, [pc, #84]	; (8003118 <prvAddNewTaskToReadyList+0xd8>)
 80030c2:	441a      	add	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f7ff f913 	bl	80022f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030d0:	f001 f9f8 	bl	80044c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030d4:	4b0d      	ldr	r3, [pc, #52]	; (800310c <prvAddNewTaskToReadyList+0xcc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <prvAddNewTaskToReadyList+0xc8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d207      	bcs.n	80030fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <prvAddNewTaskToReadyList+0xdc>)
 80030ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000bb8 	.word	0x20000bb8
 8003108:	200006e4 	.word	0x200006e4
 800310c:	20000bc4 	.word	0x20000bc4
 8003110:	20000bd4 	.word	0x20000bd4
 8003114:	20000bc0 	.word	0x20000bc0
 8003118:	200006e8 	.word	0x200006e8
 800311c:	e000ed04 	.word	0xe000ed04

08003120 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800312a:	2300      	movs	r3, #0
 800312c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800312e:	463a      	mov	r2, r7
 8003130:	1d39      	adds	r1, r7, #4
 8003132:	f107 0308 	add.w	r3, r7, #8
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f87c 	bl	8002234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	9202      	str	r2, [sp, #8]
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2300      	movs	r3, #0
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	460a      	mov	r2, r1
 800314e:	4921      	ldr	r1, [pc, #132]	; (80031d4 <vTaskStartScheduler+0xb4>)
 8003150:	4821      	ldr	r0, [pc, #132]	; (80031d8 <vTaskStartScheduler+0xb8>)
 8003152:	f7ff fe43 	bl	8002ddc <xTaskCreateStatic>
 8003156:	4603      	mov	r3, r0
 8003158:	4a20      	ldr	r2, [pc, #128]	; (80031dc <vTaskStartScheduler+0xbc>)
 800315a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800315c:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <vTaskStartScheduler+0xbc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003164:	2301      	movs	r3, #1
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	e001      	b.n	800316e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d102      	bne.n	800317a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003174:	f000 fcfc 	bl	8003b70 <xTimerCreateTimerTask>
 8003178:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d116      	bne.n	80031ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	613b      	str	r3, [r7, #16]
}
 8003192:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <vTaskStartScheduler+0xc0>)
 8003196:	f04f 32ff 	mov.w	r2, #4294967295
 800319a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <vTaskStartScheduler+0xc4>)
 800319e:	2201      	movs	r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031a2:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <vTaskStartScheduler+0xc8>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031a8:	f001 f8ba 	bl	8004320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031ac:	e00e      	b.n	80031cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d10a      	bne.n	80031cc <vTaskStartScheduler+0xac>
	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	60fb      	str	r3, [r7, #12]
}
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <vTaskStartScheduler+0xaa>
}
 80031cc:	bf00      	nop
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	08004b58 	.word	0x08004b58
 80031d8:	08003805 	.word	0x08003805
 80031dc:	20000bdc 	.word	0x20000bdc
 80031e0:	20000bd8 	.word	0x20000bd8
 80031e4:	20000bc4 	.word	0x20000bc4
 80031e8:	20000bbc 	.word	0x20000bbc

080031ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <vTaskSuspendAll+0x18>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	4a03      	ldr	r2, [pc, #12]	; (8003204 <vTaskSuspendAll+0x18>)
 80031f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	20000be0 	.word	0x20000be0

08003208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003216:	4b42      	ldr	r3, [pc, #264]	; (8003320 <xTaskResumeAll+0x118>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <xTaskResumeAll+0x2c>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	603b      	str	r3, [r7, #0]
}
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003234:	f001 f916 	bl	8004464 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003238:	4b39      	ldr	r3, [pc, #228]	; (8003320 <xTaskResumeAll+0x118>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3b01      	subs	r3, #1
 800323e:	4a38      	ldr	r2, [pc, #224]	; (8003320 <xTaskResumeAll+0x118>)
 8003240:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <xTaskResumeAll+0x118>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d162      	bne.n	8003310 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800324a:	4b36      	ldr	r3, [pc, #216]	; (8003324 <xTaskResumeAll+0x11c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d05e      	beq.n	8003310 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003252:	e02f      	b.n	80032b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003254:	4b34      	ldr	r3, [pc, #208]	; (8003328 <xTaskResumeAll+0x120>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3318      	adds	r3, #24
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff f8a5 	bl	80023b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3304      	adds	r3, #4
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f8a0 	bl	80023b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	4b2d      	ldr	r3, [pc, #180]	; (800332c <xTaskResumeAll+0x124>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d903      	bls.n	8003284 <xTaskResumeAll+0x7c>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	4a2a      	ldr	r2, [pc, #168]	; (800332c <xTaskResumeAll+0x124>)
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4a27      	ldr	r2, [pc, #156]	; (8003330 <xTaskResumeAll+0x128>)
 8003292:	441a      	add	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3304      	adds	r3, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f7ff f82b 	bl	80022f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a4:	4b23      	ldr	r3, [pc, #140]	; (8003334 <xTaskResumeAll+0x12c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d302      	bcc.n	80032b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80032ae:	4b22      	ldr	r3, [pc, #136]	; (8003338 <xTaskResumeAll+0x130>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032b4:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <xTaskResumeAll+0x120>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1cb      	bne.n	8003254 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032c2:	f000 fb55 	bl	8003970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <xTaskResumeAll+0x134>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d010      	beq.n	80032f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032d2:	f000 f847 	bl	8003364 <xTaskIncrementTick>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <xTaskResumeAll+0x130>)
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f1      	bne.n	80032d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <xTaskResumeAll+0x134>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032f4:	4b10      	ldr	r3, [pc, #64]	; (8003338 <xTaskResumeAll+0x130>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032fc:	2301      	movs	r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <xTaskResumeAll+0x138>)
 8003302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003310:	f001 f8d8 	bl	80044c4 <vPortExitCritical>

	return xAlreadyYielded;
 8003314:	68bb      	ldr	r3, [r7, #8]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000be0 	.word	0x20000be0
 8003324:	20000bb8 	.word	0x20000bb8
 8003328:	20000b78 	.word	0x20000b78
 800332c:	20000bc0 	.word	0x20000bc0
 8003330:	200006e8 	.word	0x200006e8
 8003334:	200006e4 	.word	0x200006e4
 8003338:	20000bcc 	.word	0x20000bcc
 800333c:	20000bc8 	.word	0x20000bc8
 8003340:	e000ed04 	.word	0xe000ed04

08003344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <xTaskGetTickCount+0x1c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003350:	687b      	ldr	r3, [r7, #4]
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000bbc 	.word	0x20000bbc

08003364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800336e:	4b4f      	ldr	r3, [pc, #316]	; (80034ac <xTaskIncrementTick+0x148>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 808f 	bne.w	8003496 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003378:	4b4d      	ldr	r3, [pc, #308]	; (80034b0 <xTaskIncrementTick+0x14c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003380:	4a4b      	ldr	r2, [pc, #300]	; (80034b0 <xTaskIncrementTick+0x14c>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d120      	bne.n	80033ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800338c:	4b49      	ldr	r3, [pc, #292]	; (80034b4 <xTaskIncrementTick+0x150>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <xTaskIncrementTick+0x48>
	__asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	603b      	str	r3, [r7, #0]
}
 80033a8:	bf00      	nop
 80033aa:	e7fe      	b.n	80033aa <xTaskIncrementTick+0x46>
 80033ac:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <xTaskIncrementTick+0x150>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <xTaskIncrementTick+0x154>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a3f      	ldr	r2, [pc, #252]	; (80034b4 <xTaskIncrementTick+0x150>)
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4a3f      	ldr	r2, [pc, #252]	; (80034b8 <xTaskIncrementTick+0x154>)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b3e      	ldr	r3, [pc, #248]	; (80034bc <xTaskIncrementTick+0x158>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	4a3d      	ldr	r2, [pc, #244]	; (80034bc <xTaskIncrementTick+0x158>)
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	f000 fad1 	bl	8003970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033ce:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <xTaskIncrementTick+0x15c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d349      	bcc.n	800346c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d8:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <xTaskIncrementTick+0x150>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d104      	bne.n	80033ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033e2:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <xTaskIncrementTick+0x15c>)
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295
 80033e8:	601a      	str	r2, [r3, #0]
					break;
 80033ea:	e03f      	b.n	800346c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ec:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <xTaskIncrementTick+0x150>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	d203      	bcs.n	800340c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003404:	4a2e      	ldr	r2, [pc, #184]	; (80034c0 <xTaskIncrementTick+0x15c>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800340a:	e02f      	b.n	800346c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	3304      	adds	r3, #4
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe ffcd 	bl	80023b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3318      	adds	r3, #24
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe ffc4 	bl	80023b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <xTaskIncrementTick+0x160>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d903      	bls.n	800343c <xTaskIncrementTick+0xd8>
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <xTaskIncrementTick+0x160>)
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <xTaskIncrementTick+0x164>)
 800344a:	441a      	add	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f7fe ff4f 	bl	80022f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <xTaskIncrementTick+0x168>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	429a      	cmp	r2, r3
 8003464:	d3b8      	bcc.n	80033d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003466:	2301      	movs	r3, #1
 8003468:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800346a:	e7b5      	b.n	80033d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800346c:	4b17      	ldr	r3, [pc, #92]	; (80034cc <xTaskIncrementTick+0x168>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003472:	4915      	ldr	r1, [pc, #84]	; (80034c8 <xTaskIncrementTick+0x164>)
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d901      	bls.n	8003488 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <xTaskIncrementTick+0x16c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003490:	2301      	movs	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e004      	b.n	80034a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003496:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <xTaskIncrementTick+0x170>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <xTaskIncrementTick+0x170>)
 800349e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034a0:	697b      	ldr	r3, [r7, #20]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000be0 	.word	0x20000be0
 80034b0:	20000bbc 	.word	0x20000bbc
 80034b4:	20000b70 	.word	0x20000b70
 80034b8:	20000b74 	.word	0x20000b74
 80034bc:	20000bd0 	.word	0x20000bd0
 80034c0:	20000bd8 	.word	0x20000bd8
 80034c4:	20000bc0 	.word	0x20000bc0
 80034c8:	200006e8 	.word	0x200006e8
 80034cc:	200006e4 	.word	0x200006e4
 80034d0:	20000bcc 	.word	0x20000bcc
 80034d4:	20000bc8 	.word	0x20000bc8

080034d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034de:	4b28      	ldr	r3, [pc, #160]	; (8003580 <vTaskSwitchContext+0xa8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034e6:	4b27      	ldr	r3, [pc, #156]	; (8003584 <vTaskSwitchContext+0xac>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034ec:	e041      	b.n	8003572 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <vTaskSwitchContext+0xac>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <vTaskSwitchContext+0xb0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e010      	b.n	800351e <vTaskSwitchContext+0x46>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <vTaskSwitchContext+0x40>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	607b      	str	r3, [r7, #4]
}
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <vTaskSwitchContext+0x3e>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3b01      	subs	r3, #1
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	491b      	ldr	r1, [pc, #108]	; (800358c <vTaskSwitchContext+0xb4>)
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0e4      	beq.n	80034fc <vTaskSwitchContext+0x24>
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4a13      	ldr	r2, [pc, #76]	; (800358c <vTaskSwitchContext+0xb4>)
 800353e:	4413      	add	r3, r2
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3308      	adds	r3, #8
 8003554:	429a      	cmp	r2, r3
 8003556:	d104      	bne.n	8003562 <vTaskSwitchContext+0x8a>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a09      	ldr	r2, [pc, #36]	; (8003590 <vTaskSwitchContext+0xb8>)
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4a06      	ldr	r2, [pc, #24]	; (8003588 <vTaskSwitchContext+0xb0>)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6013      	str	r3, [r2, #0]
}
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000be0 	.word	0x20000be0
 8003584:	20000bcc 	.word	0x20000bcc
 8003588:	20000bc0 	.word	0x20000bc0
 800358c:	200006e8 	.word	0x200006e8
 8003590:	200006e4 	.word	0x200006e4

08003594 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	60fb      	str	r3, [r7, #12]
}
 80035b6:	bf00      	nop
 80035b8:	e7fe      	b.n	80035b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <vTaskPlaceOnEventList+0x44>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3318      	adds	r3, #24
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fe febb 	bl	800233e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035c8:	2101      	movs	r1, #1
 80035ca:	6838      	ldr	r0, [r7, #0]
 80035cc:	f000 fa7c 	bl	8003ac8 <prvAddCurrentTaskToDelayedList>
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200006e4 	.word	0x200006e4

080035dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	617b      	str	r3, [r7, #20]
}
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <vTaskPlaceOnEventListRestricted+0x54>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3318      	adds	r3, #24
 800360a:	4619      	mov	r1, r3
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f7fe fe72 	bl	80022f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003618:	f04f 33ff 	mov.w	r3, #4294967295
 800361c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	68b8      	ldr	r0, [r7, #8]
 8003622:	f000 fa51 	bl	8003ac8 <prvAddCurrentTaskToDelayedList>
	}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200006e4 	.word	0x200006e4

08003634 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	60fb      	str	r3, [r7, #12]
}
 800365c:	bf00      	nop
 800365e:	e7fe      	b.n	800365e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	3318      	adds	r3, #24
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe fea3 	bl	80023b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800366a:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <xTaskRemoveFromEventList+0xb0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d11d      	bne.n	80036ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3304      	adds	r3, #4
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fe9a 	bl	80023b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <xTaskRemoveFromEventList+0xb4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d903      	bls.n	8003690 <xTaskRemoveFromEventList+0x5c>
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	4a16      	ldr	r2, [pc, #88]	; (80036e8 <xTaskRemoveFromEventList+0xb4>)
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4a13      	ldr	r2, [pc, #76]	; (80036ec <xTaskRemoveFromEventList+0xb8>)
 800369e:	441a      	add	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f7fe fe25 	bl	80022f6 <vListInsertEnd>
 80036ac:	e005      	b.n	80036ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3318      	adds	r3, #24
 80036b2:	4619      	mov	r1, r3
 80036b4:	480e      	ldr	r0, [pc, #56]	; (80036f0 <xTaskRemoveFromEventList+0xbc>)
 80036b6:	f7fe fe1e 	bl	80022f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036be:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <xTaskRemoveFromEventList+0xc0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d905      	bls.n	80036d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <xTaskRemoveFromEventList+0xc4>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e001      	b.n	80036d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80036d8:	697b      	ldr	r3, [r7, #20]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000be0 	.word	0x20000be0
 80036e8:	20000bc0 	.word	0x20000bc0
 80036ec:	200006e8 	.word	0x200006e8
 80036f0:	20000b78 	.word	0x20000b78
 80036f4:	200006e4 	.word	0x200006e4
 80036f8:	20000bcc 	.word	0x20000bcc

080036fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <vTaskInternalSetTimeOutState+0x24>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <vTaskInternalSetTimeOutState+0x28>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	605a      	str	r2, [r3, #4]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	20000bd0 	.word	0x20000bd0
 8003724:	20000bbc 	.word	0x20000bbc

08003728 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	613b      	str	r3, [r7, #16]
}
 800374a:	bf00      	nop
 800374c:	e7fe      	b.n	800374c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	60fb      	str	r3, [r7, #12]
}
 8003766:	bf00      	nop
 8003768:	e7fe      	b.n	8003768 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800376a:	f000 fe7b 	bl	8004464 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800376e:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <xTaskCheckForTimeOut+0xbc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d102      	bne.n	800378e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	e023      	b.n	80037d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <xTaskCheckForTimeOut+0xc0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d007      	beq.n	80037aa <xTaskCheckForTimeOut+0x82>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d302      	bcc.n	80037aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	e015      	b.n	80037d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d20b      	bcs.n	80037cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	1ad2      	subs	r2, r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff9b 	bl	80036fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e004      	b.n	80037d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037d2:	2301      	movs	r3, #1
 80037d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037d6:	f000 fe75 	bl	80044c4 <vPortExitCritical>

	return xReturn;
 80037da:	69fb      	ldr	r3, [r7, #28]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000bbc 	.word	0x20000bbc
 80037e8:	20000bd0 	.word	0x20000bd0

080037ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <vTaskMissedYield+0x14>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
}
 80037f6:	bf00      	nop
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	20000bcc 	.word	0x20000bcc

08003804 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800380c:	f000 f852 	bl	80038b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <prvIdleTask+0x28>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d9f9      	bls.n	800380c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <prvIdleTask+0x2c>)
 800381a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003828:	e7f0      	b.n	800380c <prvIdleTask+0x8>
 800382a:	bf00      	nop
 800382c:	200006e8 	.word	0x200006e8
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	e00c      	b.n	800385a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4a12      	ldr	r2, [pc, #72]	; (8003894 <prvInitialiseTaskLists+0x60>)
 800384c:	4413      	add	r3, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fd24 	bl	800229c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3301      	adds	r3, #1
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b37      	cmp	r3, #55	; 0x37
 800385e:	d9ef      	bls.n	8003840 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003860:	480d      	ldr	r0, [pc, #52]	; (8003898 <prvInitialiseTaskLists+0x64>)
 8003862:	f7fe fd1b 	bl	800229c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003866:	480d      	ldr	r0, [pc, #52]	; (800389c <prvInitialiseTaskLists+0x68>)
 8003868:	f7fe fd18 	bl	800229c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800386c:	480c      	ldr	r0, [pc, #48]	; (80038a0 <prvInitialiseTaskLists+0x6c>)
 800386e:	f7fe fd15 	bl	800229c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003872:	480c      	ldr	r0, [pc, #48]	; (80038a4 <prvInitialiseTaskLists+0x70>)
 8003874:	f7fe fd12 	bl	800229c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003878:	480b      	ldr	r0, [pc, #44]	; (80038a8 <prvInitialiseTaskLists+0x74>)
 800387a:	f7fe fd0f 	bl	800229c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <prvInitialiseTaskLists+0x78>)
 8003880:	4a05      	ldr	r2, [pc, #20]	; (8003898 <prvInitialiseTaskLists+0x64>)
 8003882:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <prvInitialiseTaskLists+0x7c>)
 8003886:	4a05      	ldr	r2, [pc, #20]	; (800389c <prvInitialiseTaskLists+0x68>)
 8003888:	601a      	str	r2, [r3, #0]
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200006e8 	.word	0x200006e8
 8003898:	20000b48 	.word	0x20000b48
 800389c:	20000b5c 	.word	0x20000b5c
 80038a0:	20000b78 	.word	0x20000b78
 80038a4:	20000b8c 	.word	0x20000b8c
 80038a8:	20000ba4 	.word	0x20000ba4
 80038ac:	20000b70 	.word	0x20000b70
 80038b0:	20000b74 	.word	0x20000b74

080038b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038ba:	e019      	b.n	80038f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038bc:	f000 fdd2 	bl	8004464 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <prvCheckTasksWaitingTermination+0x50>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fd6f 	bl	80023b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <prvCheckTasksWaitingTermination+0x54>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	4a0b      	ldr	r2, [pc, #44]	; (8003908 <prvCheckTasksWaitingTermination+0x54>)
 80038da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <prvCheckTasksWaitingTermination+0x58>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <prvCheckTasksWaitingTermination+0x58>)
 80038e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038e6:	f000 fded 	bl	80044c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f810 	bl	8003910 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <prvCheckTasksWaitingTermination+0x58>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e1      	bne.n	80038bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000b8c 	.word	0x20000b8c
 8003908:	20000bb8 	.word	0x20000bb8
 800390c:	20000ba0 	.word	0x20000ba0

08003910 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800391e:	2b00      	cmp	r3, #0
 8003920:	d108      	bne.n	8003934 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4618      	mov	r0, r3
 8003928:	f000 ff8a 	bl	8004840 <vPortFree>
				vPortFree( pxTCB );
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 ff87 	bl	8004840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003932:	e018      	b.n	8003966 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800393a:	2b01      	cmp	r3, #1
 800393c:	d103      	bne.n	8003946 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 ff7e 	bl	8004840 <vPortFree>
	}
 8003944:	e00f      	b.n	8003966 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800394c:	2b02      	cmp	r3, #2
 800394e:	d00a      	beq.n	8003966 <prvDeleteTCB+0x56>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	60fb      	str	r3, [r7, #12]
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <prvDeleteTCB+0x54>
	}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <prvResetNextTaskUnblockTime+0x38>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d104      	bne.n	800398a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <prvResetNextTaskUnblockTime+0x3c>)
 8003982:	f04f 32ff 	mov.w	r2, #4294967295
 8003986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003988:	e008      	b.n	800399c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <prvResetNextTaskUnblockTime+0x38>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <prvResetNextTaskUnblockTime+0x3c>)
 800399a:	6013      	str	r3, [r2, #0]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	20000b70 	.word	0x20000b70
 80039ac:	20000bd8 	.word	0x20000bd8

080039b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <xTaskGetSchedulerState+0x34>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039be:	2301      	movs	r3, #1
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	e008      	b.n	80039d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <xTaskGetSchedulerState+0x38>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80039cc:	2302      	movs	r3, #2
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	e001      	b.n	80039d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039d6:	687b      	ldr	r3, [r7, #4]
	}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	20000bc4 	.word	0x20000bc4
 80039e8:	20000be0 	.word	0x20000be0

080039ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d056      	beq.n	8003ab0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a02:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <xTaskPriorityDisinherit+0xd0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d00a      	beq.n	8003a22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	60fb      	str	r3, [r7, #12]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
 8003a3a:	60bb      	str	r3, [r7, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	e7fe      	b.n	8003a3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d02c      	beq.n	8003ab0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d128      	bne.n	8003ab0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fca4 	bl	80023b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <xTaskPriorityDisinherit+0xd4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d903      	bls.n	8003a90 <xTaskPriorityDisinherit+0xa4>
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ac0 <xTaskPriorityDisinherit+0xd4>)
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <xTaskPriorityDisinherit+0xd8>)
 8003a9e:	441a      	add	r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f7fe fc25 	bl	80022f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ab0:	697b      	ldr	r3, [r7, #20]
	}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200006e4 	.word	0x200006e4
 8003ac0:	20000bc0 	.word	0x20000bc0
 8003ac4:	200006e8 	.word	0x200006e8

08003ac8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ad2:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ad8:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fc66 	bl	80023b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d10a      	bne.n	8003b02 <prvAddCurrentTaskToDelayedList+0x3a>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003af2:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4819      	ldr	r0, [pc, #100]	; (8003b60 <prvAddCurrentTaskToDelayedList+0x98>)
 8003afc:	f7fe fbfb 	bl	80022f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b00:	e026      	b.n	8003b50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d209      	bcs.n	8003b2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f7fe fc09 	bl	800233e <vListInsert>
}
 8003b2c:	e010      	b.n	8003b50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7fe fbff 	bl	800233e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d202      	bcs.n	8003b50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b4a:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000bbc 	.word	0x20000bbc
 8003b5c:	200006e4 	.word	0x200006e4
 8003b60:	20000ba4 	.word	0x20000ba4
 8003b64:	20000b74 	.word	0x20000b74
 8003b68:	20000b70 	.word	0x20000b70
 8003b6c:	20000bd8 	.word	0x20000bd8

08003b70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b7a:	f000 fb07 	bl	800418c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b7e:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <xTimerCreateTimerTask+0x80>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d021      	beq.n	8003bca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b8e:	1d3a      	adds	r2, r7, #4
 8003b90:	f107 0108 	add.w	r1, r7, #8
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe fb65 	bl	8002268 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	9202      	str	r2, [sp, #8]
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	2302      	movs	r3, #2
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2300      	movs	r3, #0
 8003bae:	460a      	mov	r2, r1
 8003bb0:	4910      	ldr	r1, [pc, #64]	; (8003bf4 <xTimerCreateTimerTask+0x84>)
 8003bb2:	4811      	ldr	r0, [pc, #68]	; (8003bf8 <xTimerCreateTimerTask+0x88>)
 8003bb4:	f7ff f912 	bl	8002ddc <xTaskCreateStatic>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4a10      	ldr	r2, [pc, #64]	; (8003bfc <xTimerCreateTimerTask+0x8c>)
 8003bbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <xTimerCreateTimerTask+0x8c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	613b      	str	r3, [r7, #16]
}
 8003be2:	bf00      	nop
 8003be4:	e7fe      	b.n	8003be4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003be6:	697b      	ldr	r3, [r7, #20]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20000c14 	.word	0x20000c14
 8003bf4:	08004b60 	.word	0x08004b60
 8003bf8:	08003d35 	.word	0x08003d35
 8003bfc:	20000c18 	.word	0x20000c18

08003c00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	; 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	623b      	str	r3, [r7, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	e7fe      	b.n	8003c2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <xTimerGenericCommand+0x98>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d02a      	beq.n	8003c8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	dc18      	bgt.n	8003c7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c48:	f7ff feb2 	bl	80039b0 <xTaskGetSchedulerState>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d109      	bne.n	8003c66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <xTimerGenericCommand+0x98>)
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	f107 0110 	add.w	r1, r7, #16
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5e:	f7fe fcd5 	bl	800260c <xQueueGenericSend>
 8003c62:	6278      	str	r0, [r7, #36]	; 0x24
 8003c64:	e012      	b.n	8003c8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <xTimerGenericCommand+0x98>)
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f107 0110 	add.w	r1, r7, #16
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2200      	movs	r2, #0
 8003c72:	f7fe fccb 	bl	800260c <xQueueGenericSend>
 8003c76:	6278      	str	r0, [r7, #36]	; 0x24
 8003c78:	e008      	b.n	8003c8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c7a:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <xTimerGenericCommand+0x98>)
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	f107 0110 	add.w	r1, r7, #16
 8003c82:	2300      	movs	r3, #0
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	f7fe fdbf 	bl	8002808 <xQueueGenericSendFromISR>
 8003c8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3728      	adds	r7, #40	; 0x28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000c14 	.word	0x20000c14

08003c9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca6:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <prvProcessExpiredTimer+0x94>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fb7b 	bl	80023b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d022      	beq.n	8003d0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	18d1      	adds	r1, r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	6978      	ldr	r0, [r7, #20]
 8003cd6:	f000 f8d1 	bl	8003e7c <prvInsertTimerInActiveList>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d01f      	beq.n	8003d20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	2100      	movs	r1, #0
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f7ff ff88 	bl	8003c00 <xTimerGenericCommand>
 8003cf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d113      	bne.n	8003d20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	60fb      	str	r3, [r7, #12]
}
 8003d0a:	bf00      	nop
 8003d0c:	e7fe      	b.n	8003d0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	6978      	ldr	r0, [r7, #20]
 8003d26:	4798      	blx	r3
}
 8003d28:	bf00      	nop
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000c0c 	.word	0x20000c0c

08003d34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d3c:	f107 0308 	add.w	r3, r7, #8
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f857 	bl	8003df4 <prvGetNextExpireTime>
 8003d46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f803 	bl	8003d58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d52:	f000 f8d5 	bl	8003f00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d56:	e7f1      	b.n	8003d3c <prvTimerTask+0x8>

08003d58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d62:	f7ff fa43 	bl	80031ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d66:	f107 0308 	add.w	r3, r7, #8
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f866 	bl	8003e3c <prvSampleTimeNow>
 8003d70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d130      	bne.n	8003dda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <prvProcessTimerOrBlockTask+0x3c>
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d806      	bhi.n	8003d94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d86:	f7ff fa3f 	bl	8003208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff85 	bl	8003c9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d92:	e024      	b.n	8003dde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d008      	beq.n	8003dac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <prvProcessTimerOrBlockTask+0x90>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <prvProcessTimerOrBlockTask+0x50>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <prvProcessTimerOrBlockTask+0x52>
 8003da8:	2300      	movs	r3, #0
 8003daa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003dac:	4b0f      	ldr	r3, [pc, #60]	; (8003dec <prvProcessTimerOrBlockTask+0x94>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	4619      	mov	r1, r3
 8003dba:	f7fe ffdb 	bl	8002d74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003dbe:	f7ff fa23 	bl	8003208 <xTaskResumeAll>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <prvProcessTimerOrBlockTask+0x98>)
 8003dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	f3bf 8f6f 	isb	sy
}
 8003dd8:	e001      	b.n	8003dde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003dda:	f7ff fa15 	bl	8003208 <xTaskResumeAll>
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000c10 	.word	0x20000c10
 8003dec:	20000c14 	.word	0x20000c14
 8003df0:	e000ed04 	.word	0xe000ed04

08003df4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <prvGetNextExpireTime+0x44>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <prvGetNextExpireTime+0x16>
 8003e06:	2201      	movs	r2, #1
 8003e08:	e000      	b.n	8003e0c <prvGetNextExpireTime+0x18>
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <prvGetNextExpireTime+0x44>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	e001      	b.n	8003e28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e28:	68fb      	ldr	r3, [r7, #12]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000c0c 	.word	0x20000c0c

08003e3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e44:	f7ff fa7e 	bl	8003344 <xTaskGetTickCount>
 8003e48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e4a:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <prvSampleTimeNow+0x3c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d205      	bcs.n	8003e60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e54:	f000 f936 	bl	80040c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	e002      	b.n	8003e66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e66:	4a04      	ldr	r2, [pc, #16]	; (8003e78 <prvSampleTimeNow+0x3c>)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000c1c 	.word	0x20000c1c

08003e7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d812      	bhi.n	8003ec8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	1ad2      	subs	r2, r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d302      	bcc.n	8003eb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e01b      	b.n	8003eee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003eb6:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <prvInsertTimerInActiveList+0x7c>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f7fe fa3c 	bl	800233e <vListInsert>
 8003ec6:	e012      	b.n	8003eee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d206      	bcs.n	8003ede <prvInsertTimerInActiveList+0x62>
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d302      	bcc.n	8003ede <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	e007      	b.n	8003eee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <prvInsertTimerInActiveList+0x80>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f7fe fa28 	bl	800233e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003eee:	697b      	ldr	r3, [r7, #20]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000c10 	.word	0x20000c10
 8003efc:	20000c0c 	.word	0x20000c0c

08003f00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08e      	sub	sp, #56	; 0x38
 8003f04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f06:	e0ca      	b.n	800409e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	da18      	bge.n	8003f40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f0e:	1d3b      	adds	r3, r7, #4
 8003f10:	3304      	adds	r3, #4
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	61fb      	str	r3, [r7, #28]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f36:	6850      	ldr	r0, [r2, #4]
 8003f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3a:	6892      	ldr	r2, [r2, #8]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f2c0 80aa 	blt.w	800409c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	3304      	adds	r3, #4
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe fa29 	bl	80023b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f5e:	463b      	mov	r3, r7
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff6b 	bl	8003e3c <prvSampleTimeNow>
 8003f66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b09      	cmp	r3, #9
 8003f6c:	f200 8097 	bhi.w	800409e <prvProcessReceivedCommands+0x19e>
 8003f70:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <prvProcessReceivedCommands+0x78>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08003fa1 	.word	0x08003fa1
 8003f84:	08004015 	.word	0x08004015
 8003f88:	08004029 	.word	0x08004029
 8003f8c:	08004073 	.word	0x08004073
 8003f90:	08003fa1 	.word	0x08003fa1
 8003f94:	08003fa1 	.word	0x08003fa1
 8003f98:	08004015 	.word	0x08004015
 8003f9c:	08004029 	.word	0x08004029
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	18d1      	adds	r1, r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fc0:	f7ff ff5c 	bl	8003e7c <prvInsertTimerInActiveList>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d069      	beq.n	800409e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d05e      	beq.n	800409e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	441a      	add	r2, r3
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2300      	movs	r3, #0
 8003fee:	2100      	movs	r1, #0
 8003ff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ff2:	f7ff fe05 	bl	8003c00 <xTimerGenericCommand>
 8003ff6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d14f      	bne.n	800409e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	61bb      	str	r3, [r7, #24]
}
 8004010:	bf00      	nop
 8004012:	e7fe      	b.n	8004012 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	b2da      	uxtb	r2, r3
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004026:	e03a      	b.n	800409e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	617b      	str	r3, [r7, #20]
}
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	18d1      	adds	r1, r2, r3
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800406c:	f7ff ff06 	bl	8003e7c <prvInsertTimerInActiveList>
					break;
 8004070:	e015      	b.n	800409e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d103      	bne.n	8004088 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004082:	f000 fbdd 	bl	8004840 <vPortFree>
 8004086:	e00a      	b.n	800409e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	b2da      	uxtb	r2, r3
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800409a:	e000      	b.n	800409e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800409c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <prvProcessReceivedCommands+0x1c0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1d39      	adds	r1, r7, #4
 80040a4:	2200      	movs	r2, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fc4a 	bl	8002940 <xQueueReceive>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f47f af2a 	bne.w	8003f08 <prvProcessReceivedCommands+0x8>
	}
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3730      	adds	r7, #48	; 0x30
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000c14 	.word	0x20000c14

080040c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ca:	e048      	b.n	800415e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040cc:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <prvSwitchTimerLists+0xc0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d6:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <prvSwitchTimerLists+0xc0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe f963 	bl	80023b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d02e      	beq.n	800415e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4413      	add	r3, r2
 8004108:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	429a      	cmp	r2, r3
 8004110:	d90e      	bls.n	8004130 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <prvSwitchTimerLists+0xc0>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3304      	adds	r3, #4
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f7fe f908 	bl	800233e <vListInsert>
 800412e:	e016      	b.n	800415e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004130:	2300      	movs	r3, #0
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	2100      	movs	r1, #0
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff fd60 	bl	8003c00 <xTimerGenericCommand>
 8004140:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	603b      	str	r3, [r7, #0]
}
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <prvSwitchTimerLists+0xc0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1b1      	bne.n	80040cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <prvSwitchTimerLists+0xc0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <prvSwitchTimerLists+0xc4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a04      	ldr	r2, [pc, #16]	; (8004184 <prvSwitchTimerLists+0xc0>)
 8004174:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004176:	4a04      	ldr	r2, [pc, #16]	; (8004188 <prvSwitchTimerLists+0xc4>)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	6013      	str	r3, [r2, #0]
}
 800417c:	bf00      	nop
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000c0c 	.word	0x20000c0c
 8004188:	20000c10 	.word	0x20000c10

0800418c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004192:	f000 f967 	bl	8004464 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <prvCheckForValidListAndQueue+0x60>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d120      	bne.n	80041e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800419e:	4814      	ldr	r0, [pc, #80]	; (80041f0 <prvCheckForValidListAndQueue+0x64>)
 80041a0:	f7fe f87c 	bl	800229c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041a4:	4813      	ldr	r0, [pc, #76]	; (80041f4 <prvCheckForValidListAndQueue+0x68>)
 80041a6:	f7fe f879 	bl	800229c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041aa:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <prvCheckForValidListAndQueue+0x6c>)
 80041ac:	4a10      	ldr	r2, [pc, #64]	; (80041f0 <prvCheckForValidListAndQueue+0x64>)
 80041ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <prvCheckForValidListAndQueue+0x70>)
 80041b2:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <prvCheckForValidListAndQueue+0x68>)
 80041b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041b6:	2300      	movs	r3, #0
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <prvCheckForValidListAndQueue+0x74>)
 80041bc:	4a11      	ldr	r2, [pc, #68]	; (8004204 <prvCheckForValidListAndQueue+0x78>)
 80041be:	2110      	movs	r1, #16
 80041c0:	200a      	movs	r0, #10
 80041c2:	f7fe f987 	bl	80024d4 <xQueueGenericCreateStatic>
 80041c6:	4603      	mov	r3, r0
 80041c8:	4a08      	ldr	r2, [pc, #32]	; (80041ec <prvCheckForValidListAndQueue+0x60>)
 80041ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <prvCheckForValidListAndQueue+0x60>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <prvCheckForValidListAndQueue+0x60>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	490b      	ldr	r1, [pc, #44]	; (8004208 <prvCheckForValidListAndQueue+0x7c>)
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe fda0 	bl	8002d20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041e0:	f000 f970 	bl	80044c4 <vPortExitCritical>
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000c14 	.word	0x20000c14
 80041f0:	20000be4 	.word	0x20000be4
 80041f4:	20000bf8 	.word	0x20000bf8
 80041f8:	20000c0c 	.word	0x20000c0c
 80041fc:	20000c10 	.word	0x20000c10
 8004200:	20000cc0 	.word	0x20000cc0
 8004204:	20000c20 	.word	0x20000c20
 8004208:	08004b68 	.word	0x08004b68

0800420c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3b04      	subs	r3, #4
 800421c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b04      	subs	r3, #4
 800422a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3b04      	subs	r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800423c:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <pxPortInitialiseStack+0x64>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3b14      	subs	r3, #20
 8004246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3b04      	subs	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f06f 0202 	mvn.w	r2, #2
 800425a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b20      	subs	r3, #32
 8004260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004262:	68fb      	ldr	r3, [r7, #12]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	08004275 	.word	0x08004275

08004274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <prvTaskExitError+0x54>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d00a      	beq.n	800429e <prvTaskExitError+0x2a>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60fb      	str	r3, [r7, #12]
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <prvTaskExitError+0x28>
	__asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60bb      	str	r3, [r7, #8]
}
 80042b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042b2:	bf00      	nop
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0fc      	beq.n	80042b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	2000000c 	.word	0x2000000c
 80042cc:	00000000 	.word	0x00000000

080042d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <pxCurrentTCBConst2>)
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	6808      	ldr	r0, [r1, #0]
 80042d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042da:	f380 8809 	msr	PSP, r0
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8811 	msr	BASEPRI, r0
 80042ea:	4770      	bx	lr
 80042ec:	f3af 8000 	nop.w

080042f0 <pxCurrentTCBConst2>:
 80042f0:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop

080042f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042f8:	4808      	ldr	r0, [pc, #32]	; (800431c <prvPortStartFirstTask+0x24>)
 80042fa:	6800      	ldr	r0, [r0, #0]
 80042fc:	6800      	ldr	r0, [r0, #0]
 80042fe:	f380 8808 	msr	MSP, r0
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f380 8814 	msr	CONTROL, r0
 800430a:	b662      	cpsie	i
 800430c:	b661      	cpsie	f
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	df00      	svc	0
 8004318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800431a:	bf00      	nop
 800431c:	e000ed08 	.word	0xe000ed08

08004320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004326:	4b46      	ldr	r3, [pc, #280]	; (8004440 <xPortStartScheduler+0x120>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a46      	ldr	r2, [pc, #280]	; (8004444 <xPortStartScheduler+0x124>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d10a      	bne.n	8004346 <xPortStartScheduler+0x26>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	613b      	str	r3, [r7, #16]
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004346:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <xPortStartScheduler+0x120>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a3f      	ldr	r2, [pc, #252]	; (8004448 <xPortStartScheduler+0x128>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10a      	bne.n	8004366 <xPortStartScheduler+0x46>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	60fb      	str	r3, [r7, #12]
}
 8004362:	bf00      	nop
 8004364:	e7fe      	b.n	8004364 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <xPortStartScheduler+0x12c>)
 8004368:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	22ff      	movs	r2, #255	; 0xff
 8004376:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004388:	b2da      	uxtb	r2, r3
 800438a:	4b31      	ldr	r3, [pc, #196]	; (8004450 <xPortStartScheduler+0x130>)
 800438c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800438e:	4b31      	ldr	r3, [pc, #196]	; (8004454 <xPortStartScheduler+0x134>)
 8004390:	2207      	movs	r2, #7
 8004392:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004394:	e009      	b.n	80043aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004396:	4b2f      	ldr	r3, [pc, #188]	; (8004454 <xPortStartScheduler+0x134>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3b01      	subs	r3, #1
 800439c:	4a2d      	ldr	r2, [pc, #180]	; (8004454 <xPortStartScheduler+0x134>)
 800439e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d0ef      	beq.n	8004396 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043b6:	4b27      	ldr	r3, [pc, #156]	; (8004454 <xPortStartScheduler+0x134>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1c3 0307 	rsb	r3, r3, #7
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d00a      	beq.n	80043d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	60bb      	str	r3, [r7, #8]
}
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <xPortStartScheduler+0x134>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <xPortStartScheduler+0x134>)
 80043e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043e2:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <xPortStartScheduler+0x134>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ea:	4a1a      	ldr	r2, [pc, #104]	; (8004454 <xPortStartScheduler+0x134>)
 80043ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043f6:	4b18      	ldr	r3, [pc, #96]	; (8004458 <xPortStartScheduler+0x138>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a17      	ldr	r2, [pc, #92]	; (8004458 <xPortStartScheduler+0x138>)
 80043fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <xPortStartScheduler+0x138>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a14      	ldr	r2, [pc, #80]	; (8004458 <xPortStartScheduler+0x138>)
 8004408:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800440c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800440e:	f000 f8dd 	bl	80045cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <xPortStartScheduler+0x13c>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004418:	f000 f8fc 	bl	8004614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800441c:	4b10      	ldr	r3, [pc, #64]	; (8004460 <xPortStartScheduler+0x140>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0f      	ldr	r2, [pc, #60]	; (8004460 <xPortStartScheduler+0x140>)
 8004422:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004426:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004428:	f7ff ff66 	bl	80042f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800442c:	f7ff f854 	bl	80034d8 <vTaskSwitchContext>
	prvTaskExitError();
 8004430:	f7ff ff20 	bl	8004274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	e000ed00 	.word	0xe000ed00
 8004444:	410fc271 	.word	0x410fc271
 8004448:	410fc270 	.word	0x410fc270
 800444c:	e000e400 	.word	0xe000e400
 8004450:	20000d10 	.word	0x20000d10
 8004454:	20000d14 	.word	0x20000d14
 8004458:	e000ed20 	.word	0xe000ed20
 800445c:	2000000c 	.word	0x2000000c
 8004460:	e000ef34 	.word	0xe000ef34

08004464 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	607b      	str	r3, [r7, #4]
}
 800447c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800447e:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <vPortEnterCritical+0x58>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <vPortEnterCritical+0x58>)
 8004486:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <vPortEnterCritical+0x58>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d10f      	bne.n	80044b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <vPortEnterCritical+0x5c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	603b      	str	r3, [r7, #0]
}
 80044ac:	bf00      	nop
 80044ae:	e7fe      	b.n	80044ae <vPortEnterCritical+0x4a>
	}
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	2000000c 	.word	0x2000000c
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044ca:	4b12      	ldr	r3, [pc, #72]	; (8004514 <vPortExitCritical+0x50>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <vPortExitCritical+0x24>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	607b      	str	r3, [r7, #4]
}
 80044e4:	bf00      	nop
 80044e6:	e7fe      	b.n	80044e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <vPortExitCritical+0x50>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <vPortExitCritical+0x50>)
 80044f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <vPortExitCritical+0x50>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <vPortExitCritical+0x42>
 80044fa:	2300      	movs	r3, #0
 80044fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f383 8811 	msr	BASEPRI, r3
}
 8004504:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	2000000c 	.word	0x2000000c
	...

08004520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004520:	f3ef 8009 	mrs	r0, PSP
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <pxCurrentTCBConst>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	f01e 0f10 	tst.w	lr, #16
 8004530:	bf08      	it	eq
 8004532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453a:	6010      	str	r0, [r2, #0]
 800453c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004544:	f380 8811 	msr	BASEPRI, r0
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f7fe ffc2 	bl	80034d8 <vTaskSwitchContext>
 8004554:	f04f 0000 	mov.w	r0, #0
 8004558:	f380 8811 	msr	BASEPRI, r0
 800455c:	bc09      	pop	{r0, r3}
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	6808      	ldr	r0, [r1, #0]
 8004562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004566:	f01e 0f10 	tst.w	lr, #16
 800456a:	bf08      	it	eq
 800456c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004570:	f380 8809 	msr	PSP, r0
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst>:
 8004580:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	607b      	str	r3, [r7, #4]
}
 80045a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045a2:	f7fe fedf 	bl	8003364 <xTaskIncrementTick>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <xPortSysTickHandler+0x40>)
 80045ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	2300      	movs	r3, #0
 80045b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f383 8811 	msr	BASEPRI, r3
}
 80045be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <vPortSetupTimerInterrupt+0x34>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <vPortSetupTimerInterrupt+0x38>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <vPortSetupTimerInterrupt+0x3c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0a      	ldr	r2, [pc, #40]	; (800460c <vPortSetupTimerInterrupt+0x40>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	4a09      	ldr	r2, [pc, #36]	; (8004610 <vPortSetupTimerInterrupt+0x44>)
 80045ea:	3b01      	subs	r3, #1
 80045ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ee:	4b04      	ldr	r3, [pc, #16]	; (8004600 <vPortSetupTimerInterrupt+0x34>)
 80045f0:	2207      	movs	r2, #7
 80045f2:	601a      	str	r2, [r3, #0]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	e000e010 	.word	0xe000e010
 8004604:	e000e018 	.word	0xe000e018
 8004608:	20000000 	.word	0x20000000
 800460c:	10624dd3 	.word	0x10624dd3
 8004610:	e000e014 	.word	0xe000e014

08004614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004624 <vPortEnableVFP+0x10>
 8004618:	6801      	ldr	r1, [r0, #0]
 800461a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800461e:	6001      	str	r1, [r0, #0]
 8004620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004622:	bf00      	nop
 8004624:	e000ed88 	.word	0xe000ed88

08004628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800462e:	f3ef 8305 	mrs	r3, IPSR
 8004632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d914      	bls.n	8004664 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800463a:	4a17      	ldr	r2, [pc, #92]	; (8004698 <vPortValidateInterruptPriority+0x70>)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004644:	4b15      	ldr	r3, [pc, #84]	; (800469c <vPortValidateInterruptPriority+0x74>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	7afa      	ldrb	r2, [r7, #11]
 800464a:	429a      	cmp	r2, r3
 800464c:	d20a      	bcs.n	8004664 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	607b      	str	r3, [r7, #4]
}
 8004660:	bf00      	nop
 8004662:	e7fe      	b.n	8004662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <vPortValidateInterruptPriority+0x78>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800466c:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <vPortValidateInterruptPriority+0x7c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d90a      	bls.n	800468a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	603b      	str	r3, [r7, #0]
}
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <vPortValidateInterruptPriority+0x60>
	}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	e000e3f0 	.word	0xe000e3f0
 800469c:	20000d10 	.word	0x20000d10
 80046a0:	e000ed0c 	.word	0xe000ed0c
 80046a4:	20000d14 	.word	0x20000d14

080046a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046b4:	f7fe fd9a 	bl	80031ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046b8:	4b5b      	ldr	r3, [pc, #364]	; (8004828 <pvPortMalloc+0x180>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046c0:	f000 f920 	bl	8004904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046c4:	4b59      	ldr	r3, [pc, #356]	; (800482c <pvPortMalloc+0x184>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f040 8093 	bne.w	80047f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01d      	beq.n	8004714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80046d8:	2208      	movs	r2, #8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d014      	beq.n	8004714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f023 0307 	bic.w	r3, r3, #7
 80046f0:	3308      	adds	r3, #8
 80046f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <pvPortMalloc+0x6c>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	617b      	str	r3, [r7, #20]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d06e      	beq.n	80047f8 <pvPortMalloc+0x150>
 800471a:	4b45      	ldr	r3, [pc, #276]	; (8004830 <pvPortMalloc+0x188>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d869      	bhi.n	80047f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004724:	4b43      	ldr	r3, [pc, #268]	; (8004834 <pvPortMalloc+0x18c>)
 8004726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004728:	4b42      	ldr	r3, [pc, #264]	; (8004834 <pvPortMalloc+0x18c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800472e:	e004      	b.n	800473a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	d903      	bls.n	800474c <pvPortMalloc+0xa4>
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f1      	bne.n	8004730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800474c:	4b36      	ldr	r3, [pc, #216]	; (8004828 <pvPortMalloc+0x180>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004752:	429a      	cmp	r2, r3
 8004754:	d050      	beq.n	80047f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2208      	movs	r2, #8
 800475c:	4413      	add	r3, r2
 800475e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	2308      	movs	r3, #8
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	429a      	cmp	r2, r3
 8004776:	d91f      	bls.n	80047b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <pvPortMalloc+0xf8>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	613b      	str	r3, [r7, #16]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	1ad2      	subs	r2, r2, r3
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047b2:	69b8      	ldr	r0, [r7, #24]
 80047b4:	f000 f908 	bl	80049c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047b8:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <pvPortMalloc+0x188>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <pvPortMalloc+0x188>)
 80047c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047c6:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <pvPortMalloc+0x188>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <pvPortMalloc+0x190>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d203      	bcs.n	80047da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047d2:	4b17      	ldr	r3, [pc, #92]	; (8004830 <pvPortMalloc+0x188>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a18      	ldr	r2, [pc, #96]	; (8004838 <pvPortMalloc+0x190>)
 80047d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <pvPortMalloc+0x184>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047ee:	4b13      	ldr	r3, [pc, #76]	; (800483c <pvPortMalloc+0x194>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3301      	adds	r3, #1
 80047f4:	4a11      	ldr	r2, [pc, #68]	; (800483c <pvPortMalloc+0x194>)
 80047f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047f8:	f7fe fd06 	bl	8003208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <pvPortMalloc+0x174>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	60fb      	str	r3, [r7, #12]
}
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <pvPortMalloc+0x172>
	return pvReturn;
 800481c:	69fb      	ldr	r3, [r7, #28]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3728      	adds	r7, #40	; 0x28
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20004920 	.word	0x20004920
 800482c:	20004934 	.word	0x20004934
 8004830:	20004924 	.word	0x20004924
 8004834:	20004918 	.word	0x20004918
 8004838:	20004928 	.word	0x20004928
 800483c:	2000492c 	.word	0x2000492c

08004840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d04d      	beq.n	80048ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004852:	2308      	movs	r3, #8
 8004854:	425b      	negs	r3, r3
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4413      	add	r3, r2
 800485a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <vPortFree+0xb8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10a      	bne.n	8004884 <vPortFree+0x44>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	60fb      	str	r3, [r7, #12]
}
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <vPortFree+0x62>
	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	f383 8811 	msr	BASEPRI, r3
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	60bb      	str	r3, [r7, #8]
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <vPortFree+0xb8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01e      	beq.n	80048ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d11a      	bne.n	80048ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <vPortFree+0xb8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	401a      	ands	r2, r3
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048c8:	f7fe fc90 	bl	80031ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <vPortFree+0xbc>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4413      	add	r3, r2
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <vPortFree+0xbc>)
 80048d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048da:	6938      	ldr	r0, [r7, #16]
 80048dc:	f000 f874 	bl	80049c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <vPortFree+0xc0>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	4a06      	ldr	r2, [pc, #24]	; (8004900 <vPortFree+0xc0>)
 80048e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80048ea:	f7fe fc8d 	bl	8003208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048ee:	bf00      	nop
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20004934 	.word	0x20004934
 80048fc:	20004924 	.word	0x20004924
 8004900:	20004930 	.word	0x20004930

08004904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800490a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800490e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004910:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <prvHeapInit+0xac>)
 8004912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3307      	adds	r3, #7
 8004922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <prvHeapInit+0xac>)
 8004934:	4413      	add	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <prvHeapInit+0xb0>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004942:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <prvHeapInit+0xb0>)
 8004944:	2200      	movs	r2, #0
 8004946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	4413      	add	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004950:	2208      	movs	r2, #8
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0307 	bic.w	r3, r3, #7
 800495e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <prvHeapInit+0xb4>)
 8004964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <prvHeapInit+0xb4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <prvHeapInit+0xb4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	1ad2      	subs	r2, r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <prvHeapInit+0xb4>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <prvHeapInit+0xb8>)
 8004992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <prvHeapInit+0xbc>)
 800499a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <prvHeapInit+0xc0>)
 800499e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049a2:	601a      	str	r2, [r3, #0]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	20000d18 	.word	0x20000d18
 80049b4:	20004918 	.word	0x20004918
 80049b8:	20004920 	.word	0x20004920
 80049bc:	20004928 	.word	0x20004928
 80049c0:	20004924 	.word	0x20004924
 80049c4:	20004934 	.word	0x20004934

080049c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049d0:	4b28      	ldr	r3, [pc, #160]	; (8004a74 <prvInsertBlockIntoFreeList+0xac>)
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e002      	b.n	80049dc <prvInsertBlockIntoFreeList+0x14>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d8f7      	bhi.n	80049d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4413      	add	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d108      	bne.n	8004a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	441a      	add	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	441a      	add	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d118      	bne.n	8004a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <prvInsertBlockIntoFreeList+0xb0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d00d      	beq.n	8004a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	441a      	add	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e008      	b.n	8004a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <prvInsertBlockIntoFreeList+0xb0>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e003      	b.n	8004a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d002      	beq.n	8004a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20004918 	.word	0x20004918
 8004a78:	20004920 	.word	0x20004920

08004a7c <__libc_init_array>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	4d0d      	ldr	r5, [pc, #52]	; (8004ab4 <__libc_init_array+0x38>)
 8004a80:	4c0d      	ldr	r4, [pc, #52]	; (8004ab8 <__libc_init_array+0x3c>)
 8004a82:	1b64      	subs	r4, r4, r5
 8004a84:	10a4      	asrs	r4, r4, #2
 8004a86:	2600      	movs	r6, #0
 8004a88:	42a6      	cmp	r6, r4
 8004a8a:	d109      	bne.n	8004aa0 <__libc_init_array+0x24>
 8004a8c:	4d0b      	ldr	r5, [pc, #44]	; (8004abc <__libc_init_array+0x40>)
 8004a8e:	4c0c      	ldr	r4, [pc, #48]	; (8004ac0 <__libc_init_array+0x44>)
 8004a90:	f000 f82e 	bl	8004af0 <_init>
 8004a94:	1b64      	subs	r4, r4, r5
 8004a96:	10a4      	asrs	r4, r4, #2
 8004a98:	2600      	movs	r6, #0
 8004a9a:	42a6      	cmp	r6, r4
 8004a9c:	d105      	bne.n	8004aaa <__libc_init_array+0x2e>
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa4:	4798      	blx	r3
 8004aa6:	3601      	adds	r6, #1
 8004aa8:	e7ee      	b.n	8004a88 <__libc_init_array+0xc>
 8004aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aae:	4798      	blx	r3
 8004ab0:	3601      	adds	r6, #1
 8004ab2:	e7f2      	b.n	8004a9a <__libc_init_array+0x1e>
 8004ab4:	08004b90 	.word	0x08004b90
 8004ab8:	08004b90 	.word	0x08004b90
 8004abc:	08004b90 	.word	0x08004b90
 8004ac0:	08004b94 	.word	0x08004b94

08004ac4 <memcpy>:
 8004ac4:	440a      	add	r2, r1
 8004ac6:	4291      	cmp	r1, r2
 8004ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004acc:	d100      	bne.n	8004ad0 <memcpy+0xc>
 8004ace:	4770      	bx	lr
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ada:	4291      	cmp	r1, r2
 8004adc:	d1f9      	bne.n	8004ad2 <memcpy+0xe>
 8004ade:	bd10      	pop	{r4, pc}

08004ae0 <memset>:
 8004ae0:	4402      	add	r2, r0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d100      	bne.n	8004aea <memset+0xa>
 8004ae8:	4770      	bx	lr
 8004aea:	f803 1b01 	strb.w	r1, [r3], #1
 8004aee:	e7f9      	b.n	8004ae4 <memset+0x4>

08004af0 <_init>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	bf00      	nop
 8004af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af6:	bc08      	pop	{r3}
 8004af8:	469e      	mov	lr, r3
 8004afa:	4770      	bx	lr

08004afc <_fini>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr
