
20_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006588  08006588  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006588  08006588  00016588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006590  08006590  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006594  08006594  00016594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a20  20000074  0800660c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a94  0800660c  00024a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cef3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039af  00000000  00000000  0003cf97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00040948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  00041e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f5f  00000000  00000000  000431d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ef0  00000000  00000000  0005c12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099202  00000000  00000000  0007301f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ee8  00000000  00000000  0010c274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006458 	.word	0x08006458

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006458 	.word	0x08006458

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <adc_init>:
#include "stm32f4xx_hal.h"

void adc_init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0); // for enabling the GPIOA pin 0 for ADC pin. 0x00000001 = 0B
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <adc_init+0x4c>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <adc_init+0x4c>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= (1<<8); // setting the 8th bit for enabling the ADC.
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <adc_init+0x4c>)
 800058a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <adc_init+0x4c>)
 800058e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000592:	6453      	str	r3, [r2, #68]	; 0x44
	GPIOA->MODER |= 0xC;    // for setting the mode register for GPIOA pin 0. for analog mode.
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <adc_init+0x50>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <adc_init+0x50>)
 800059a:	f043 030c 	orr.w	r3, r3, #12
 800059e:	6013      	str	r3, [r2, #0]

	ADC1->CR2 = 0; 			// SW trigger (software trigger)
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <adc_init+0x54>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
	ADC1->SQR3 = 1;			// conversion sequence starts at ch 1  -> single channel
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <adc_init+0x54>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->SQR1 = 0;			// conversion sequence length 1
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <adc_init+0x54>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->CR2 = 1;			// enable ADC1
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <adc_init+0x54>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	609a      	str	r2, [r3, #8]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40012000 	.word	0x40012000

080005d0 <read_analog_sensor>:


uint32_t read_analog_sensor(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	ADC1->CR2 |= (1<<30);	// start conversion on regular channels.
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <read_analog_sensor+0x2c>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	4a08      	ldr	r2, [pc, #32]	; (80005fc <read_analog_sensor+0x2c>)
 80005da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80005de:	6093      	str	r3, [r2, #8]
	while(!(ADC1->SR & 2)){}	// check for the status register whether End of conversion is set or not.
 80005e0:	bf00      	nop
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <read_analog_sensor+0x2c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <read_analog_sensor+0x12>
	return ADC1->DR;		// return results.
 80005ee:	4b03      	ldr	r3, [pc, #12]	; (80005fc <read_analog_sensor+0x2c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40012000 	.word	0x40012000

08000600 <gpio_init>:
	NVIC_EnableIRQ(EXTI15_10_IRQn);
}


void gpio_init(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 4; 				// Enable GPIOC clock
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <gpio_init+0x1c>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <gpio_init+0x1c>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <read_digital_sensor>:

uint8_t read_digital_sensor(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	if( GPIOC->IDR & 0x2000)     // 0x2000  => 0b 0010 0000 0000 0000 => 13th bit (check for set or reset)
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <read_digital_sensor+0x20>)
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <read_digital_sensor+0x14>
	{
		return 1;
 8000630:	2301      	movs	r3, #1
 8000632:	e000      	b.n	8000636 <read_digital_sensor+0x16>
	}
	else
	{
		return 0;
 8000634:	2300      	movs	r3, #0
	}
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	40020800 	.word	0x40020800

08000644 <main>:
uint32_t sensor_value;

SemaphoreHandle_t xSerialSemaphore;

int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af02      	add	r7, sp, #8
  HAL_Init();
 800064a:	f000 fb79 	bl	8000d40 <HAL_Init>
  SystemClock_Config();
 800064e:	f000 f883 	bl	8000758 <SystemClock_Config>
  MX_GPIO_Init();
 8000652:	f000 f8ed 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_TX_Init();
 8000656:	f000 fb13 	bl	8000c80 <MX_USART2_UART_TX_Init>



  xSerialSemaphore = xSemaphoreCreateMutex();
 800065a:	2001      	movs	r0, #1
 800065c:	f002 fabd 	bl	8002bda <xQueueCreateMutex>
 8000660:	4603      	mov	r3, r0
 8000662:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <main+0x50>)
 8000664:	6013      	str	r3, [r2, #0]

  xTaskCreate(digital_sensor_tsk,
 8000666:	2300      	movs	r3, #0
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2302      	movs	r3, #2
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	4909      	ldr	r1, [pc, #36]	; (8000698 <main+0x54>)
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <main+0x58>)
 8000676:	f003 f832 	bl	80036de <xTaskCreate>
		  	  128,
			  NULL,
			  2,
			  NULL);

  xTaskCreate(analog_sensor_tsk,
 800067a:	2300      	movs	r3, #0
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2301      	movs	r3, #1
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	4906      	ldr	r1, [pc, #24]	; (80006a0 <main+0x5c>)
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <main+0x60>)
 800068a:	f003 f828 	bl	80036de <xTaskCreate>
		  	  128,
			  NULL,
			  1,
			  NULL);

  vTaskStartScheduler();
 800068e:	f003 f99f 	bl	80039d0 <vTaskStartScheduler>

  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x4e>
 8000694:	200049a8 	.word	0x200049a8
 8000698:	08006470 	.word	0x08006470
 800069c:	080006a9 	.word	0x080006a9
 80006a0:	0800647c 	.word	0x0800647c
 80006a4:	08000701 	.word	0x08000701

080006a8 <digital_sensor_tsk>:
  }
}


void digital_sensor_tsk(void *pvParams)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	gpio_init();
 80006b0:	f7ff ffa6 	bl	8000600 <gpio_init>
	while(1)
	{
		btn_state = read_digital_sensor();
 80006b4:	f7ff ffb4 	bl	8000620 <read_digital_sensor>
 80006b8:	4603      	mov	r3, r0
 80006ba:	461a      	mov	r2, r3
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <digital_sensor_tsk+0x4c>)
 80006be:	701a      	strb	r2, [r3, #0]

		// see if we can obtain or "Take" the serial semaphore.
		// If the semaphore is not avaialble, wait 5 tick of the scheduler to see if it becomes free.
		if(xSemaphoreTake(xSerialSemaphore, (TickType_t ) 5) == pdTRUE)
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <digital_sensor_tsk+0x50>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fd1a 	bl	8003100 <xQueueSemaphoreTake>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d10c      	bne.n	80006ec <digital_sensor_tsk+0x44>
		{
			printf("This button state is :%d \n\r", btn_state);
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <digital_sensor_tsk+0x4c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <digital_sensor_tsk+0x54>)
 80006da:	f004 ff67 	bl	80055ac <iprintf>
			xSemaphoreGive(xSerialSemaphore);  // now free or give the serial port to others.
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <digital_sensor_tsk+0x50>)
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	f002 fa90 	bl	8002c0c <xQueueGenericSend>
		}
		vTaskDelay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f003 f93b 	bl	8003968 <vTaskDelay>
		btn_state = read_digital_sensor();
 80006f2:	e7df      	b.n	80006b4 <digital_sensor_tsk+0xc>
 80006f4:	200049ac 	.word	0x200049ac
 80006f8:	200049a8 	.word	0x200049a8
 80006fc:	08006488 	.word	0x08006488

08000700 <analog_sensor_tsk>:
	}
}


void analog_sensor_tsk(void *pvParams)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	adc_init();
 8000708:	f7ff ff36 	bl	8000578 <adc_init>
	while(1)
	{
		sensor_value = read_analog_sensor();
 800070c:	f7ff ff60 	bl	80005d0 <read_analog_sensor>
 8000710:	4603      	mov	r3, r0
 8000712:	4a0e      	ldr	r2, [pc, #56]	; (800074c <analog_sensor_tsk+0x4c>)
 8000714:	6013      	str	r3, [r2, #0]

		if(xSemaphoreTake(xSerialSemaphore, (TickType_t ) 5) == pdTRUE)
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <analog_sensor_tsk+0x50>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fcef 	bl	8003100 <xQueueSemaphoreTake>
 8000722:	4603      	mov	r3, r0
 8000724:	2b01      	cmp	r3, #1
 8000726:	d10c      	bne.n	8000742 <analog_sensor_tsk+0x42>
		{
			printf("The sensor value is :%ld \n\r", sensor_value);
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <analog_sensor_tsk+0x4c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	4809      	ldr	r0, [pc, #36]	; (8000754 <analog_sensor_tsk+0x54>)
 8000730:	f004 ff3c 	bl	80055ac <iprintf>
			xSemaphoreGive(xSerialSemaphore);  // now free or give the serial port to others.
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <analog_sensor_tsk+0x50>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	2200      	movs	r2, #0
 800073c:	2100      	movs	r1, #0
 800073e:	f002 fa65 	bl	8002c0c <xQueueGenericSend>
		}
		vTaskDelay(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f003 f910 	bl	8003968 <vTaskDelay>
		sensor_value = read_analog_sensor();
 8000748:	e7e0      	b.n	800070c <analog_sensor_tsk+0xc>
 800074a:	bf00      	nop
 800074c:	200049b0 	.word	0x200049b0
 8000750:	200049a8 	.word	0x200049a8
 8000754:	080064a4 	.word	0x080064a4

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f004 ff18 	bl	800559c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <SystemClock_Config+0xd0>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a28      	ldr	r2, [pc, #160]	; (8000828 <SystemClock_Config+0xd0>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b26      	ldr	r3, [pc, #152]	; (8000828 <SystemClock_Config+0xd0>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <SystemClock_Config+0xd4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <SystemClock_Config+0xd4>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2310      	movs	r3, #16
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007cc:	2310      	movs	r3, #16
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007da:	2307      	movs	r3, #7
 80007dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fd6e 	bl	80012c4 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ee:	f000 f89f 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2102      	movs	r1, #2
 800080e:	4618      	mov	r0, r3
 8000810:	f000 ffd0 	bl	80017b4 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800081a:	f000 f889 	bl	8000930 <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	; 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2c      	ldr	r2, [pc, #176]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a25      	ldr	r2, [pc, #148]	; (8000900 <MX_GPIO_Init+0xd0>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <MX_GPIO_Init+0xd0>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	4812      	ldr	r0, [pc, #72]	; (8000904 <MX_GPIO_Init+0xd4>)
 80008bc:	f000 fce8 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_GPIO_Init+0xd8>)
 80008d8:	f000 fb56 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008dc:	2320      	movs	r3, #32
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_GPIO_Init+0xd4>)
 80008f4:	f000 fb48 	bl	8000f88 <HAL_GPIO_Init>

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020800 	.word	0x40020800

0800090c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091e:	f000 fa31 	bl	8000d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40010000 	.word	0x40010000

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_MspInit+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <HAL_MspInit+0x54>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_MspInit+0x54>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_MspInit+0x54>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_MspInit+0x54>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_MspInit+0x54>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	f06f 0001 	mvn.w	r0, #1
 8000982:	f000 fad7 	bl	8000f34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <HAL_UART_MspInit+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d12b      	bne.n	8000a0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ee:	230c      	movs	r3, #12
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fe:	2307      	movs	r3, #7
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_UART_MspInit+0x8c>)
 8000a0a:	f000 fabd 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40004400 	.word	0x40004400
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2019      	movs	r0, #25
 8000a3a:	f000 fa7b 	bl	8000f34 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a3e:	2019      	movs	r0, #25
 8000a40:	f000 fa94 	bl	8000f6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6453      	str	r3, [r2, #68]	; 0x44
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_InitTick+0xa0>)
 8000a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a60:	f107 0210 	add.w	r2, r7, #16
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f89e 	bl	8001bac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a70:	f001 f888 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 8000a74:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a78:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <HAL_InitTick+0xa4>)
 8000a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7e:	0c9b      	lsrs	r3, r3, #18
 8000a80:	3b01      	subs	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_InitTick+0xa8>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <HAL_InitTick+0xac>)
 8000a88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_InitTick+0xa8>)
 8000a8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_InitTick+0xa8>)
 8000a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_InitTick+0xa8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_InitTick+0xa8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <HAL_InitTick+0xa8>)
 8000aa6:	f001 f8b3 	bl	8001c10 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d104      	bne.n	8000aba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ab0:	4806      	ldr	r0, [pc, #24]	; (8000acc <HAL_InitTick+0xa8>)
 8000ab2:	f001 f907 	bl	8001cc4 <HAL_TIM_Base_Start_IT>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3730      	adds	r7, #48	; 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	431bde83 	.word	0x431bde83
 8000acc:	200049b4 	.word	0x200049b4
 8000ad0:	40010000 	.word	0x40010000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b06:	f001 f93f 	bl	8001d88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200049b4 	.word	0x200049b4

08000b14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	e00a      	b.n	8000b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b26:	f3af 8000 	nop.w
 8000b2a:	4601      	mov	r1, r0
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	60ba      	str	r2, [r7, #8]
 8000b32:	b2ca      	uxtb	r2, r1
 8000b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbf0      	blt.n	8000b26 <_read+0x12>
	}

return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	e009      	b.n	8000b74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f8ad 	bl	8000cc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf1      	blt.n	8000b60 <_write+0x12>
	}
	return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_close>:

int _close(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bae:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_isatty>:

int _isatty(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f004 fc84 	bl	800552c <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20018000 	.word	0x20018000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	20000090 	.word	0x20000090
 8000c58:	20004a98 	.word	0x20004a98

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <MX_USART2_UART_TX_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_TX_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART2_UART_TX_Init+0x40>)
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <MX_USART2_UART_TX_Init+0x44>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <MX_USART2_UART_TX_Init+0x40>)
 8000c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART2_UART_TX_Init+0x40>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART2_UART_TX_Init+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART2_UART_TX_Init+0x40>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART2_UART_TX_Init+0x40>)
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <MX_USART2_UART_TX_Init+0x40>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <MX_USART2_UART_TX_Init+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb6:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <MX_USART2_UART_TX_Init+0x40>)
 8000cb8:	f001 fa2a 	bl	8002110 <HAL_UART_Init>
  {
	  // not handling an error here.
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200049fc 	.word	0x200049fc
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <__io_putchar>:
	return ch;
}


int __io_putchar(int ch)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000cd0:	1d39      	adds	r1, r7, #4
 8000cd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <__io_putchar+0x20>)
 8000cda:	f001 fa66 	bl	80021aa <HAL_UART_Transmit>
	// USART2_write(ch);
	return ch;
 8000cde:	687b      	ldr	r3, [r7, #4]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200049fc 	.word	0x200049fc

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d08:	4c0b      	ldr	r4, [pc, #44]	; (8000d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d16:	f7ff ffa1 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f004 fc0d 	bl	8005538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fc91 	bl	8000644 <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d30:	08006598 	.word	0x08006598
  ldr r2, =_sbss
 8000d34:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d38:	20004a94 	.word	0x20004a94

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f8d8 	bl	8000f1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f7ff fe58 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fde2 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20004a40 	.word	0x20004a40

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20004a40 	.word	0x20004a40

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	; (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff4c 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f46:	f7ff ff61 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	6978      	ldr	r0, [r7, #20]
 8000f52:	f7ff ffb1 	bl	8000eb8 <NVIC_EncodePriority>
 8000f56:	4602      	mov	r2, r0
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff80 	bl	8000e64 <__NVIC_SetPriority>
}
 8000f64:	bf00      	nop
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff54 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e159      	b.n	8001258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8148 	bne.w	8001252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d130      	bne.n	800103c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d017      	beq.n	8001078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d123      	bne.n	80010cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	69b9      	ldr	r1, [r7, #24]
 80010c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0203 	and.w	r2, r3, #3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80a2 	beq.w	8001252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b57      	ldr	r3, [pc, #348]	; (8001270 <HAL_GPIO_Init+0x2e8>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	4a56      	ldr	r2, [pc, #344]	; (8001270 <HAL_GPIO_Init+0x2e8>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b54      	ldr	r3, [pc, #336]	; (8001270 <HAL_GPIO_Init+0x2e8>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112a:	4a52      	ldr	r2, [pc, #328]	; (8001274 <HAL_GPIO_Init+0x2ec>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a49      	ldr	r2, [pc, #292]	; (8001278 <HAL_GPIO_Init+0x2f0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d019      	beq.n	800118a <HAL_GPIO_Init+0x202>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a48      	ldr	r2, [pc, #288]	; (800127c <HAL_GPIO_Init+0x2f4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0x1fe>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a47      	ldr	r2, [pc, #284]	; (8001280 <HAL_GPIO_Init+0x2f8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d00d      	beq.n	8001182 <HAL_GPIO_Init+0x1fa>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a46      	ldr	r2, [pc, #280]	; (8001284 <HAL_GPIO_Init+0x2fc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d007      	beq.n	800117e <HAL_GPIO_Init+0x1f6>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a45      	ldr	r2, [pc, #276]	; (8001288 <HAL_GPIO_Init+0x300>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d101      	bne.n	800117a <HAL_GPIO_Init+0x1f2>
 8001176:	2304      	movs	r3, #4
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x204>
 800117a:	2307      	movs	r3, #7
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x204>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x204>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x204>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x204>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	; (8001274 <HAL_GPIO_Init+0x2ec>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <HAL_GPIO_Init+0x304>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ce:	4a2f      	ldr	r2, [pc, #188]	; (800128c <HAL_GPIO_Init+0x304>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_GPIO_Init+0x304>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f8:	4a24      	ldr	r2, [pc, #144]	; (800128c <HAL_GPIO_Init+0x304>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_GPIO_Init+0x304>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a1a      	ldr	r2, [pc, #104]	; (800128c <HAL_GPIO_Init+0x304>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_GPIO_Init+0x304>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_GPIO_Init+0x304>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f aea2 	bls.w	8000fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e264      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	4ba3      	ldr	r3, [pc, #652]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d00c      	beq.n	8001308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4ba0      	ldr	r3, [pc, #640]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d112      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b9d      	ldr	r3, [pc, #628]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001306:	d10b      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4b99      	ldr	r3, [pc, #612]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05b      	beq.n	80013cc <HAL_RCC_OscConfig+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d157      	bne.n	80013cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e23f      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x74>
 800132a:	4b91      	ldr	r3, [pc, #580]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a90      	ldr	r2, [pc, #576]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b8b      	ldr	r3, [pc, #556]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a8a      	ldr	r2, [pc, #552]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a87      	ldr	r2, [pc, #540]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 800135c:	4b84      	ldr	r3, [pc, #528]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a83      	ldr	r2, [pc, #524]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b81      	ldr	r3, [pc, #516]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a80      	ldr	r2, [pc, #512]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fd16 	bl	8000dac <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fd12 	bl	8000dac <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e204      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b76      	ldr	r3, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xc0>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fd02 	bl	8000dac <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fcfe 	bl	8000dac <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1f0      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0xe8>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013da:	4b65      	ldr	r3, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b62      	ldr	r3, [pc, #392]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1c4      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b56      	ldr	r3, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4952      	ldr	r1, [pc, #328]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b4f      	ldr	r3, [pc, #316]	; (8001574 <HAL_RCC_OscConfig+0x2b0>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fcb7 	bl	8000dac <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fcb3 	bl	8000dac <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1a5      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4940      	ldr	r1, [pc, #256]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <HAL_RCC_OscConfig+0x2b0>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc96 	bl	8000dac <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc92 	bl	8000dac <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e184      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d030      	beq.n	8001510 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_OscConfig+0x2b4>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc76 	bl	8000dac <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc72 	bl	8000dac <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e164      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x200>
 80014e2:	e015      	b.n	8001510 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_RCC_OscConfig+0x2b4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc5f 	bl	8000dac <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc5b 	bl	8000dac <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e14d      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a0 	beq.w	800165e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d121      	bne.n	800159e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fc21 	bl	8000dac <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e011      	b.n	8001592 <HAL_RCC_OscConfig+0x2ce>
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	42470000 	.word	0x42470000
 8001578:	42470e80 	.word	0x42470e80
 800157c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001580:	f7ff fc14 	bl	8000dac <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e106      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001592:	4b85      	ldr	r3, [pc, #532]	; (80017a8 <HAL_RCC_OscConfig+0x4e4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2f0>
 80015a6:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a80      	ldr	r2, [pc, #512]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	e01c      	b.n	80015ee <HAL_RCC_OscConfig+0x32a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x312>
 80015bc:	4b7b      	ldr	r3, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a7a      	ldr	r2, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
 80015c8:	4b78      	ldr	r3, [pc, #480]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	4a77      	ldr	r2, [pc, #476]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	; 0x70
 80015d4:	e00b      	b.n	80015ee <HAL_RCC_OscConfig+0x32a>
 80015d6:	4b75      	ldr	r3, [pc, #468]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a74      	ldr	r2, [pc, #464]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	4b72      	ldr	r3, [pc, #456]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	4a71      	ldr	r2, [pc, #452]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fbd9 	bl	8000dac <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fbd5 	bl	8000dac <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0c5      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ee      	beq.n	80015fe <HAL_RCC_OscConfig+0x33a>
 8001620:	e014      	b.n	800164c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fbc3 	bl	8000dac <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fbbf 	bl	8000dac <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0af      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	4b5a      	ldr	r3, [pc, #360]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d105      	bne.n	800165e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001652:	4b56      	ldr	r3, [pc, #344]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a55      	ldr	r2, [pc, #340]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 8001658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 809b 	beq.w	800179e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d05c      	beq.n	800172e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d141      	bne.n	8001700 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167c:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fb93 	bl	8000dac <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fb8f 	bl	8000dac <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e081      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169c:	4b43      	ldr	r3, [pc, #268]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	019b      	lsls	r3, r3, #6
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	3b01      	subs	r3, #1
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	061b      	lsls	r3, r3, #24
 80016cc:	4937      	ldr	r1, [pc, #220]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb68 	bl	8000dac <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff fb64 	bl	8000dac <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e056      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x41c>
 80016fe:	e04e      	b.n	800179e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fb51 	bl	8000dac <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fb4d 	bl	8000dac <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e03f      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f0      	bne.n	800170e <HAL_RCC_OscConfig+0x44a>
 800172c:	e037      	b.n	800179e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e032      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d028      	beq.n	800179a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d121      	bne.n	800179a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d11a      	bne.n	800179a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800176a:	4013      	ands	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001770:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001772:	4293      	cmp	r3, r2
 8001774:	d111      	bne.n	800179a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d107      	bne.n	800179a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40007000 	.word	0x40007000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	42470060 	.word	0x42470060

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0cc      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d90c      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a52      	ldr	r2, [pc, #328]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e067      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4934      	ldr	r1, [pc, #208]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff fa82 	bl	8000dac <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff fa7e 	bl	8000dac <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d20c      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f821 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800193e:	4602      	mov	r2, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	490a      	ldr	r1, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	5ccb      	ldrb	r3, [r1, r3]
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f862 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00
 8001970:	40023800 	.word	0x40023800
 8001974:	080064d8 	.word	0x080064d8
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001998:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d00d      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x40>
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	f200 80bd 	bhi.w	8001b24 <HAL_RCC_GetSysClockFreq+0x1a4>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x3a>
 80019b2:	e0b7      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019b6:	60bb      	str	r3, [r7, #8]
       break;
 80019b8:	e0b7      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b61      	ldr	r3, [pc, #388]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019bc:	60bb      	str	r3, [r7, #8]
      break;
 80019be:	e0b4      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04d      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	461a      	mov	r2, r3
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	ea02 0800 	and.w	r8, r2, r0
 80019ee:	ea03 0901 	and.w	r9, r3, r1
 80019f2:	4640      	mov	r0, r8
 80019f4:	4649      	mov	r1, r9
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	014b      	lsls	r3, r1, #5
 8001a00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a04:	0142      	lsls	r2, r0, #5
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	ebb0 0008 	subs.w	r0, r0, r8
 8001a0e:	eb61 0109 	sbc.w	r1, r1, r9
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	018b      	lsls	r3, r1, #6
 8001a1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a20:	0182      	lsls	r2, r0, #6
 8001a22:	1a12      	subs	r2, r2, r0
 8001a24:	eb63 0301 	sbc.w	r3, r3, r1
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	00d9      	lsls	r1, r3, #3
 8001a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a36:	00d0      	lsls	r0, r2, #3
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	eb12 0208 	adds.w	r2, r2, r8
 8001a40:	eb43 0309 	adc.w	r3, r3, r9
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	0259      	lsls	r1, r3, #9
 8001a4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a52:	0250      	lsls	r0, r2, #9
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	f7fe fc0c 	bl	8000280 <__aeabi_uldivmod>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e04a      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	099b      	lsrs	r3, r3, #6
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a82:	f04f 0100 	mov.w	r1, #0
 8001a86:	ea02 0400 	and.w	r4, r2, r0
 8001a8a:	ea03 0501 	and.w	r5, r3, r1
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4629      	mov	r1, r5
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	014b      	lsls	r3, r1, #5
 8001a9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001aa0:	0142      	lsls	r2, r0, #5
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	1b00      	subs	r0, r0, r4
 8001aa8:	eb61 0105 	sbc.w	r1, r1, r5
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	018b      	lsls	r3, r1, #6
 8001ab6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aba:	0182      	lsls	r2, r0, #6
 8001abc:	1a12      	subs	r2, r2, r0
 8001abe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac2:	f04f 0000 	mov.w	r0, #0
 8001ac6:	f04f 0100 	mov.w	r1, #0
 8001aca:	00d9      	lsls	r1, r3, #3
 8001acc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ad0:	00d0      	lsls	r0, r2, #3
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	1912      	adds	r2, r2, r4
 8001ad8:	eb45 0303 	adc.w	r3, r5, r3
 8001adc:	f04f 0000 	mov.w	r0, #0
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	0299      	lsls	r1, r3, #10
 8001ae6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001aea:	0290      	lsls	r0, r2, #10
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	f7fe fbc0 	bl	8000280 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	60bb      	str	r3, [r7, #8]
      break;
 8001b22:	e002      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b26:	60bb      	str	r3, [r7, #8]
      break;
 8001b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	00f42400 	.word	0x00f42400
 8001b40:	007a1200 	.word	0x007a1200

08001b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0a9b      	lsrs	r3, r3, #10
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	080064e8 	.word	0x080064e8

08001b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b88:	f7ff ffdc 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0b5b      	lsrs	r3, r3, #13
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	; (8001ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	080064e8 	.word	0x080064e8

08001bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	220f      	movs	r2, #15
 8001bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0203 	and.w	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <HAL_RCC_GetClockConfig+0x5c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	08db      	lsrs	r3, r3, #3
 8001be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <HAL_RCC_GetClockConfig+0x60>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0207 	and.w	r2, r3, #7
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e041      	b.n	8001ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f839 	bl	8001cae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 f9ca 	bl	8001fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d001      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e044      	b.n	8001d66 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d018      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x6c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d013      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x6c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1a      	ldr	r2, [pc, #104]	; (8001d78 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00e      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x6c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_TIM_Base_Start_IT+0xb8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x6c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x6c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a16      	ldr	r2, [pc, #88]	; (8001d84 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d111      	bne.n	8001d54 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d010      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d52:	e007      	b.n	8001d64 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40010000 	.word	0x40010000
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40000800 	.word	0x40000800
 8001d80:	40000c00 	.word	0x40000c00
 8001d84:	40014000 	.word	0x40014000

08001d88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d122      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d11b      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0202 	mvn.w	r2, #2
 8001db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8ee 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8e0 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8f1 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d122      	bne.n	8001e38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d11b      	bne.n	8001e38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0204 	mvn.w	r2, #4
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8c4 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8b6 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8c7 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d122      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d11b      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0208 	mvn.w	r2, #8
 8001e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2204      	movs	r2, #4
 8001e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f89a 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001e78:	e005      	b.n	8001e86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f88c 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f89d 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d122      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0210 	mvn.w	r2, #16
 8001eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f870 	bl	8001fac <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f862 	bl	8001f98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f873 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d10e      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d107      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0201 	mvn.w	r2, #1
 8001f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fd00 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b80      	cmp	r3, #128	; 0x80
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f24:	2b80      	cmp	r3, #128	; 0x80
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8e2 	bl	80020fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d10e      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f50:	2b40      	cmp	r3, #64	; 0x40
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f838 	bl	8001fd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d107      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0220 	mvn.w	r2, #32
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8ac 	bl	80020e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a34      	ldr	r2, [pc, #208]	; (80020cc <TIM_Base_SetConfig+0xe4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00f      	beq.n	8002020 <TIM_Base_SetConfig+0x38>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002006:	d00b      	beq.n	8002020 <TIM_Base_SetConfig+0x38>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <TIM_Base_SetConfig+0xe8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d007      	beq.n	8002020 <TIM_Base_SetConfig+0x38>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a30      	ldr	r2, [pc, #192]	; (80020d4 <TIM_Base_SetConfig+0xec>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <TIM_Base_SetConfig+0x38>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <TIM_Base_SetConfig+0xf0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d108      	bne.n	8002032 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a25      	ldr	r2, [pc, #148]	; (80020cc <TIM_Base_SetConfig+0xe4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01b      	beq.n	8002072 <TIM_Base_SetConfig+0x8a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002040:	d017      	beq.n	8002072 <TIM_Base_SetConfig+0x8a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <TIM_Base_SetConfig+0xe8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <TIM_Base_SetConfig+0x8a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <TIM_Base_SetConfig+0xec>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00f      	beq.n	8002072 <TIM_Base_SetConfig+0x8a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <TIM_Base_SetConfig+0xf0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00b      	beq.n	8002072 <TIM_Base_SetConfig+0x8a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <TIM_Base_SetConfig+0xf4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <TIM_Base_SetConfig+0x8a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <TIM_Base_SetConfig+0xf8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d003      	beq.n	8002072 <TIM_Base_SetConfig+0x8a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <TIM_Base_SetConfig+0xfc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d108      	bne.n	8002084 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <TIM_Base_SetConfig+0xe4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d103      	bne.n	80020b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	615a      	str	r2, [r3, #20]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40000400 	.word	0x40000400
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40014000 	.word	0x40014000
 80020e0:	40014400 	.word	0x40014400
 80020e4:	40014800 	.word	0x40014800

080020e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e03f      	b.n	80021a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fc2c 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	; 0x24
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f929 	bl	80023ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b08a      	sub	sp, #40	; 0x28
 80021ae:	af02      	add	r7, sp, #8
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d17c      	bne.n	80022c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_UART_Transmit+0x2c>
 80021d0:	88fb      	ldrh	r3, [r7, #6]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e075      	b.n	80022c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_UART_Transmit+0x3e>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e06e      	b.n	80022c6 <HAL_UART_Transmit+0x11c>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2221      	movs	r2, #33	; 0x21
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021fe:	f7fe fdd5 	bl	8000dac <HAL_GetTick>
 8002202:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002218:	d108      	bne.n	800222c <HAL_UART_Transmit+0x82>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d104      	bne.n	800222c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	e003      	b.n	8002234 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800223c:	e02a      	b.n	8002294 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2200      	movs	r2, #0
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f840 	bl	80022ce <UART_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e036      	b.n	80022c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10b      	bne.n	8002276 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800226c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	3302      	adds	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	e007      	b.n	8002286 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	3301      	adds	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1cf      	bne.n	800223e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2200      	movs	r2, #0
 80022a6:	2140      	movs	r1, #64	; 0x40
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f810 	bl	80022ce <UART_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e006      	b.n	80022c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e000      	b.n	80022c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
  }
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b090      	sub	sp, #64	; 0x40
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	4613      	mov	r3, r2
 80022dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022de:	e050      	b.n	8002382 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e6:	d04c      	beq.n	8002382 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <UART_WaitOnFlagUntilTimeout+0x30>
 80022ee:	f7fe fd5d 	bl	8000dac <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d241      	bcs.n	8002382 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	330c      	adds	r3, #12
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	e853 3f00 	ldrex	r3, [r3]
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	330c      	adds	r3, #12
 800231c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800231e:	637a      	str	r2, [r7, #52]	; 0x34
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002326:	e841 2300 	strex	r3, r2, [r1]
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e5      	bne.n	80022fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3314      	adds	r3, #20
 8002338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	e853 3f00 	ldrex	r3, [r3]
 8002340:	613b      	str	r3, [r7, #16]
   return(result);
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	63bb      	str	r3, [r7, #56]	; 0x38
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3314      	adds	r3, #20
 8002350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002352:	623a      	str	r2, [r7, #32]
 8002354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002356:	69f9      	ldr	r1, [r7, #28]
 8002358:	6a3a      	ldr	r2, [r7, #32]
 800235a:	e841 2300 	strex	r3, r2, [r1]
 800235e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1e5      	bne.n	8002332 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e00f      	b.n	80023a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4013      	ands	r3, r2
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	429a      	cmp	r2, r3
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	429a      	cmp	r2, r3
 800239e:	d09f      	beq.n	80022e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3740      	adds	r7, #64	; 0x40
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b0:	b09f      	sub	sp, #124	; 0x7c
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c2:	68d9      	ldr	r1, [r3, #12]
 80023c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	ea40 0301 	orr.w	r3, r0, r1
 80023cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	431a      	orrs	r2, r3
 80023de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80023e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023f0:	f021 010c 	bic.w	r1, r1, #12
 80023f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023fa:	430b      	orrs	r3, r1
 80023fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240a:	6999      	ldr	r1, [r3, #24]
 800240c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	ea40 0301 	orr.w	r3, r0, r1
 8002414:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4bc5      	ldr	r3, [pc, #788]	; (8002730 <UART_SetConfig+0x384>)
 800241c:	429a      	cmp	r2, r3
 800241e:	d004      	beq.n	800242a <UART_SetConfig+0x7e>
 8002420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4bc3      	ldr	r3, [pc, #780]	; (8002734 <UART_SetConfig+0x388>)
 8002426:	429a      	cmp	r2, r3
 8002428:	d103      	bne.n	8002432 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800242a:	f7ff fbab 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
 800242e:	6778      	str	r0, [r7, #116]	; 0x74
 8002430:	e002      	b.n	8002438 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002432:	f7ff fb93 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 8002436:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002440:	f040 80b6 	bne.w	80025b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002446:	461c      	mov	r4, r3
 8002448:	f04f 0500 	mov.w	r5, #0
 800244c:	4622      	mov	r2, r4
 800244e:	462b      	mov	r3, r5
 8002450:	1891      	adds	r1, r2, r2
 8002452:	6439      	str	r1, [r7, #64]	; 0x40
 8002454:	415b      	adcs	r3, r3
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
 8002458:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800245c:	1912      	adds	r2, r2, r4
 800245e:	eb45 0303 	adc.w	r3, r5, r3
 8002462:	f04f 0000 	mov.w	r0, #0
 8002466:	f04f 0100 	mov.w	r1, #0
 800246a:	00d9      	lsls	r1, r3, #3
 800246c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002470:	00d0      	lsls	r0, r2, #3
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	1911      	adds	r1, r2, r4
 8002478:	6639      	str	r1, [r7, #96]	; 0x60
 800247a:	416b      	adcs	r3, r5
 800247c:	667b      	str	r3, [r7, #100]	; 0x64
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	461a      	mov	r2, r3
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	1891      	adds	r1, r2, r2
 800248a:	63b9      	str	r1, [r7, #56]	; 0x38
 800248c:	415b      	adcs	r3, r3
 800248e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002490:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002494:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002498:	f7fd fef2 	bl	8000280 <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4ba5      	ldr	r3, [pc, #660]	; (8002738 <UART_SetConfig+0x38c>)
 80024a2:	fba3 2302 	umull	r2, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	011e      	lsls	r6, r3, #4
 80024aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ac:	461c      	mov	r4, r3
 80024ae:	f04f 0500 	mov.w	r5, #0
 80024b2:	4622      	mov	r2, r4
 80024b4:	462b      	mov	r3, r5
 80024b6:	1891      	adds	r1, r2, r2
 80024b8:	6339      	str	r1, [r7, #48]	; 0x30
 80024ba:	415b      	adcs	r3, r3
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
 80024be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024c2:	1912      	adds	r2, r2, r4
 80024c4:	eb45 0303 	adc.w	r3, r5, r3
 80024c8:	f04f 0000 	mov.w	r0, #0
 80024cc:	f04f 0100 	mov.w	r1, #0
 80024d0:	00d9      	lsls	r1, r3, #3
 80024d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024d6:	00d0      	lsls	r0, r2, #3
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	1911      	adds	r1, r2, r4
 80024de:	65b9      	str	r1, [r7, #88]	; 0x58
 80024e0:	416b      	adcs	r3, r5
 80024e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	461a      	mov	r2, r3
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	1891      	adds	r1, r2, r2
 80024f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80024f2:	415b      	adcs	r3, r3
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80024fe:	f7fd febf 	bl	8000280 <__aeabi_uldivmod>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4b8c      	ldr	r3, [pc, #560]	; (8002738 <UART_SetConfig+0x38c>)
 8002508:	fba3 1302 	umull	r1, r3, r3, r2
 800250c:	095b      	lsrs	r3, r3, #5
 800250e:	2164      	movs	r1, #100	; 0x64
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	3332      	adds	r3, #50	; 0x32
 800251a:	4a87      	ldr	r2, [pc, #540]	; (8002738 <UART_SetConfig+0x38c>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002528:	441e      	add	r6, r3
 800252a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252c:	4618      	mov	r0, r3
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	1894      	adds	r4, r2, r2
 8002538:	623c      	str	r4, [r7, #32]
 800253a:	415b      	adcs	r3, r3
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
 800253e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002542:	1812      	adds	r2, r2, r0
 8002544:	eb41 0303 	adc.w	r3, r1, r3
 8002548:	f04f 0400 	mov.w	r4, #0
 800254c:	f04f 0500 	mov.w	r5, #0
 8002550:	00dd      	lsls	r5, r3, #3
 8002552:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002556:	00d4      	lsls	r4, r2, #3
 8002558:	4622      	mov	r2, r4
 800255a:	462b      	mov	r3, r5
 800255c:	1814      	adds	r4, r2, r0
 800255e:	653c      	str	r4, [r7, #80]	; 0x50
 8002560:	414b      	adcs	r3, r1
 8002562:	657b      	str	r3, [r7, #84]	; 0x54
 8002564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	461a      	mov	r2, r3
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	1891      	adds	r1, r2, r2
 8002570:	61b9      	str	r1, [r7, #24]
 8002572:	415b      	adcs	r3, r3
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800257e:	f7fd fe7f 	bl	8000280 <__aeabi_uldivmod>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4b6c      	ldr	r3, [pc, #432]	; (8002738 <UART_SetConfig+0x38c>)
 8002588:	fba3 1302 	umull	r1, r3, r3, r2
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	2164      	movs	r1, #100	; 0x64
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	3332      	adds	r3, #50	; 0x32
 800259a:	4a67      	ldr	r2, [pc, #412]	; (8002738 <UART_SetConfig+0x38c>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	f003 0207 	and.w	r2, r3, #7
 80025a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4432      	add	r2, r6
 80025ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025ae:	e0b9      	b.n	8002724 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b2:	461c      	mov	r4, r3
 80025b4:	f04f 0500 	mov.w	r5, #0
 80025b8:	4622      	mov	r2, r4
 80025ba:	462b      	mov	r3, r5
 80025bc:	1891      	adds	r1, r2, r2
 80025be:	6139      	str	r1, [r7, #16]
 80025c0:	415b      	adcs	r3, r3
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025c8:	1912      	adds	r2, r2, r4
 80025ca:	eb45 0303 	adc.w	r3, r5, r3
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	00d9      	lsls	r1, r3, #3
 80025d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025dc:	00d0      	lsls	r0, r2, #3
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	eb12 0804 	adds.w	r8, r2, r4
 80025e6:	eb43 0905 	adc.w	r9, r3, r5
 80025ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f04f 0100 	mov.w	r1, #0
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	008b      	lsls	r3, r1, #2
 80025fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002602:	0082      	lsls	r2, r0, #2
 8002604:	4640      	mov	r0, r8
 8002606:	4649      	mov	r1, r9
 8002608:	f7fd fe3a 	bl	8000280 <__aeabi_uldivmod>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4b49      	ldr	r3, [pc, #292]	; (8002738 <UART_SetConfig+0x38c>)
 8002612:	fba3 2302 	umull	r2, r3, r3, r2
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	011e      	lsls	r6, r3, #4
 800261a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261c:	4618      	mov	r0, r3
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	1894      	adds	r4, r2, r2
 8002628:	60bc      	str	r4, [r7, #8]
 800262a:	415b      	adcs	r3, r3
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002632:	1812      	adds	r2, r2, r0
 8002634:	eb41 0303 	adc.w	r3, r1, r3
 8002638:	f04f 0400 	mov.w	r4, #0
 800263c:	f04f 0500 	mov.w	r5, #0
 8002640:	00dd      	lsls	r5, r3, #3
 8002642:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002646:	00d4      	lsls	r4, r2, #3
 8002648:	4622      	mov	r2, r4
 800264a:	462b      	mov	r3, r5
 800264c:	1814      	adds	r4, r2, r0
 800264e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002650:	414b      	adcs	r3, r1
 8002652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4618      	mov	r0, r3
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	008b      	lsls	r3, r1, #2
 8002668:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800266c:	0082      	lsls	r2, r0, #2
 800266e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002672:	f7fd fe05 	bl	8000280 <__aeabi_uldivmod>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <UART_SetConfig+0x38c>)
 800267c:	fba3 1302 	umull	r1, r3, r3, r2
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	2164      	movs	r1, #100	; 0x64
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	3332      	adds	r3, #50	; 0x32
 800268e:	4a2a      	ldr	r2, [pc, #168]	; (8002738 <UART_SetConfig+0x38c>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800269a:	441e      	add	r6, r3
 800269c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800269e:	4618      	mov	r0, r3
 80026a0:	f04f 0100 	mov.w	r1, #0
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	1894      	adds	r4, r2, r2
 80026aa:	603c      	str	r4, [r7, #0]
 80026ac:	415b      	adcs	r3, r3
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026b4:	1812      	adds	r2, r2, r0
 80026b6:	eb41 0303 	adc.w	r3, r1, r3
 80026ba:	f04f 0400 	mov.w	r4, #0
 80026be:	f04f 0500 	mov.w	r5, #0
 80026c2:	00dd      	lsls	r5, r3, #3
 80026c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026c8:	00d4      	lsls	r4, r2, #3
 80026ca:	4622      	mov	r2, r4
 80026cc:	462b      	mov	r3, r5
 80026ce:	eb12 0a00 	adds.w	sl, r2, r0
 80026d2:	eb43 0b01 	adc.w	fp, r3, r1
 80026d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	008b      	lsls	r3, r1, #2
 80026ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026ee:	0082      	lsls	r2, r0, #2
 80026f0:	4650      	mov	r0, sl
 80026f2:	4659      	mov	r1, fp
 80026f4:	f7fd fdc4 	bl	8000280 <__aeabi_uldivmod>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <UART_SetConfig+0x38c>)
 80026fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2164      	movs	r1, #100	; 0x64
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	3332      	adds	r3, #50	; 0x32
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <UART_SetConfig+0x38c>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	f003 020f 	and.w	r2, r3, #15
 800271c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4432      	add	r2, r6
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	377c      	adds	r7, #124	; 0x7c
 8002728:	46bd      	mov	sp, r7
 800272a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800272e:	bf00      	nop
 8002730:	40011000 	.word	0x40011000
 8002734:	40011400 	.word	0x40011400
 8002738:	51eb851f 	.word	0x51eb851f

0800273c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <SysTick_Handler+0x1c>)
 8002742:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002744:	f001 fd8c 	bl	8004260 <xTaskGetSchedulerState>
 8002748:	4603      	mov	r3, r0
 800274a:	2b01      	cmp	r3, #1
 800274c:	d001      	beq.n	8002752 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800274e:	f002 fc73 	bl	8005038 <xPortSysTickHandler>
  }
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	e000e010 	.word	0xe000e010

0800275c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <vApplicationGetIdleTaskMemory+0x2c>)
 800276c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4a06      	ldr	r2, [pc, #24]	; (800278c <vApplicationGetIdleTaskMemory+0x30>)
 8002772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000094 	.word	0x20000094
 800278c:	200000f0 	.word	0x200000f0

08002790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a07      	ldr	r2, [pc, #28]	; (80027bc <vApplicationGetTimerTaskMemory+0x2c>)
 80027a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <vApplicationGetTimerTaskMemory+0x30>)
 80027a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ae:	601a      	str	r2, [r3, #0]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	200002f0 	.word	0x200002f0
 80027c0:	2000034c 	.word	0x2000034c

080027c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f103 0208 	add.w	r2, r3, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f103 0208 	add.w	r2, r3, #8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f103 0208 	add.w	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d103      	bne.n	8002886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e00c      	b.n	80028a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3308      	adds	r3, #8
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	e002      	b.n	8002894 <vListInsert+0x2e>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d2f6      	bcs.n	800288e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	601a      	str	r2, [r3, #0]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6892      	ldr	r2, [r2, #8]
 80028ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6852      	ldr	r2, [r2, #4]
 80028f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d103      	bne.n	800290c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002952:	bf00      	nop
 8002954:	e7fe      	b.n	8002954 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002956:	f002 fadd 	bl	8004f14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	441a      	add	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	3b01      	subs	r3, #1
 8002988:	68f9      	ldr	r1, [r7, #12]
 800298a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	441a      	add	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d114      	bne.n	80029d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01a      	beq.n	80029ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3310      	adds	r3, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 fa93 	bl	8003ee4 <xTaskRemoveFromEventList>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d012      	beq.n	80029ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <xQueueGenericReset+0xcc>)
 80029c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	e009      	b.n	80029ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3310      	adds	r3, #16
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fef2 	bl	80027c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3324      	adds	r3, #36	; 0x24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff feed 	bl	80027c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029ea:	f002 fac3 	bl	8004f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029ee:	2301      	movs	r3, #1
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <xQueueGenericCreateStatic+0x52>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <xQueueGenericCreateStatic+0x56>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <xQueueGenericCreateStatic+0x58>
 8002a52:	2300      	movs	r3, #0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	623b      	str	r3, [r7, #32]
}
 8002a6a:	bf00      	nop
 8002a6c:	e7fe      	b.n	8002a6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <xQueueGenericCreateStatic+0x7e>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <xQueueGenericCreateStatic+0x82>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <xQueueGenericCreateStatic+0x84>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	61fb      	str	r3, [r7, #28]
}
 8002a96:	bf00      	nop
 8002a98:	e7fe      	b.n	8002a98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a9a:	2350      	movs	r3, #80	; 0x50
 8002a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b50      	cmp	r3, #80	; 0x50
 8002aa2:	d00a      	beq.n	8002aba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	61bb      	str	r3, [r7, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002aba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ace:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f83f 	bl	8002b60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3730      	adds	r7, #48	; 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10a      	bne.n	8002b16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	613b      	str	r3, [r7, #16]
}
 8002b12:	bf00      	nop
 8002b14:	e7fe      	b.n	8002b14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	3350      	adds	r3, #80	; 0x50
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 fb17 	bl	8005158 <pvPortMalloc>
 8002b2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d011      	beq.n	8002b56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3350      	adds	r3, #80	; 0x50
 8002b3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b44:	79fa      	ldrb	r2, [r7, #7]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f805 	bl	8002b60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b56:	69bb      	ldr	r3, [r7, #24]
	}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3720      	adds	r7, #32
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e002      	b.n	8002b82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b8e:	2101      	movs	r1, #1
 8002b90:	69b8      	ldr	r0, [r7, #24]
 8002b92:	f7ff fecb 	bl	800292c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00e      	beq.n	8002bd2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2100      	movs	r1, #0
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f81d 	bl	8002c0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002be4:	2301      	movs	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6939      	ldr	r1, [r7, #16]
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7ff ff7a 	bl	8002aec <xQueueGenericCreate>
 8002bf8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff ffd3 	bl	8002ba6 <prvInitialiseMutex>

		return xNewQueue;
 8002c00:	68fb      	ldr	r3, [r7, #12]
	}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	; 0x38
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueGenericSend+0x32>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <xQueueGenericSend+0x40>
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <xQueueGenericSend+0x44>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <xQueueGenericSend+0x46>
 8002c50:	2300      	movs	r3, #0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <xQueueGenericSend+0x60>
	__asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c68:	bf00      	nop
 8002c6a:	e7fe      	b.n	8002c6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d103      	bne.n	8002c7a <xQueueGenericSend+0x6e>
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <xQueueGenericSend+0x72>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <xQueueGenericSend+0x74>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <xQueueGenericSend+0x8e>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	623b      	str	r3, [r7, #32]
}
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c9a:	f001 fae1 	bl	8004260 <xTaskGetSchedulerState>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <xQueueGenericSend+0x9e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <xQueueGenericSend+0xa2>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <xQueueGenericSend+0xa4>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <xQueueGenericSend+0xbe>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	61fb      	str	r3, [r7, #28]
}
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cca:	f002 f923 	bl	8004f14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <xQueueGenericSend+0xd4>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d129      	bne.n	8002d34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce6:	f000 fb2f 	bl	8003348 <prvCopyDataToQueue>
 8002cea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	3324      	adds	r3, #36	; 0x24
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 f8f3 	bl	8003ee4 <xTaskRemoveFromEventList>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d04:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <xQueueGenericSend+0x1f8>)
 8002d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	e00a      	b.n	8002d2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d1c:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <xQueueGenericSend+0x1f8>)
 8002d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d2c:	f002 f922 	bl	8004f74 <vPortExitCritical>
				return pdPASS;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e063      	b.n	8002dfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d3a:	f002 f91b 	bl	8004f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e05c      	b.n	8002dfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 f92d 	bl	8003fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d52:	2301      	movs	r3, #1
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d56:	f002 f90d 	bl	8004f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d5a:	f000 fe9f 	bl	8003a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d5e:	f002 f8d9 	bl	8004f14 <vPortEnterCritical>
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	d103      	bne.n	8002d78 <xQueueGenericSend+0x16c>
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d7e:	b25b      	sxtb	r3, r3
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d103      	bne.n	8002d8e <xQueueGenericSend+0x182>
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d8e:	f002 f8f1 	bl	8004f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d92:	1d3a      	adds	r2, r7, #4
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 f91c 	bl	8003fd8 <xTaskCheckForTimeOut>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d124      	bne.n	8002df0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da8:	f000 fbc6 	bl	8003538 <prvIsQueueFull>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d018      	beq.n	8002de4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	3310      	adds	r3, #16
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 f842 	bl	8003e44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc2:	f000 fb51 	bl	8003468 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dc6:	f000 fe77 	bl	8003ab8 <xTaskResumeAll>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f47f af7c 	bne.w	8002cca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <xQueueGenericSend+0x1f8>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	e772      	b.n	8002cca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002de6:	f000 fb3f 	bl	8003468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dea:	f000 fe65 	bl	8003ab8 <xTaskResumeAll>
 8002dee:	e76c      	b.n	8002cca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df2:	f000 fb39 	bl	8003468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002df6:	f000 fe5f 	bl	8003ab8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002dfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3738      	adds	r7, #56	; 0x38
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	e000ed04 	.word	0xe000ed04

08002e08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b090      	sub	sp, #64	; 0x40
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e32:	bf00      	nop
 8002e34:	e7fe      	b.n	8002e34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <xQueueGenericSendFromISR+0x3c>
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <xQueueGenericSendFromISR+0x40>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <xQueueGenericSendFromISR+0x42>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e60:	bf00      	nop
 8002e62:	e7fe      	b.n	8002e62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d103      	bne.n	8002e72 <xQueueGenericSendFromISR+0x6a>
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <xQueueGenericSendFromISR+0x6e>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <xQueueGenericSendFromISR+0x70>
 8002e76:	2300      	movs	r3, #0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	623b      	str	r3, [r7, #32]
}
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e92:	f002 f921 	bl	80050d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e96:	f3ef 8211 	mrs	r2, BASEPRI
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	61fa      	str	r2, [r7, #28]
 8002eac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002eae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <xQueueGenericSendFromISR+0xbc>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d12f      	bne.n	8002f24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eda:	f000 fa35 	bl	8003348 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ede:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d112      	bne.n	8002f0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d016      	beq.n	8002f1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	3324      	adds	r3, #36	; 0x24
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fff5 	bl	8003ee4 <xTaskRemoveFromEventList>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00e      	beq.n	8002f1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e007      	b.n	8002f1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f12:	3301      	adds	r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	b25a      	sxtb	r2, r3
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f22:	e001      	b.n	8002f28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3740      	adds	r7, #64	; 0x40
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <xQueueReceive+0x30>
	__asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	623b      	str	r3, [r7, #32]
}
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d103      	bne.n	8002f7e <xQueueReceive+0x3e>
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <xQueueReceive+0x42>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <xQueueReceive+0x44>
 8002f82:	2300      	movs	r3, #0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xQueueReceive+0x5e>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	61fb      	str	r3, [r7, #28]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f9e:	f001 f95f 	bl	8004260 <xTaskGetSchedulerState>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <xQueueReceive+0x6e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <xQueueReceive+0x72>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <xQueueReceive+0x74>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <xQueueReceive+0x8e>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	61bb      	str	r3, [r7, #24]
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fce:	f001 ffa1 	bl	8004f14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01f      	beq.n	800301e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe2:	f000 fa1b 	bl	800341c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	1e5a      	subs	r2, r3, #1
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00f      	beq.n	8003016 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	3310      	adds	r3, #16
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 ff72 	bl	8003ee4 <xTaskRemoveFromEventList>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003006:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <xQueueReceive+0x1bc>)
 8003008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003016:	f001 ffad 	bl	8004f74 <vPortExitCritical>
				return pdPASS;
 800301a:	2301      	movs	r3, #1
 800301c:	e069      	b.n	80030f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d103      	bne.n	800302c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003024:	f001 ffa6 	bl	8004f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003028:	2300      	movs	r3, #0
 800302a:	e062      	b.n	80030f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003032:	f107 0310 	add.w	r3, r7, #16
 8003036:	4618      	mov	r0, r3
 8003038:	f000 ffb8 	bl	8003fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800303c:	2301      	movs	r3, #1
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003040:	f001 ff98 	bl	8004f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003044:	f000 fd2a 	bl	8003a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003048:	f001 ff64 	bl	8004f14 <vPortEnterCritical>
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003052:	b25b      	sxtb	r3, r3
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d103      	bne.n	8003062 <xQueueReceive+0x122>
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003068:	b25b      	sxtb	r3, r3
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d103      	bne.n	8003078 <xQueueReceive+0x138>
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003078:	f001 ff7c 	bl	8004f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800307c:	1d3a      	adds	r2, r7, #4
 800307e:	f107 0310 	add.w	r3, r7, #16
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f000 ffa7 	bl	8003fd8 <xTaskCheckForTimeOut>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d123      	bne.n	80030d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003092:	f000 fa3b 	bl	800350c <prvIsQueueEmpty>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d017      	beq.n	80030cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	3324      	adds	r3, #36	; 0x24
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fecd 	bl	8003e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ac:	f000 f9dc 	bl	8003468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030b0:	f000 fd02 	bl	8003ab8 <xTaskResumeAll>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d189      	bne.n	8002fce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <xQueueReceive+0x1bc>)
 80030bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	e780      	b.n	8002fce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ce:	f000 f9cb 	bl	8003468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030d2:	f000 fcf1 	bl	8003ab8 <xTaskResumeAll>
 80030d6:	e77a      	b.n	8002fce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030da:	f000 f9c5 	bl	8003468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030de:	f000 fceb 	bl	8003ab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030e4:	f000 fa12 	bl	800350c <prvIsQueueEmpty>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f43f af6f 	beq.w	8002fce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3730      	adds	r7, #48	; 0x30
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08e      	sub	sp, #56	; 0x38
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800310a:	2300      	movs	r3, #0
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003112:	2300      	movs	r3, #0
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	623b      	str	r3, [r7, #32]
}
 800312e:	bf00      	nop
 8003130:	e7fe      	b.n	8003130 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	61fb      	str	r3, [r7, #28]
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003150:	f001 f886 	bl	8004260 <xTaskGetSchedulerState>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <xQueueSemaphoreTake+0x60>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <xQueueSemaphoreTake+0x64>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <xQueueSemaphoreTake+0x66>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	61bb      	str	r3, [r7, #24]
}
 800317c:	bf00      	nop
 800317e:	e7fe      	b.n	800317e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003180:	f001 fec8 	bl	8004f14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d024      	beq.n	80031da <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	1e5a      	subs	r2, r3, #1
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80031a0:	f001 f9d4 	bl	800454c <pvTaskIncrementMutexHeldCount>
 80031a4:	4602      	mov	r2, r0
 80031a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00f      	beq.n	80031d2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	3310      	adds	r3, #16
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fe94 	bl	8003ee4 <xTaskRemoveFromEventList>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031c2:	4b54      	ldr	r3, [pc, #336]	; (8003314 <xQueueSemaphoreTake+0x214>)
 80031c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031d2:	f001 fecf 	bl	8004f74 <vPortExitCritical>
				return pdPASS;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e097      	b.n	800330a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d111      	bne.n	8003204 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	617b      	str	r3, [r7, #20]
}
 80031f8:	bf00      	nop
 80031fa:	e7fe      	b.n	80031fa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031fc:	f001 feba 	bl	8004f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003200:	2300      	movs	r3, #0
 8003202:	e082      	b.n	800330a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800320a:	f107 030c 	add.w	r3, r7, #12
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fecc 	bl	8003fac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003214:	2301      	movs	r3, #1
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003218:	f001 feac 	bl	8004f74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800321c:	f000 fc3e 	bl	8003a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003220:	f001 fe78 	bl	8004f14 <vPortEnterCritical>
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800322a:	b25b      	sxtb	r3, r3
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d103      	bne.n	800323a <xQueueSemaphoreTake+0x13a>
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003240:	b25b      	sxtb	r3, r3
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d103      	bne.n	8003250 <xQueueSemaphoreTake+0x150>
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003250:	f001 fe90 	bl	8004f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003254:	463a      	mov	r2, r7
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f000 febb 	bl	8003fd8 <xTaskCheckForTimeOut>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d132      	bne.n	80032ce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800326a:	f000 f94f 	bl	800350c <prvIsQueueEmpty>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d026      	beq.n	80032c2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800327c:	f001 fe4a 	bl	8004f14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	4618      	mov	r0, r3
 8003286:	f001 f809 	bl	800429c <xTaskPriorityInherit>
 800328a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800328c:	f001 fe72 	bl	8004f74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	3324      	adds	r3, #36	; 0x24
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fdd3 	bl	8003e44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800329e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032a0:	f000 f8e2 	bl	8003468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032a4:	f000 fc08 	bl	8003ab8 <xTaskResumeAll>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f47f af68 	bne.w	8003180 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <xQueueSemaphoreTake+0x214>)
 80032b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	e75e      	b.n	8003180 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80032c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032c4:	f000 f8d0 	bl	8003468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032c8:	f000 fbf6 	bl	8003ab8 <xTaskResumeAll>
 80032cc:	e758      	b.n	8003180 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80032ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032d0:	f000 f8ca 	bl	8003468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032d4:	f000 fbf0 	bl	8003ab8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032da:	f000 f917 	bl	800350c <prvIsQueueEmpty>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f43f af4d 	beq.w	8003180 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80032ec:	f001 fe12 	bl	8004f14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032f2:	f000 f811 	bl	8003318 <prvGetDisinheritPriorityAfterTimeout>
 80032f6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f8a2 	bl	8004448 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003304:	f001 fe36 	bl	8004f74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003308:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800330a:	4618      	mov	r0, r3
 800330c:	3738      	adds	r7, #56	; 0x38
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	e000ed04 	.word	0xe000ed04

08003318 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2b00      	cmp	r3, #0
 8003326:	d006      	beq.n	8003336 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e001      	b.n	800333a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800333a:	68fb      	ldr	r3, [r7, #12]
	}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d14d      	bne.n	800340a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fffa 	bl	800436c <xTaskPriorityDisinherit>
 8003378:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	e043      	b.n	800340a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d119      	bne.n	80033bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6858      	ldr	r0, [r3, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	461a      	mov	r2, r3
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	f002 f8f4 	bl	8005580 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	441a      	add	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d32b      	bcc.n	800340a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	e026      	b.n	800340a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68d8      	ldr	r0, [r3, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	461a      	mov	r2, r3
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	f002 f8da 	bl	8005580 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	425b      	negs	r3, r3
 80033d6:	441a      	add	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d207      	bcs.n	80033f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	425b      	negs	r3, r3
 80033f2:	441a      	add	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d105      	bne.n	800340a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	3b01      	subs	r3, #1
 8003408:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003412:	697b      	ldr	r3, [r7, #20]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	429a      	cmp	r2, r3
 8003446:	d303      	bcc.n	8003450 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68d9      	ldr	r1, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	461a      	mov	r2, r3
 800345a:	6838      	ldr	r0, [r7, #0]
 800345c:	f002 f890 	bl	8005580 <memcpy>
	}
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003470:	f001 fd50 	bl	8004f14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800347a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800347c:	e011      	b.n	80034a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d012      	beq.n	80034ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3324      	adds	r3, #36	; 0x24
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fd2a 	bl	8003ee4 <xTaskRemoveFromEventList>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003496:	f000 fe01 	bl	800409c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	3b01      	subs	r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dce9      	bgt.n	800347e <prvUnlockQueue+0x16>
 80034aa:	e000      	b.n	80034ae <prvUnlockQueue+0x46>
					break;
 80034ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	22ff      	movs	r2, #255	; 0xff
 80034b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034b6:	f001 fd5d 	bl	8004f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034ba:	f001 fd2b 	bl	8004f14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034c6:	e011      	b.n	80034ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d012      	beq.n	80034f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3310      	adds	r3, #16
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fd05 	bl	8003ee4 <xTaskRemoveFromEventList>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034e0:	f000 fddc 	bl	800409c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034e4:	7bbb      	ldrb	r3, [r7, #14]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	dce9      	bgt.n	80034c8 <prvUnlockQueue+0x60>
 80034f4:	e000      	b.n	80034f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	22ff      	movs	r2, #255	; 0xff
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003500:	f001 fd38 	bl	8004f74 <vPortExitCritical>
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003514:	f001 fcfe 	bl	8004f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	e001      	b.n	800352a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800352a:	f001 fd23 	bl	8004f74 <vPortExitCritical>

	return xReturn;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003540:	f001 fce8 	bl	8004f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	429a      	cmp	r2, r3
 800354e:	d102      	bne.n	8003556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003550:	2301      	movs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e001      	b.n	800355a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800355a:	f001 fd0b 	bl	8004f74 <vPortExitCritical>

	return xReturn;
 800355e:	68fb      	ldr	r3, [r7, #12]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e014      	b.n	80035a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003578:	4a0f      	ldr	r2, [pc, #60]	; (80035b8 <vQueueAddToRegistry+0x50>)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003584:	490c      	ldr	r1, [pc, #48]	; (80035b8 <vQueueAddToRegistry+0x50>)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <vQueueAddToRegistry+0x50>)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800359a:	e006      	b.n	80035aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3301      	adds	r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b07      	cmp	r3, #7
 80035a6:	d9e7      	bls.n	8003578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20004a44 	.word	0x20004a44

080035bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035cc:	f001 fca2 	bl	8004f14 <vPortEnterCritical>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d103      	bne.n	80035e6 <vQueueWaitForMessageRestricted+0x2a>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d103      	bne.n	80035fc <vQueueWaitForMessageRestricted+0x40>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035fc:	f001 fcba 	bl	8004f74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	2b00      	cmp	r3, #0
 8003606:	d106      	bne.n	8003616 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3324      	adds	r3, #36	; 0x24
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fc3b 	bl	8003e8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003616:	6978      	ldr	r0, [r7, #20]
 8003618:	f7ff ff26 	bl	8003468 <prvUnlockQueue>
	}
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08e      	sub	sp, #56	; 0x38
 8003628:	af04      	add	r7, sp, #16
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	623b      	str	r3, [r7, #32]
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xTaskCreateStatic+0x46>
	__asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	61fb      	str	r3, [r7, #28]
}
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800366a:	235c      	movs	r3, #92	; 0x5c
 800366c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b5c      	cmp	r3, #92	; 0x5c
 8003672:	d00a      	beq.n	800368a <xTaskCreateStatic+0x66>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	61bb      	str	r3, [r7, #24]
}
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800368a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01e      	beq.n	80036d0 <xTaskCreateStatic+0xac>
 8003692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01b      	beq.n	80036d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036aa:	2300      	movs	r3, #0
 80036ac:	9303      	str	r3, [sp, #12]
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	9302      	str	r3, [sp, #8]
 80036b2:	f107 0314 	add.w	r3, r7, #20
 80036b6:	9301      	str	r3, [sp, #4]
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f850 	bl	8003768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ca:	f000 f8dd 	bl	8003888 <prvAddNewTaskToReadyList>
 80036ce:	e001      	b.n	80036d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036d4:	697b      	ldr	r3, [r7, #20]
	}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3728      	adds	r7, #40	; 0x28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b08c      	sub	sp, #48	; 0x30
 80036e2:	af04      	add	r7, sp, #16
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 fd30 	bl	8005158 <pvPortMalloc>
 80036f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00e      	beq.n	800371e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003700:	205c      	movs	r0, #92	; 0x5c
 8003702:	f001 fd29 	bl	8005158 <pvPortMalloc>
 8003706:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
 8003714:	e005      	b.n	8003722 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003716:	6978      	ldr	r0, [r7, #20]
 8003718:	f001 fdea 	bl	80052f0 <vPortFree>
 800371c:	e001      	b.n	8003722 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d017      	beq.n	8003758 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003730:	88fa      	ldrh	r2, [r7, #6]
 8003732:	2300      	movs	r3, #0
 8003734:	9303      	str	r3, [sp, #12]
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	9302      	str	r3, [sp, #8]
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f80e 	bl	8003768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800374c:	69f8      	ldr	r0, [r7, #28]
 800374e:	f000 f89b 	bl	8003888 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003752:	2301      	movs	r3, #1
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	e002      	b.n	800375e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003758:	f04f 33ff 	mov.w	r3, #4294967295
 800375c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800375e:	69bb      	ldr	r3, [r7, #24]
	}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	461a      	mov	r2, r3
 8003780:	21a5      	movs	r1, #165	; 0xa5
 8003782:	f001 ff0b 	bl	800559c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003790:	3b01      	subs	r3, #1
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f023 0307 	bic.w	r3, r3, #7
 800379e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	617b      	str	r3, [r7, #20]
}
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01f      	beq.n	8003806 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e012      	b.n	80037f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	7819      	ldrb	r1, [r3, #0]
 80037d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	3334      	adds	r3, #52	; 0x34
 80037dc:	460a      	mov	r2, r1
 80037de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d006      	beq.n	80037fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2b0f      	cmp	r3, #15
 80037f6:	d9e9      	bls.n	80037cc <prvInitialiseNewTask+0x64>
 80037f8:	e000      	b.n	80037fc <prvInitialiseNewTask+0x94>
			{
				break;
 80037fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003804:	e003      	b.n	800380e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	2b37      	cmp	r3, #55	; 0x37
 8003812:	d901      	bls.n	8003818 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003814:	2337      	movs	r3, #55	; 0x37
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800381c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003822:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	2200      	movs	r2, #0
 8003828:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	3304      	adds	r3, #4
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe ffe8 	bl	8002804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003836:	3318      	adds	r3, #24
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe ffe3 	bl	8002804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003842:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003852:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	2200      	movs	r2, #0
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	69b8      	ldr	r0, [r7, #24]
 8003868:	f001 fa26 	bl	8004cb8 <pxPortInitialiseStack>
 800386c:	4602      	mov	r2, r0
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800387e:	bf00      	nop
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003890:	f001 fb40 	bl	8004f14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003894:	4b2d      	ldr	r3, [pc, #180]	; (800394c <prvAddNewTaskToReadyList+0xc4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	4a2c      	ldr	r2, [pc, #176]	; (800394c <prvAddNewTaskToReadyList+0xc4>)
 800389c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800389e:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <prvAddNewTaskToReadyList+0xc8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038a6:	4a2a      	ldr	r2, [pc, #168]	; (8003950 <prvAddNewTaskToReadyList+0xc8>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <prvAddNewTaskToReadyList+0xc4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d110      	bne.n	80038d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038b4:	f000 fc16 	bl	80040e4 <prvInitialiseTaskLists>
 80038b8:	e00d      	b.n	80038d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <prvAddNewTaskToReadyList+0xcc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038c2:	4b23      	ldr	r3, [pc, #140]	; (8003950 <prvAddNewTaskToReadyList+0xc8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d802      	bhi.n	80038d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <prvAddNewTaskToReadyList+0xc8>)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038d6:	4b20      	ldr	r3, [pc, #128]	; (8003958 <prvAddNewTaskToReadyList+0xd0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <prvAddNewTaskToReadyList+0xd0>)
 80038de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <prvAddNewTaskToReadyList+0xd0>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <prvAddNewTaskToReadyList+0xd4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d903      	bls.n	80038fc <prvAddNewTaskToReadyList+0x74>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	4a18      	ldr	r2, [pc, #96]	; (800395c <prvAddNewTaskToReadyList+0xd4>)
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4a15      	ldr	r2, [pc, #84]	; (8003960 <prvAddNewTaskToReadyList+0xd8>)
 800390a:	441a      	add	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f7fe ff83 	bl	800281e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003918:	f001 fb2c 	bl	8004f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800391c:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <prvAddNewTaskToReadyList+0xcc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00e      	beq.n	8003942 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <prvAddNewTaskToReadyList+0xc8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	429a      	cmp	r2, r3
 8003930:	d207      	bcs.n	8003942 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <prvAddNewTaskToReadyList+0xdc>)
 8003934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000c20 	.word	0x20000c20
 8003950:	2000074c 	.word	0x2000074c
 8003954:	20000c2c 	.word	0x20000c2c
 8003958:	20000c3c 	.word	0x20000c3c
 800395c:	20000c28 	.word	0x20000c28
 8003960:	20000750 	.word	0x20000750
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d017      	beq.n	80039aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800397a:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <vTaskDelay+0x60>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <vTaskDelay+0x30>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	60bb      	str	r3, [r7, #8]
}
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003998:	f000 f880 	bl	8003a9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800399c:	2100      	movs	r1, #0
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fde8 	bl	8004574 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039a4:	f000 f888 	bl	8003ab8 <xTaskResumeAll>
 80039a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <vTaskDelay+0x64>)
 80039b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000c48 	.word	0x20000c48
 80039cc:	e000ed04 	.word	0xe000ed04

080039d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039de:	463a      	mov	r2, r7
 80039e0:	1d39      	adds	r1, r7, #4
 80039e2:	f107 0308 	add.w	r3, r7, #8
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe feb8 	bl	800275c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	9202      	str	r2, [sp, #8]
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	2300      	movs	r3, #0
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	2300      	movs	r3, #0
 80039fc:	460a      	mov	r2, r1
 80039fe:	4921      	ldr	r1, [pc, #132]	; (8003a84 <vTaskStartScheduler+0xb4>)
 8003a00:	4821      	ldr	r0, [pc, #132]	; (8003a88 <vTaskStartScheduler+0xb8>)
 8003a02:	f7ff fe0f 	bl	8003624 <xTaskCreateStatic>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <vTaskStartScheduler+0xbc>)
 8003a0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a0c:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <vTaskStartScheduler+0xbc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a14:	2301      	movs	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e001      	b.n	8003a1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a24:	f000 fdfa 	bl	800461c <xTimerCreateTimerTask>
 8003a28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d116      	bne.n	8003a5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	613b      	str	r3, [r7, #16]
}
 8003a42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <vTaskStartScheduler+0xc0>)
 8003a46:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <vTaskStartScheduler+0xc4>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <vTaskStartScheduler+0xc8>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a58:	f001 f9ba 	bl	8004dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a5c:	e00e      	b.n	8003a7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d10a      	bne.n	8003a7c <vTaskStartScheduler+0xac>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	60fb      	str	r3, [r7, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <vTaskStartScheduler+0xaa>
}
 8003a7c:	bf00      	nop
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	080064c0 	.word	0x080064c0
 8003a88:	080040b5 	.word	0x080040b5
 8003a8c:	20000c44 	.word	0x20000c44
 8003a90:	20000c40 	.word	0x20000c40
 8003a94:	20000c2c 	.word	0x20000c2c
 8003a98:	20000c24 	.word	0x20000c24

08003a9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <vTaskSuspendAll+0x18>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	4a03      	ldr	r2, [pc, #12]	; (8003ab4 <vTaskSuspendAll+0x18>)
 8003aa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003aaa:	bf00      	nop
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	20000c48 	.word	0x20000c48

08003ab8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ac6:	4b42      	ldr	r3, [pc, #264]	; (8003bd0 <xTaskResumeAll+0x118>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	603b      	str	r3, [r7, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ae4:	f001 fa16 	bl	8004f14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <xTaskResumeAll+0x118>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	4a38      	ldr	r2, [pc, #224]	; (8003bd0 <xTaskResumeAll+0x118>)
 8003af0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af2:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <xTaskResumeAll+0x118>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d162      	bne.n	8003bc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <xTaskResumeAll+0x11c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d05e      	beq.n	8003bc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b02:	e02f      	b.n	8003b64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <xTaskResumeAll+0x120>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3318      	adds	r3, #24
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fee1 	bl	80028d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fedc 	bl	80028d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b24:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <xTaskResumeAll+0x124>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d903      	bls.n	8003b34 <xTaskResumeAll+0x7c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	4a2a      	ldr	r2, [pc, #168]	; (8003bdc <xTaskResumeAll+0x124>)
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4a27      	ldr	r2, [pc, #156]	; (8003be0 <xTaskResumeAll+0x128>)
 8003b42:	441a      	add	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f7fe fe67 	bl	800281e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b54:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <xTaskResumeAll+0x12c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b5e:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <xTaskResumeAll+0x130>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b64:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <xTaskResumeAll+0x120>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1cb      	bne.n	8003b04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b72:	f000 fb55 	bl	8004220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <xTaskResumeAll+0x134>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d010      	beq.n	8003ba4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b82:	f000 f847 	bl	8003c14 <xTaskIncrementTick>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b8c:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <xTaskResumeAll+0x130>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f1      	bne.n	8003b82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b9e:	4b13      	ldr	r3, [pc, #76]	; (8003bec <xTaskResumeAll+0x134>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <xTaskResumeAll+0x130>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bac:	2301      	movs	r3, #1
 8003bae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <xTaskResumeAll+0x138>)
 8003bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bc0:	f001 f9d8 	bl	8004f74 <vPortExitCritical>

	return xAlreadyYielded;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000c48 	.word	0x20000c48
 8003bd4:	20000c20 	.word	0x20000c20
 8003bd8:	20000be0 	.word	0x20000be0
 8003bdc:	20000c28 	.word	0x20000c28
 8003be0:	20000750 	.word	0x20000750
 8003be4:	2000074c 	.word	0x2000074c
 8003be8:	20000c34 	.word	0x20000c34
 8003bec:	20000c30 	.word	0x20000c30
 8003bf0:	e000ed04 	.word	0xe000ed04

08003bf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <xTaskGetTickCount+0x1c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c00:	687b      	ldr	r3, [r7, #4]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000c24 	.word	0x20000c24

08003c14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c1e:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <xTaskIncrementTick+0x148>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 808f 	bne.w	8003d46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c28:	4b4d      	ldr	r3, [pc, #308]	; (8003d60 <xTaskIncrementTick+0x14c>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c30:	4a4b      	ldr	r2, [pc, #300]	; (8003d60 <xTaskIncrementTick+0x14c>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d120      	bne.n	8003c7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c3c:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <xTaskIncrementTick+0x150>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <xTaskIncrementTick+0x48>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	603b      	str	r3, [r7, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <xTaskIncrementTick+0x46>
 8003c5c:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <xTaskIncrementTick+0x150>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <xTaskIncrementTick+0x154>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a3f      	ldr	r2, [pc, #252]	; (8003d64 <xTaskIncrementTick+0x150>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <xTaskIncrementTick+0x154>)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <xTaskIncrementTick+0x158>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a3d      	ldr	r2, [pc, #244]	; (8003d6c <xTaskIncrementTick+0x158>)
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	f000 fad1 	bl	8004220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c7e:	4b3c      	ldr	r3, [pc, #240]	; (8003d70 <xTaskIncrementTick+0x15c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d349      	bcc.n	8003d1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <xTaskIncrementTick+0x150>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c92:	4b37      	ldr	r3, [pc, #220]	; (8003d70 <xTaskIncrementTick+0x15c>)
 8003c94:	f04f 32ff 	mov.w	r2, #4294967295
 8003c98:	601a      	str	r2, [r3, #0]
					break;
 8003c9a:	e03f      	b.n	8003d1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c9c:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <xTaskIncrementTick+0x150>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d203      	bcs.n	8003cbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cb4:	4a2e      	ldr	r2, [pc, #184]	; (8003d70 <xTaskIncrementTick+0x15c>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cba:	e02f      	b.n	8003d1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe fe09 	bl	80028d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	3318      	adds	r3, #24
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe fe00 	bl	80028d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <xTaskIncrementTick+0x160>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d903      	bls.n	8003cec <xTaskIncrementTick+0xd8>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <xTaskIncrementTick+0x160>)
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4a1f      	ldr	r2, [pc, #124]	; (8003d78 <xTaskIncrementTick+0x164>)
 8003cfa:	441a      	add	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4619      	mov	r1, r3
 8003d02:	4610      	mov	r0, r2
 8003d04:	f7fe fd8b 	bl	800281e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <xTaskIncrementTick+0x168>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d3b8      	bcc.n	8003c88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d16:	2301      	movs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d1a:	e7b5      	b.n	8003c88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d1c:	4b17      	ldr	r3, [pc, #92]	; (8003d7c <xTaskIncrementTick+0x168>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d22:	4915      	ldr	r1, [pc, #84]	; (8003d78 <xTaskIncrementTick+0x164>)
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d901      	bls.n	8003d38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d34:	2301      	movs	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <xTaskIncrementTick+0x16c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e004      	b.n	8003d50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <xTaskIncrementTick+0x170>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4a0d      	ldr	r2, [pc, #52]	; (8003d84 <xTaskIncrementTick+0x170>)
 8003d4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d50:	697b      	ldr	r3, [r7, #20]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000c48 	.word	0x20000c48
 8003d60:	20000c24 	.word	0x20000c24
 8003d64:	20000bd8 	.word	0x20000bd8
 8003d68:	20000bdc 	.word	0x20000bdc
 8003d6c:	20000c38 	.word	0x20000c38
 8003d70:	20000c40 	.word	0x20000c40
 8003d74:	20000c28 	.word	0x20000c28
 8003d78:	20000750 	.word	0x20000750
 8003d7c:	2000074c 	.word	0x2000074c
 8003d80:	20000c34 	.word	0x20000c34
 8003d84:	20000c30 	.word	0x20000c30

08003d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d8e:	4b28      	ldr	r3, [pc, #160]	; (8003e30 <vTaskSwitchContext+0xa8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <vTaskSwitchContext+0xac>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d9c:	e041      	b.n	8003e22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003d9e:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <vTaskSwitchContext+0xac>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003da4:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <vTaskSwitchContext+0xb0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	e010      	b.n	8003dce <vTaskSwitchContext+0x46>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	607b      	str	r3, [r7, #4]
}
 8003dc4:	bf00      	nop
 8003dc6:	e7fe      	b.n	8003dc6 <vTaskSwitchContext+0x3e>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	491b      	ldr	r1, [pc, #108]	; (8003e3c <vTaskSwitchContext+0xb4>)
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0e4      	beq.n	8003dac <vTaskSwitchContext+0x24>
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <vTaskSwitchContext+0xb4>)
 8003dee:	4413      	add	r3, r2
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3308      	adds	r3, #8
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d104      	bne.n	8003e12 <vTaskSwitchContext+0x8a>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <vTaskSwitchContext+0xb8>)
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4a06      	ldr	r2, [pc, #24]	; (8003e38 <vTaskSwitchContext+0xb0>)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6013      	str	r3, [r2, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000c48 	.word	0x20000c48
 8003e34:	20000c34 	.word	0x20000c34
 8003e38:	20000c28 	.word	0x20000c28
 8003e3c:	20000750 	.word	0x20000750
 8003e40:	2000074c 	.word	0x2000074c

08003e44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	60fb      	str	r3, [r7, #12]
}
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <vTaskPlaceOnEventList+0x44>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3318      	adds	r3, #24
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fe fcf7 	bl	8002866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e78:	2101      	movs	r1, #1
 8003e7a:	6838      	ldr	r0, [r7, #0]
 8003e7c:	f000 fb7a 	bl	8004574 <prvAddCurrentTaskToDelayedList>
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	2000074c 	.word	0x2000074c

08003e8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	617b      	str	r3, [r7, #20]
}
 8003eb0:	bf00      	nop
 8003eb2:	e7fe      	b.n	8003eb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3318      	adds	r3, #24
 8003eba:	4619      	mov	r1, r3
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7fe fcae 	bl	800281e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ecc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	68b8      	ldr	r0, [r7, #8]
 8003ed2:	f000 fb4f 	bl	8004574 <prvAddCurrentTaskToDelayedList>
	}
 8003ed6:	bf00      	nop
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000074c 	.word	0x2000074c

08003ee4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	60fb      	str	r3, [r7, #12]
}
 8003f0c:	bf00      	nop
 8003f0e:	e7fe      	b.n	8003f0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	3318      	adds	r3, #24
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fcdf 	bl	80028d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <xTaskRemoveFromEventList+0xb0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d11d      	bne.n	8003f5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe fcd6 	bl	80028d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <xTaskRemoveFromEventList+0xb4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d903      	bls.n	8003f40 <xTaskRemoveFromEventList+0x5c>
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <xTaskRemoveFromEventList+0xb4>)
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4a13      	ldr	r2, [pc, #76]	; (8003f9c <xTaskRemoveFromEventList+0xb8>)
 8003f4e:	441a      	add	r2, r3
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f7fe fc61 	bl	800281e <vListInsertEnd>
 8003f5c:	e005      	b.n	8003f6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3318      	adds	r3, #24
 8003f62:	4619      	mov	r1, r3
 8003f64:	480e      	ldr	r0, [pc, #56]	; (8003fa0 <xTaskRemoveFromEventList+0xbc>)
 8003f66:	f7fe fc5a 	bl	800281e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <xTaskRemoveFromEventList+0xc0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d905      	bls.n	8003f84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <xTaskRemoveFromEventList+0xc4>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e001      	b.n	8003f88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f88:	697b      	ldr	r3, [r7, #20]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000c48 	.word	0x20000c48
 8003f98:	20000c28 	.word	0x20000c28
 8003f9c:	20000750 	.word	0x20000750
 8003fa0:	20000be0 	.word	0x20000be0
 8003fa4:	2000074c 	.word	0x2000074c
 8003fa8:	20000c34 	.word	0x20000c34

08003fac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fb4:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <vTaskInternalSetTimeOutState+0x24>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <vTaskInternalSetTimeOutState+0x28>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	605a      	str	r2, [r3, #4]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	20000c38 	.word	0x20000c38
 8003fd4:	20000c24 	.word	0x20000c24

08003fd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	613b      	str	r3, [r7, #16]
}
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	60fb      	str	r3, [r7, #12]
}
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800401a:	f000 ff7b 	bl	8004f14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800401e:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <xTaskCheckForTimeOut+0xbc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004036:	d102      	bne.n	800403e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	e023      	b.n	8004086 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <xTaskCheckForTimeOut+0xc0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d007      	beq.n	800405a <xTaskCheckForTimeOut+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	429a      	cmp	r2, r3
 8004052:	d302      	bcc.n	800405a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004054:	2301      	movs	r3, #1
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	e015      	b.n	8004086 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	429a      	cmp	r2, r3
 8004062:	d20b      	bcs.n	800407c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	1ad2      	subs	r2, r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff9b 	bl	8003fac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	e004      	b.n	8004086 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004082:	2301      	movs	r3, #1
 8004084:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004086:	f000 ff75 	bl	8004f74 <vPortExitCritical>

	return xReturn;
 800408a:	69fb      	ldr	r3, [r7, #28]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3720      	adds	r7, #32
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000c24 	.word	0x20000c24
 8004098:	20000c38 	.word	0x20000c38

0800409c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <vTaskMissedYield+0x14>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
}
 80040a6:	bf00      	nop
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	20000c34 	.word	0x20000c34

080040b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040bc:	f000 f852 	bl	8004164 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <prvIdleTask+0x28>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d9f9      	bls.n	80040bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <prvIdleTask+0x2c>)
 80040ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040d8:	e7f0      	b.n	80040bc <prvIdleTask+0x8>
 80040da:	bf00      	nop
 80040dc:	20000750 	.word	0x20000750
 80040e0:	e000ed04 	.word	0xe000ed04

080040e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	e00c      	b.n	800410a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <prvInitialiseTaskLists+0x60>)
 80040fc:	4413      	add	r3, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fb60 	bl	80027c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3301      	adds	r3, #1
 8004108:	607b      	str	r3, [r7, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b37      	cmp	r3, #55	; 0x37
 800410e:	d9ef      	bls.n	80040f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004110:	480d      	ldr	r0, [pc, #52]	; (8004148 <prvInitialiseTaskLists+0x64>)
 8004112:	f7fe fb57 	bl	80027c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004116:	480d      	ldr	r0, [pc, #52]	; (800414c <prvInitialiseTaskLists+0x68>)
 8004118:	f7fe fb54 	bl	80027c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800411c:	480c      	ldr	r0, [pc, #48]	; (8004150 <prvInitialiseTaskLists+0x6c>)
 800411e:	f7fe fb51 	bl	80027c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004122:	480c      	ldr	r0, [pc, #48]	; (8004154 <prvInitialiseTaskLists+0x70>)
 8004124:	f7fe fb4e 	bl	80027c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004128:	480b      	ldr	r0, [pc, #44]	; (8004158 <prvInitialiseTaskLists+0x74>)
 800412a:	f7fe fb4b 	bl	80027c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800412e:	4b0b      	ldr	r3, [pc, #44]	; (800415c <prvInitialiseTaskLists+0x78>)
 8004130:	4a05      	ldr	r2, [pc, #20]	; (8004148 <prvInitialiseTaskLists+0x64>)
 8004132:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004134:	4b0a      	ldr	r3, [pc, #40]	; (8004160 <prvInitialiseTaskLists+0x7c>)
 8004136:	4a05      	ldr	r2, [pc, #20]	; (800414c <prvInitialiseTaskLists+0x68>)
 8004138:	601a      	str	r2, [r3, #0]
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000750 	.word	0x20000750
 8004148:	20000bb0 	.word	0x20000bb0
 800414c:	20000bc4 	.word	0x20000bc4
 8004150:	20000be0 	.word	0x20000be0
 8004154:	20000bf4 	.word	0x20000bf4
 8004158:	20000c0c 	.word	0x20000c0c
 800415c:	20000bd8 	.word	0x20000bd8
 8004160:	20000bdc 	.word	0x20000bdc

08004164 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800416a:	e019      	b.n	80041a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800416c:	f000 fed2 	bl	8004f14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004170:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <prvCheckTasksWaitingTermination+0x50>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe fbab 	bl	80028d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <prvCheckTasksWaitingTermination+0x54>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3b01      	subs	r3, #1
 8004188:	4a0b      	ldr	r2, [pc, #44]	; (80041b8 <prvCheckTasksWaitingTermination+0x54>)
 800418a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <prvCheckTasksWaitingTermination+0x58>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3b01      	subs	r3, #1
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <prvCheckTasksWaitingTermination+0x58>)
 8004194:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004196:	f000 feed 	bl	8004f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f810 	bl	80041c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <prvCheckTasksWaitingTermination+0x58>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e1      	bne.n	800416c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000bf4 	.word	0x20000bf4
 80041b8:	20000c20 	.word	0x20000c20
 80041bc:	20000c08 	.word	0x20000c08

080041c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d108      	bne.n	80041e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	4618      	mov	r0, r3
 80041d8:	f001 f88a 	bl	80052f0 <vPortFree>
				vPortFree( pxTCB );
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f001 f887 	bl	80052f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041e2:	e018      	b.n	8004216 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d103      	bne.n	80041f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f001 f87e 	bl	80052f0 <vPortFree>
	}
 80041f4:	e00f      	b.n	8004216 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d00a      	beq.n	8004216 <prvDeleteTCB+0x56>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <prvDeleteTCB+0x54>
	}
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004226:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <prvResetNextTaskUnblockTime+0x38>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d104      	bne.n	800423a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <prvResetNextTaskUnblockTime+0x3c>)
 8004232:	f04f 32ff 	mov.w	r2, #4294967295
 8004236:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004238:	e008      	b.n	800424c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <prvResetNextTaskUnblockTime+0x38>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a04      	ldr	r2, [pc, #16]	; (800425c <prvResetNextTaskUnblockTime+0x3c>)
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	20000bd8 	.word	0x20000bd8
 800425c:	20000c40 	.word	0x20000c40

08004260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <xTaskGetSchedulerState+0x34>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800426e:	2301      	movs	r3, #1
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	e008      	b.n	8004286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <xTaskGetSchedulerState+0x38>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800427c:	2302      	movs	r3, #2
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	e001      	b.n	8004286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004286:	687b      	ldr	r3, [r7, #4]
	}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	20000c2c 	.word	0x20000c2c
 8004298:	20000c48 	.word	0x20000c48

0800429c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d051      	beq.n	8004356 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b6:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <xTaskPriorityInherit+0xc4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	429a      	cmp	r2, r3
 80042be:	d241      	bcs.n	8004344 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	db06      	blt.n	80042d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c8:	4b25      	ldr	r3, [pc, #148]	; (8004360 <xTaskPriorityInherit+0xc4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6959      	ldr	r1, [r3, #20]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <xTaskPriorityInherit+0xc8>)
 80042e8:	4413      	add	r3, r2
 80042ea:	4299      	cmp	r1, r3
 80042ec:	d122      	bne.n	8004334 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe faf0 	bl	80028d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <xTaskPriorityInherit+0xc4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004306:	4b18      	ldr	r3, [pc, #96]	; (8004368 <xTaskPriorityInherit+0xcc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d903      	bls.n	8004316 <xTaskPriorityInherit+0x7a>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	4a15      	ldr	r2, [pc, #84]	; (8004368 <xTaskPriorityInherit+0xcc>)
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4a10      	ldr	r2, [pc, #64]	; (8004364 <xTaskPriorityInherit+0xc8>)
 8004324:	441a      	add	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3304      	adds	r3, #4
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f7fe fa76 	bl	800281e <vListInsertEnd>
 8004332:	e004      	b.n	800433e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <xTaskPriorityInherit+0xc4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800433e:	2301      	movs	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e008      	b.n	8004356 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <xTaskPriorityInherit+0xc4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434e:	429a      	cmp	r2, r3
 8004350:	d201      	bcs.n	8004356 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004352:	2301      	movs	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004356:	68fb      	ldr	r3, [r7, #12]
	}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	2000074c 	.word	0x2000074c
 8004364:	20000750 	.word	0x20000750
 8004368:	20000c28 	.word	0x20000c28

0800436c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d056      	beq.n	8004430 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004382:	4b2e      	ldr	r3, [pc, #184]	; (800443c <xTaskPriorityDisinherit+0xd0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	429a      	cmp	r2, r3
 800438a:	d00a      	beq.n	80043a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60fb      	str	r3, [r7, #12]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60bb      	str	r3, [r7, #8]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d02c      	beq.n	8004430 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d128      	bne.n	8004430 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fa78 	bl	80028d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <xTaskPriorityDisinherit+0xd4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d903      	bls.n	8004410 <xTaskPriorityDisinherit+0xa4>
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4a0c      	ldr	r2, [pc, #48]	; (8004440 <xTaskPriorityDisinherit+0xd4>)
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4a09      	ldr	r2, [pc, #36]	; (8004444 <xTaskPriorityDisinherit+0xd8>)
 800441e:	441a      	add	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	3304      	adds	r3, #4
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f7fe f9f9 	bl	800281e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800442c:	2301      	movs	r3, #1
 800442e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004430:	697b      	ldr	r3, [r7, #20]
	}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	2000074c 	.word	0x2000074c
 8004440:	20000c28 	.word	0x20000c28
 8004444:	20000750 	.word	0x20000750

08004448 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004456:	2301      	movs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d06a      	beq.n	8004536 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60fb      	str	r3, [r7, #12]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d902      	bls.n	800448e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	61fb      	str	r3, [r7, #28]
 800448c:	e002      	b.n	8004494 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004492:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	429a      	cmp	r2, r3
 800449c:	d04b      	beq.n	8004536 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d146      	bne.n	8004536 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044a8:	4b25      	ldr	r3, [pc, #148]	; (8004540 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d10a      	bne.n	80044c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	60bb      	str	r3, [r7, #8]
}
 80044c4:	bf00      	nop
 80044c6:	e7fe      	b.n	80044c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	db04      	blt.n	80044e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	6959      	ldr	r1, [r3, #20]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4a13      	ldr	r2, [pc, #76]	; (8004544 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80044f6:	4413      	add	r3, r2
 80044f8:	4299      	cmp	r1, r3
 80044fa:	d11c      	bne.n	8004536 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	3304      	adds	r3, #4
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe f9e9 	bl	80028d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d903      	bls.n	800451a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4a07      	ldr	r2, [pc, #28]	; (8004544 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004528:	441a      	add	r2, r3
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	3304      	adds	r3, #4
 800452e:	4619      	mov	r1, r3
 8004530:	4610      	mov	r0, r2
 8004532:	f7fe f974 	bl	800281e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004536:	bf00      	nop
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	2000074c 	.word	0x2000074c
 8004544:	20000750 	.word	0x20000750
 8004548:	20000c28 	.word	0x20000c28

0800454c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <pvTaskIncrementMutexHeldCount+0x24>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d004      	beq.n	8004562 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <pvTaskIncrementMutexHeldCount+0x24>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800455e:	3201      	adds	r2, #1
 8004560:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004562:	4b03      	ldr	r3, [pc, #12]	; (8004570 <pvTaskIncrementMutexHeldCount+0x24>)
 8004564:	681b      	ldr	r3, [r3, #0]
	}
 8004566:	4618      	mov	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	2000074c 	.word	0x2000074c

08004574 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800457e:	4b21      	ldr	r3, [pc, #132]	; (8004604 <prvAddCurrentTaskToDelayedList+0x90>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004584:	4b20      	ldr	r3, [pc, #128]	; (8004608 <prvAddCurrentTaskToDelayedList+0x94>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3304      	adds	r3, #4
 800458a:	4618      	mov	r0, r3
 800458c:	f7fe f9a4 	bl	80028d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d10a      	bne.n	80045ae <prvAddCurrentTaskToDelayedList+0x3a>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <prvAddCurrentTaskToDelayedList+0x94>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4819      	ldr	r0, [pc, #100]	; (800460c <prvAddCurrentTaskToDelayedList+0x98>)
 80045a8:	f7fe f939 	bl	800281e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045ac:	e026      	b.n	80045fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045b6:	4b14      	ldr	r3, [pc, #80]	; (8004608 <prvAddCurrentTaskToDelayedList+0x94>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d209      	bcs.n	80045da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <prvAddCurrentTaskToDelayedList+0x94>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7fe f947 	bl	8002866 <vListInsert>
}
 80045d8:	e010      	b.n	80045fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <prvAddCurrentTaskToDelayedList+0x94>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f7fe f93d 	bl	8002866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d202      	bcs.n	80045fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	6013      	str	r3, [r2, #0]
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000c24 	.word	0x20000c24
 8004608:	2000074c 	.word	0x2000074c
 800460c:	20000c0c 	.word	0x20000c0c
 8004610:	20000bdc 	.word	0x20000bdc
 8004614:	20000bd8 	.word	0x20000bd8
 8004618:	20000c40 	.word	0x20000c40

0800461c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	; 0x28
 8004620:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004626:	f000 fb07 	bl	8004c38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800462a:	4b1c      	ldr	r3, [pc, #112]	; (800469c <xTimerCreateTimerTask+0x80>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d021      	beq.n	8004676 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800463a:	1d3a      	adds	r2, r7, #4
 800463c:	f107 0108 	add.w	r1, r7, #8
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe f8a3 	bl	8002790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	9202      	str	r2, [sp, #8]
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	2302      	movs	r3, #2
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2300      	movs	r3, #0
 800465a:	460a      	mov	r2, r1
 800465c:	4910      	ldr	r1, [pc, #64]	; (80046a0 <xTimerCreateTimerTask+0x84>)
 800465e:	4811      	ldr	r0, [pc, #68]	; (80046a4 <xTimerCreateTimerTask+0x88>)
 8004660:	f7fe ffe0 	bl	8003624 <xTaskCreateStatic>
 8004664:	4603      	mov	r3, r0
 8004666:	4a10      	ldr	r2, [pc, #64]	; (80046a8 <xTimerCreateTimerTask+0x8c>)
 8004668:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <xTimerCreateTimerTask+0x8c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004672:	2301      	movs	r3, #1
 8004674:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	613b      	str	r3, [r7, #16]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004692:	697b      	ldr	r3, [r7, #20]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000c7c 	.word	0x20000c7c
 80046a0:	080064c8 	.word	0x080064c8
 80046a4:	080047e1 	.word	0x080047e1
 80046a8:	20000c80 	.word	0x20000c80

080046ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <xTimerGenericCommand+0x2e>
	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	623b      	str	r3, [r7, #32]
}
 80046d6:	bf00      	nop
 80046d8:	e7fe      	b.n	80046d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <xTimerGenericCommand+0x98>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d02a      	beq.n	8004738 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	dc18      	bgt.n	8004726 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046f4:	f7ff fdb4 	bl	8004260 <xTaskGetSchedulerState>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d109      	bne.n	8004712 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046fe:	4b11      	ldr	r3, [pc, #68]	; (8004744 <xTimerGenericCommand+0x98>)
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	f107 0110 	add.w	r1, r7, #16
 8004706:	2300      	movs	r3, #0
 8004708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470a:	f7fe fa7f 	bl	8002c0c <xQueueGenericSend>
 800470e:	6278      	str	r0, [r7, #36]	; 0x24
 8004710:	e012      	b.n	8004738 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004712:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <xTimerGenericCommand+0x98>)
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	f107 0110 	add.w	r1, r7, #16
 800471a:	2300      	movs	r3, #0
 800471c:	2200      	movs	r2, #0
 800471e:	f7fe fa75 	bl	8002c0c <xQueueGenericSend>
 8004722:	6278      	str	r0, [r7, #36]	; 0x24
 8004724:	e008      	b.n	8004738 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <xTimerGenericCommand+0x98>)
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	f107 0110 	add.w	r1, r7, #16
 800472e:	2300      	movs	r3, #0
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	f7fe fb69 	bl	8002e08 <xQueueGenericSendFromISR>
 8004736:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800473a:	4618      	mov	r0, r3
 800473c:	3728      	adds	r7, #40	; 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000c7c 	.word	0x20000c7c

08004748 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af02      	add	r7, sp, #8
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004752:	4b22      	ldr	r3, [pc, #136]	; (80047dc <prvProcessExpiredTimer+0x94>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3304      	adds	r3, #4
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe f8b9 	bl	80028d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d022      	beq.n	80047ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	699a      	ldr	r2, [r3, #24]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	18d1      	adds	r1, r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	6978      	ldr	r0, [r7, #20]
 8004782:	f000 f8d1 	bl	8004928 <prvInsertTimerInActiveList>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01f      	beq.n	80047cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800478c:	2300      	movs	r3, #0
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2300      	movs	r3, #0
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	2100      	movs	r1, #0
 8004796:	6978      	ldr	r0, [r7, #20]
 8004798:	f7ff ff88 	bl	80046ac <xTimerGenericCommand>
 800479c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d113      	bne.n	80047cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	60fb      	str	r3, [r7, #12]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	6978      	ldr	r0, [r7, #20]
 80047d2:	4798      	blx	r3
}
 80047d4:	bf00      	nop
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000c74 	.word	0x20000c74

080047e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047e8:	f107 0308 	add.w	r3, r7, #8
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f857 	bl	80048a0 <prvGetNextExpireTime>
 80047f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4619      	mov	r1, r3
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f803 	bl	8004804 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047fe:	f000 f8d5 	bl	80049ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004802:	e7f1      	b.n	80047e8 <prvTimerTask+0x8>

08004804 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800480e:	f7ff f945 	bl	8003a9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004812:	f107 0308 	add.w	r3, r7, #8
 8004816:	4618      	mov	r0, r3
 8004818:	f000 f866 	bl	80048e8 <prvSampleTimeNow>
 800481c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d130      	bne.n	8004886 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10a      	bne.n	8004840 <prvProcessTimerOrBlockTask+0x3c>
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	429a      	cmp	r2, r3
 8004830:	d806      	bhi.n	8004840 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004832:	f7ff f941 	bl	8003ab8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff ff85 	bl	8004748 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800483e:	e024      	b.n	800488a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d008      	beq.n	8004858 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <prvProcessTimerOrBlockTask+0x90>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <prvProcessTimerOrBlockTask+0x50>
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <prvProcessTimerOrBlockTask+0x52>
 8004854:	2300      	movs	r3, #0
 8004856:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <prvProcessTimerOrBlockTask+0x94>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	f7fe fea9 	bl	80035bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800486a:	f7ff f925 	bl	8003ab8 <xTaskResumeAll>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <prvProcessTimerOrBlockTask+0x98>)
 8004876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	f3bf 8f6f 	isb	sy
}
 8004884:	e001      	b.n	800488a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004886:	f7ff f917 	bl	8003ab8 <xTaskResumeAll>
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000c78 	.word	0x20000c78
 8004898:	20000c7c 	.word	0x20000c7c
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048a8:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <prvGetNextExpireTime+0x44>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <prvGetNextExpireTime+0x16>
 80048b2:	2201      	movs	r2, #1
 80048b4:	e000      	b.n	80048b8 <prvGetNextExpireTime+0x18>
 80048b6:	2200      	movs	r2, #0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <prvGetNextExpireTime+0x44>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	e001      	b.n	80048d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048d4:	68fb      	ldr	r3, [r7, #12]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000c74 	.word	0x20000c74

080048e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048f0:	f7ff f980 	bl	8003bf4 <xTaskGetTickCount>
 80048f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <prvSampleTimeNow+0x3c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d205      	bcs.n	800490c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004900:	f000 f936 	bl	8004b70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e002      	b.n	8004912 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004912:	4a04      	ldr	r2, [pc, #16]	; (8004924 <prvSampleTimeNow+0x3c>)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004918:	68fb      	ldr	r3, [r7, #12]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000c84 	.word	0x20000c84

08004928 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d812      	bhi.n	8004974 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	1ad2      	subs	r2, r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	429a      	cmp	r2, r3
 800495a:	d302      	bcc.n	8004962 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e01b      	b.n	800499a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <prvInsertTimerInActiveList+0x7c>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3304      	adds	r3, #4
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f7fd ff7a 	bl	8002866 <vListInsert>
 8004972:	e012      	b.n	800499a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d206      	bcs.n	800498a <prvInsertTimerInActiveList+0x62>
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	e007      	b.n	800499a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <prvInsertTimerInActiveList+0x80>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fd ff66 	bl	8002866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800499a:	697b      	ldr	r3, [r7, #20]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000c78 	.word	0x20000c78
 80049a8:	20000c74 	.word	0x20000c74

080049ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08e      	sub	sp, #56	; 0x38
 80049b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049b2:	e0ca      	b.n	8004b4a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	da18      	bge.n	80049ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049ba:	1d3b      	adds	r3, r7, #4
 80049bc:	3304      	adds	r3, #4
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	61fb      	str	r3, [r7, #28]
}
 80049d8:	bf00      	nop
 80049da:	e7fe      	b.n	80049da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e2:	6850      	ldr	r0, [r2, #4]
 80049e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e6:	6892      	ldr	r2, [r2, #8]
 80049e8:	4611      	mov	r1, r2
 80049ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f2c0 80aa 	blt.w	8004b48 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	3304      	adds	r3, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fd ff67 	bl	80028d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff ff6b 	bl	80048e8 <prvSampleTimeNow>
 8004a12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b09      	cmp	r3, #9
 8004a18:	f200 8097 	bhi.w	8004b4a <prvProcessReceivedCommands+0x19e>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <prvProcessReceivedCommands+0x78>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a4d 	.word	0x08004a4d
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004a4d 	.word	0x08004a4d
 8004a30:	08004ac1 	.word	0x08004ac1
 8004a34:	08004ad5 	.word	0x08004ad5
 8004a38:	08004b1f 	.word	0x08004b1f
 8004a3c:	08004a4d 	.word	0x08004a4d
 8004a40:	08004a4d 	.word	0x08004a4d
 8004a44:	08004ac1 	.word	0x08004ac1
 8004a48:	08004ad5 	.word	0x08004ad5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	18d1      	adds	r1, r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a6c:	f7ff ff5c 	bl	8004928 <prvInsertTimerInActiveList>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d069      	beq.n	8004b4a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d05e      	beq.n	8004b4a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	441a      	add	r2, r3
 8004a94:	2300      	movs	r3, #0
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9e:	f7ff fe05 	bl	80046ac <xTimerGenericCommand>
 8004aa2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d14f      	bne.n	8004b4a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	61bb      	str	r3, [r7, #24]
}
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ad2:	e03a      	b.n	8004b4a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	617b      	str	r3, [r7, #20]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	18d1      	adds	r1, r2, r3
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b18:	f7ff ff06 	bl	8004928 <prvInsertTimerInActiveList>
					break;
 8004b1c:	e015      	b.n	8004b4a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2e:	f000 fbdf 	bl	80052f0 <vPortFree>
 8004b32:	e00a      	b.n	8004b4a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b3a:	f023 0301 	bic.w	r3, r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b46:	e000      	b.n	8004b4a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b4a:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <prvProcessReceivedCommands+0x1c0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	1d39      	adds	r1, r7, #4
 8004b50:	2200      	movs	r2, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe f9f4 	bl	8002f40 <xQueueReceive>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f47f af2a 	bne.w	80049b4 <prvProcessReceivedCommands+0x8>
	}
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	3730      	adds	r7, #48	; 0x30
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000c7c 	.word	0x20000c7c

08004b70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b76:	e048      	b.n	8004c0a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b78:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <prvSwitchTimerLists+0xc0>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b82:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <prvSwitchTimerLists+0xc0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd fea1 	bl	80028d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02e      	beq.n	8004c0a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d90e      	bls.n	8004bdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bca:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <prvSwitchTimerLists+0xc0>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f7fd fe46 	bl	8002866 <vListInsert>
 8004bda:	e016      	b.n	8004c0a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2300      	movs	r3, #0
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	2100      	movs	r1, #0
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fd60 	bl	80046ac <xTimerGenericCommand>
 8004bec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	603b      	str	r3, [r7, #0]
}
 8004c06:	bf00      	nop
 8004c08:	e7fe      	b.n	8004c08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <prvSwitchTimerLists+0xc0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1b1      	bne.n	8004b78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <prvSwitchTimerLists+0xc0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <prvSwitchTimerLists+0xc4>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <prvSwitchTimerLists+0xc0>)
 8004c20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c22:	4a04      	ldr	r2, [pc, #16]	; (8004c34 <prvSwitchTimerLists+0xc4>)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	6013      	str	r3, [r2, #0]
}
 8004c28:	bf00      	nop
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20000c74 	.word	0x20000c74
 8004c34:	20000c78 	.word	0x20000c78

08004c38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c3e:	f000 f969 	bl	8004f14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <prvCheckForValidListAndQueue+0x60>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d120      	bne.n	8004c8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c4a:	4814      	ldr	r0, [pc, #80]	; (8004c9c <prvCheckForValidListAndQueue+0x64>)
 8004c4c:	f7fd fdba 	bl	80027c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c50:	4813      	ldr	r0, [pc, #76]	; (8004ca0 <prvCheckForValidListAndQueue+0x68>)
 8004c52:	f7fd fdb7 	bl	80027c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <prvCheckForValidListAndQueue+0x6c>)
 8004c58:	4a10      	ldr	r2, [pc, #64]	; (8004c9c <prvCheckForValidListAndQueue+0x64>)
 8004c5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <prvCheckForValidListAndQueue+0x70>)
 8004c5e:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <prvCheckForValidListAndQueue+0x68>)
 8004c60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c62:	2300      	movs	r3, #0
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <prvCheckForValidListAndQueue+0x74>)
 8004c68:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <prvCheckForValidListAndQueue+0x78>)
 8004c6a:	2110      	movs	r1, #16
 8004c6c:	200a      	movs	r0, #10
 8004c6e:	f7fd fec5 	bl	80029fc <xQueueGenericCreateStatic>
 8004c72:	4603      	mov	r3, r0
 8004c74:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <prvCheckForValidListAndQueue+0x60>)
 8004c76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c78:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <prvCheckForValidListAndQueue+0x60>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <prvCheckForValidListAndQueue+0x60>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	490b      	ldr	r1, [pc, #44]	; (8004cb4 <prvCheckForValidListAndQueue+0x7c>)
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe fc6e 	bl	8003568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c8c:	f000 f972 	bl	8004f74 <vPortExitCritical>
}
 8004c90:	bf00      	nop
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000c7c 	.word	0x20000c7c
 8004c9c:	20000c4c 	.word	0x20000c4c
 8004ca0:	20000c60 	.word	0x20000c60
 8004ca4:	20000c74 	.word	0x20000c74
 8004ca8:	20000c78 	.word	0x20000c78
 8004cac:	20000d28 	.word	0x20000d28
 8004cb0:	20000c88 	.word	0x20000c88
 8004cb4:	080064d0 	.word	0x080064d0

08004cb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3b04      	subs	r3, #4
 8004cc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3b04      	subs	r3, #4
 8004cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f023 0201 	bic.w	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3b04      	subs	r3, #4
 8004ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ce8:	4a0c      	ldr	r2, [pc, #48]	; (8004d1c <pxPortInitialiseStack+0x64>)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3b14      	subs	r3, #20
 8004cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3b04      	subs	r3, #4
 8004cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f06f 0202 	mvn.w	r2, #2
 8004d06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3b20      	subs	r3, #32
 8004d0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	08004d21 	.word	0x08004d21

08004d20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <prvTaskExitError+0x54>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d00a      	beq.n	8004d4a <prvTaskExitError+0x2a>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	60fb      	str	r3, [r7, #12]
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <prvTaskExitError+0x28>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	60bb      	str	r3, [r7, #8]
}
 8004d5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d5e:	bf00      	nop
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0fc      	beq.n	8004d60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	2000000c 	.word	0x2000000c
	...

08004d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d80:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <pxCurrentTCBConst2>)
 8004d82:	6819      	ldr	r1, [r3, #0]
 8004d84:	6808      	ldr	r0, [r1, #0]
 8004d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8a:	f380 8809 	msr	PSP, r0
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f04f 0000 	mov.w	r0, #0
 8004d96:	f380 8811 	msr	BASEPRI, r0
 8004d9a:	4770      	bx	lr
 8004d9c:	f3af 8000 	nop.w

08004da0 <pxCurrentTCBConst2>:
 8004da0:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004da4:	bf00      	nop
 8004da6:	bf00      	nop

08004da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004da8:	4808      	ldr	r0, [pc, #32]	; (8004dcc <prvPortStartFirstTask+0x24>)
 8004daa:	6800      	ldr	r0, [r0, #0]
 8004dac:	6800      	ldr	r0, [r0, #0]
 8004dae:	f380 8808 	msr	MSP, r0
 8004db2:	f04f 0000 	mov.w	r0, #0
 8004db6:	f380 8814 	msr	CONTROL, r0
 8004dba:	b662      	cpsie	i
 8004dbc:	b661      	cpsie	f
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	df00      	svc	0
 8004dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dca:	bf00      	nop
 8004dcc:	e000ed08 	.word	0xe000ed08

08004dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dd6:	4b46      	ldr	r3, [pc, #280]	; (8004ef0 <xPortStartScheduler+0x120>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a46      	ldr	r2, [pc, #280]	; (8004ef4 <xPortStartScheduler+0x124>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10a      	bne.n	8004df6 <xPortStartScheduler+0x26>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	613b      	str	r3, [r7, #16]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004df6:	4b3e      	ldr	r3, [pc, #248]	; (8004ef0 <xPortStartScheduler+0x120>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a3f      	ldr	r2, [pc, #252]	; (8004ef8 <xPortStartScheduler+0x128>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d10a      	bne.n	8004e16 <xPortStartScheduler+0x46>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	60fb      	str	r3, [r7, #12]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e16:	4b39      	ldr	r3, [pc, #228]	; (8004efc <xPortStartScheduler+0x12c>)
 8004e18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	22ff      	movs	r2, #255	; 0xff
 8004e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4b31      	ldr	r3, [pc, #196]	; (8004f00 <xPortStartScheduler+0x130>)
 8004e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e3e:	4b31      	ldr	r3, [pc, #196]	; (8004f04 <xPortStartScheduler+0x134>)
 8004e40:	2207      	movs	r2, #7
 8004e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e44:	e009      	b.n	8004e5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e46:	4b2f      	ldr	r3, [pc, #188]	; (8004f04 <xPortStartScheduler+0x134>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	4a2d      	ldr	r2, [pc, #180]	; (8004f04 <xPortStartScheduler+0x134>)
 8004e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e62:	2b80      	cmp	r3, #128	; 0x80
 8004e64:	d0ef      	beq.n	8004e46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e66:	4b27      	ldr	r3, [pc, #156]	; (8004f04 <xPortStartScheduler+0x134>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f1c3 0307 	rsb	r3, r3, #7
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d00a      	beq.n	8004e88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	60bb      	str	r3, [r7, #8]
}
 8004e84:	bf00      	nop
 8004e86:	e7fe      	b.n	8004e86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e88:	4b1e      	ldr	r3, [pc, #120]	; (8004f04 <xPortStartScheduler+0x134>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	4a1d      	ldr	r2, [pc, #116]	; (8004f04 <xPortStartScheduler+0x134>)
 8004e90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e92:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <xPortStartScheduler+0x134>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e9a:	4a1a      	ldr	r2, [pc, #104]	; (8004f04 <xPortStartScheduler+0x134>)
 8004e9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ea6:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <xPortStartScheduler+0x138>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a17      	ldr	r2, [pc, #92]	; (8004f08 <xPortStartScheduler+0x138>)
 8004eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004eb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <xPortStartScheduler+0x138>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a14      	ldr	r2, [pc, #80]	; (8004f08 <xPortStartScheduler+0x138>)
 8004eb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ebe:	f000 f8dd 	bl	800507c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <xPortStartScheduler+0x13c>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ec8:	f000 f8fc 	bl	80050c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ecc:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <xPortStartScheduler+0x140>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0f      	ldr	r2, [pc, #60]	; (8004f10 <xPortStartScheduler+0x140>)
 8004ed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ed6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ed8:	f7ff ff66 	bl	8004da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004edc:	f7fe ff54 	bl	8003d88 <vTaskSwitchContext>
	prvTaskExitError();
 8004ee0:	f7ff ff1e 	bl	8004d20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	e000ed00 	.word	0xe000ed00
 8004ef4:	410fc271 	.word	0x410fc271
 8004ef8:	410fc270 	.word	0x410fc270
 8004efc:	e000e400 	.word	0xe000e400
 8004f00:	20000d78 	.word	0x20000d78
 8004f04:	20000d7c 	.word	0x20000d7c
 8004f08:	e000ed20 	.word	0xe000ed20
 8004f0c:	2000000c 	.word	0x2000000c
 8004f10:	e000ef34 	.word	0xe000ef34

08004f14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	607b      	str	r3, [r7, #4]
}
 8004f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f2e:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <vPortEnterCritical+0x58>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3301      	adds	r3, #1
 8004f34:	4a0d      	ldr	r2, [pc, #52]	; (8004f6c <vPortEnterCritical+0x58>)
 8004f36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <vPortEnterCritical+0x58>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10f      	bne.n	8004f60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <vPortEnterCritical+0x5c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	603b      	str	r3, [r7, #0]
}
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <vPortEnterCritical+0x4a>
	}
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	2000000c 	.word	0x2000000c
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f7a:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <vPortExitCritical+0x50>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <vPortExitCritical+0x24>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	607b      	str	r3, [r7, #4]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <vPortExitCritical+0x50>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <vPortExitCritical+0x50>)
 8004fa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fa2:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <vPortExitCritical+0x50>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d105      	bne.n	8004fb6 <vPortExitCritical+0x42>
 8004faa:	2300      	movs	r3, #0
 8004fac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f383 8811 	msr	BASEPRI, r3
}
 8004fb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	2000000c 	.word	0x2000000c
	...

08004fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fd0:	f3ef 8009 	mrs	r0, PSP
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	4b15      	ldr	r3, [pc, #84]	; (8005030 <pxCurrentTCBConst>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	f01e 0f10 	tst.w	lr, #16
 8004fe0:	bf08      	it	eq
 8004fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fea:	6010      	str	r0, [r2, #0]
 8004fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ff4:	f380 8811 	msr	BASEPRI, r0
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f7fe fec2 	bl	8003d88 <vTaskSwitchContext>
 8005004:	f04f 0000 	mov.w	r0, #0
 8005008:	f380 8811 	msr	BASEPRI, r0
 800500c:	bc09      	pop	{r0, r3}
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	6808      	ldr	r0, [r1, #0]
 8005012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005016:	f01e 0f10 	tst.w	lr, #16
 800501a:	bf08      	it	eq
 800501c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005020:	f380 8809 	msr	PSP, r0
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	f3af 8000 	nop.w

08005030 <pxCurrentTCBConst>:
 8005030:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop

08005038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005052:	f7fe fddf 	bl	8003c14 <xTaskIncrementTick>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <xPortSysTickHandler+0x40>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	2300      	movs	r3, #0
 8005066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f383 8811 	msr	BASEPRI, r3
}
 800506e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <vPortSetupTimerInterrupt+0x34>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <vPortSetupTimerInterrupt+0x38>)
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <vPortSetupTimerInterrupt+0x3c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <vPortSetupTimerInterrupt+0x40>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	099b      	lsrs	r3, r3, #6
 8005098:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <vPortSetupTimerInterrupt+0x44>)
 800509a:	3b01      	subs	r3, #1
 800509c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <vPortSetupTimerInterrupt+0x34>)
 80050a0:	2207      	movs	r2, #7
 80050a2:	601a      	str	r2, [r3, #0]
}
 80050a4:	bf00      	nop
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	e000e010 	.word	0xe000e010
 80050b4:	e000e018 	.word	0xe000e018
 80050b8:	20000000 	.word	0x20000000
 80050bc:	10624dd3 	.word	0x10624dd3
 80050c0:	e000e014 	.word	0xe000e014

080050c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050d4 <vPortEnableVFP+0x10>
 80050c8:	6801      	ldr	r1, [r0, #0]
 80050ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050ce:	6001      	str	r1, [r0, #0]
 80050d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050d2:	bf00      	nop
 80050d4:	e000ed88 	.word	0xe000ed88

080050d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050de:	f3ef 8305 	mrs	r3, IPSR
 80050e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b0f      	cmp	r3, #15
 80050e8:	d914      	bls.n	8005114 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050ea:	4a17      	ldr	r2, [pc, #92]	; (8005148 <vPortValidateInterruptPriority+0x70>)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050f4:	4b15      	ldr	r3, [pc, #84]	; (800514c <vPortValidateInterruptPriority+0x74>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	7afa      	ldrb	r2, [r7, #11]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d20a      	bcs.n	8005114 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	607b      	str	r3, [r7, #4]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005114:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <vPortValidateInterruptPriority+0x78>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800511c:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <vPortValidateInterruptPriority+0x7c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d90a      	bls.n	800513a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	603b      	str	r3, [r7, #0]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <vPortValidateInterruptPriority+0x60>
	}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	e000e3f0 	.word	0xe000e3f0
 800514c:	20000d78 	.word	0x20000d78
 8005150:	e000ed0c 	.word	0xe000ed0c
 8005154:	20000d7c 	.word	0x20000d7c

08005158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005160:	2300      	movs	r3, #0
 8005162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005164:	f7fe fc9a 	bl	8003a9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005168:	4b5b      	ldr	r3, [pc, #364]	; (80052d8 <pvPortMalloc+0x180>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005170:	f000 f920 	bl	80053b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005174:	4b59      	ldr	r3, [pc, #356]	; (80052dc <pvPortMalloc+0x184>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	f040 8093 	bne.w	80052a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01d      	beq.n	80051c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005188:	2208      	movs	r2, #8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	2b00      	cmp	r3, #0
 8005198:	d014      	beq.n	80051c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f023 0307 	bic.w	r3, r3, #7
 80051a0:	3308      	adds	r3, #8
 80051a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <pvPortMalloc+0x6c>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	617b      	str	r3, [r7, #20]
}
 80051c0:	bf00      	nop
 80051c2:	e7fe      	b.n	80051c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d06e      	beq.n	80052a8 <pvPortMalloc+0x150>
 80051ca:	4b45      	ldr	r3, [pc, #276]	; (80052e0 <pvPortMalloc+0x188>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d869      	bhi.n	80052a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051d4:	4b43      	ldr	r3, [pc, #268]	; (80052e4 <pvPortMalloc+0x18c>)
 80051d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <pvPortMalloc+0x18c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051de:	e004      	b.n	80051ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d903      	bls.n	80051fc <pvPortMalloc+0xa4>
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f1      	bne.n	80051e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051fc:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <pvPortMalloc+0x180>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005202:	429a      	cmp	r2, r3
 8005204:	d050      	beq.n	80052a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2208      	movs	r2, #8
 800520c:	4413      	add	r3, r2
 800520e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	2308      	movs	r3, #8
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	429a      	cmp	r2, r3
 8005226:	d91f      	bls.n	8005268 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4413      	add	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <pvPortMalloc+0xf8>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	613b      	str	r3, [r7, #16]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	1ad2      	subs	r2, r2, r3
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005262:	69b8      	ldr	r0, [r7, #24]
 8005264:	f000 f908 	bl	8005478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005268:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <pvPortMalloc+0x188>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <pvPortMalloc+0x188>)
 8005274:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005276:	4b1a      	ldr	r3, [pc, #104]	; (80052e0 <pvPortMalloc+0x188>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <pvPortMalloc+0x190>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d203      	bcs.n	800528a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005282:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <pvPortMalloc+0x188>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <pvPortMalloc+0x190>)
 8005288:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <pvPortMalloc+0x184>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	431a      	orrs	r2, r3
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <pvPortMalloc+0x194>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3301      	adds	r3, #1
 80052a4:	4a11      	ldr	r2, [pc, #68]	; (80052ec <pvPortMalloc+0x194>)
 80052a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052a8:	f7fe fc06 	bl	8003ab8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <pvPortMalloc+0x174>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	60fb      	str	r3, [r7, #12]
}
 80052c8:	bf00      	nop
 80052ca:	e7fe      	b.n	80052ca <pvPortMalloc+0x172>
	return pvReturn;
 80052cc:	69fb      	ldr	r3, [r7, #28]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3728      	adds	r7, #40	; 0x28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20004988 	.word	0x20004988
 80052dc:	2000499c 	.word	0x2000499c
 80052e0:	2000498c 	.word	0x2000498c
 80052e4:	20004980 	.word	0x20004980
 80052e8:	20004990 	.word	0x20004990
 80052ec:	20004994 	.word	0x20004994

080052f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d04d      	beq.n	800539e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005302:	2308      	movs	r3, #8
 8005304:	425b      	negs	r3, r3
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4413      	add	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <vPortFree+0xb8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <vPortFree+0x44>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	60fb      	str	r3, [r7, #12]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <vPortFree+0x62>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	60bb      	str	r3, [r7, #8]
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <vPortFree+0xb8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01e      	beq.n	800539e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d11a      	bne.n	800539e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <vPortFree+0xb8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	43db      	mvns	r3, r3
 8005372:	401a      	ands	r2, r3
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005378:	f7fe fb90 	bl	8003a9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <vPortFree+0xbc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4413      	add	r3, r2
 8005386:	4a09      	ldr	r2, [pc, #36]	; (80053ac <vPortFree+0xbc>)
 8005388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800538a:	6938      	ldr	r0, [r7, #16]
 800538c:	f000 f874 	bl	8005478 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005390:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <vPortFree+0xc0>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	4a06      	ldr	r2, [pc, #24]	; (80053b0 <vPortFree+0xc0>)
 8005398:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800539a:	f7fe fb8d 	bl	8003ab8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800539e:	bf00      	nop
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	2000499c 	.word	0x2000499c
 80053ac:	2000498c 	.word	0x2000498c
 80053b0:	20004998 	.word	0x20004998

080053b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053c0:	4b27      	ldr	r3, [pc, #156]	; (8005460 <prvHeapInit+0xac>)
 80053c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00c      	beq.n	80053e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3307      	adds	r3, #7
 80053d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <prvHeapInit+0xac>)
 80053e4:	4413      	add	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053ec:	4a1d      	ldr	r2, [pc, #116]	; (8005464 <prvHeapInit+0xb0>)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053f2:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <prvHeapInit+0xb0>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	4413      	add	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005400:	2208      	movs	r2, #8
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0307 	bic.w	r3, r3, #7
 800540e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a15      	ldr	r2, [pc, #84]	; (8005468 <prvHeapInit+0xb4>)
 8005414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <prvHeapInit+0xb4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800541e:	4b12      	ldr	r3, [pc, #72]	; (8005468 <prvHeapInit+0xb4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <prvHeapInit+0xb4>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4a0a      	ldr	r2, [pc, #40]	; (800546c <prvHeapInit+0xb8>)
 8005442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4a09      	ldr	r2, [pc, #36]	; (8005470 <prvHeapInit+0xbc>)
 800544a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800544c:	4b09      	ldr	r3, [pc, #36]	; (8005474 <prvHeapInit+0xc0>)
 800544e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	bf00      	nop
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	20000d80 	.word	0x20000d80
 8005464:	20004980 	.word	0x20004980
 8005468:	20004988 	.word	0x20004988
 800546c:	20004990 	.word	0x20004990
 8005470:	2000498c 	.word	0x2000498c
 8005474:	2000499c 	.word	0x2000499c

08005478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005480:	4b28      	ldr	r3, [pc, #160]	; (8005524 <prvInsertBlockIntoFreeList+0xac>)
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e002      	b.n	800548c <prvInsertBlockIntoFreeList+0x14>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	429a      	cmp	r2, r3
 8005494:	d8f7      	bhi.n	8005486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	4413      	add	r3, r2
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d108      	bne.n	80054ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	441a      	add	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	441a      	add	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d118      	bne.n	8005500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b15      	ldr	r3, [pc, #84]	; (8005528 <prvInsertBlockIntoFreeList+0xb0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d00d      	beq.n	80054f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	441a      	add	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	e008      	b.n	8005508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <prvInsertBlockIntoFreeList+0xb0>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e003      	b.n	8005508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d002      	beq.n	8005516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20004980 	.word	0x20004980
 8005528:	20004988 	.word	0x20004988

0800552c <__errno>:
 800552c:	4b01      	ldr	r3, [pc, #4]	; (8005534 <__errno+0x8>)
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20000010 	.word	0x20000010

08005538 <__libc_init_array>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	4d0d      	ldr	r5, [pc, #52]	; (8005570 <__libc_init_array+0x38>)
 800553c:	4c0d      	ldr	r4, [pc, #52]	; (8005574 <__libc_init_array+0x3c>)
 800553e:	1b64      	subs	r4, r4, r5
 8005540:	10a4      	asrs	r4, r4, #2
 8005542:	2600      	movs	r6, #0
 8005544:	42a6      	cmp	r6, r4
 8005546:	d109      	bne.n	800555c <__libc_init_array+0x24>
 8005548:	4d0b      	ldr	r5, [pc, #44]	; (8005578 <__libc_init_array+0x40>)
 800554a:	4c0c      	ldr	r4, [pc, #48]	; (800557c <__libc_init_array+0x44>)
 800554c:	f000 ff84 	bl	8006458 <_init>
 8005550:	1b64      	subs	r4, r4, r5
 8005552:	10a4      	asrs	r4, r4, #2
 8005554:	2600      	movs	r6, #0
 8005556:	42a6      	cmp	r6, r4
 8005558:	d105      	bne.n	8005566 <__libc_init_array+0x2e>
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005560:	4798      	blx	r3
 8005562:	3601      	adds	r6, #1
 8005564:	e7ee      	b.n	8005544 <__libc_init_array+0xc>
 8005566:	f855 3b04 	ldr.w	r3, [r5], #4
 800556a:	4798      	blx	r3
 800556c:	3601      	adds	r6, #1
 800556e:	e7f2      	b.n	8005556 <__libc_init_array+0x1e>
 8005570:	08006590 	.word	0x08006590
 8005574:	08006590 	.word	0x08006590
 8005578:	08006590 	.word	0x08006590
 800557c:	08006594 	.word	0x08006594

08005580 <memcpy>:
 8005580:	440a      	add	r2, r1
 8005582:	4291      	cmp	r1, r2
 8005584:	f100 33ff 	add.w	r3, r0, #4294967295
 8005588:	d100      	bne.n	800558c <memcpy+0xc>
 800558a:	4770      	bx	lr
 800558c:	b510      	push	{r4, lr}
 800558e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005596:	4291      	cmp	r1, r2
 8005598:	d1f9      	bne.n	800558e <memcpy+0xe>
 800559a:	bd10      	pop	{r4, pc}

0800559c <memset>:
 800559c:	4402      	add	r2, r0
 800559e:	4603      	mov	r3, r0
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d100      	bne.n	80055a6 <memset+0xa>
 80055a4:	4770      	bx	lr
 80055a6:	f803 1b01 	strb.w	r1, [r3], #1
 80055aa:	e7f9      	b.n	80055a0 <memset+0x4>

080055ac <iprintf>:
 80055ac:	b40f      	push	{r0, r1, r2, r3}
 80055ae:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <iprintf+0x2c>)
 80055b0:	b513      	push	{r0, r1, r4, lr}
 80055b2:	681c      	ldr	r4, [r3, #0]
 80055b4:	b124      	cbz	r4, 80055c0 <iprintf+0x14>
 80055b6:	69a3      	ldr	r3, [r4, #24]
 80055b8:	b913      	cbnz	r3, 80055c0 <iprintf+0x14>
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 f866 	bl	800568c <__sinit>
 80055c0:	ab05      	add	r3, sp, #20
 80055c2:	9a04      	ldr	r2, [sp, #16]
 80055c4:	68a1      	ldr	r1, [r4, #8]
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	4620      	mov	r0, r4
 80055ca:	f000 f983 	bl	80058d4 <_vfiprintf_r>
 80055ce:	b002      	add	sp, #8
 80055d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d4:	b004      	add	sp, #16
 80055d6:	4770      	bx	lr
 80055d8:	20000010 	.word	0x20000010

080055dc <std>:
 80055dc:	2300      	movs	r3, #0
 80055de:	b510      	push	{r4, lr}
 80055e0:	4604      	mov	r4, r0
 80055e2:	e9c0 3300 	strd	r3, r3, [r0]
 80055e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ea:	6083      	str	r3, [r0, #8]
 80055ec:	8181      	strh	r1, [r0, #12]
 80055ee:	6643      	str	r3, [r0, #100]	; 0x64
 80055f0:	81c2      	strh	r2, [r0, #14]
 80055f2:	6183      	str	r3, [r0, #24]
 80055f4:	4619      	mov	r1, r3
 80055f6:	2208      	movs	r2, #8
 80055f8:	305c      	adds	r0, #92	; 0x5c
 80055fa:	f7ff ffcf 	bl	800559c <memset>
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <std+0x38>)
 8005600:	6263      	str	r3, [r4, #36]	; 0x24
 8005602:	4b05      	ldr	r3, [pc, #20]	; (8005618 <std+0x3c>)
 8005604:	62a3      	str	r3, [r4, #40]	; 0x28
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <std+0x40>)
 8005608:	62e3      	str	r3, [r4, #44]	; 0x2c
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <std+0x44>)
 800560c:	6224      	str	r4, [r4, #32]
 800560e:	6323      	str	r3, [r4, #48]	; 0x30
 8005610:	bd10      	pop	{r4, pc}
 8005612:	bf00      	nop
 8005614:	08005e7d 	.word	0x08005e7d
 8005618:	08005e9f 	.word	0x08005e9f
 800561c:	08005ed7 	.word	0x08005ed7
 8005620:	08005efb 	.word	0x08005efb

08005624 <_cleanup_r>:
 8005624:	4901      	ldr	r1, [pc, #4]	; (800562c <_cleanup_r+0x8>)
 8005626:	f000 b8af 	b.w	8005788 <_fwalk_reent>
 800562a:	bf00      	nop
 800562c:	080061d5 	.word	0x080061d5

08005630 <__sfmoreglue>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	1e4a      	subs	r2, r1, #1
 8005634:	2568      	movs	r5, #104	; 0x68
 8005636:	4355      	muls	r5, r2
 8005638:	460e      	mov	r6, r1
 800563a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800563e:	f000 f8c5 	bl	80057cc <_malloc_r>
 8005642:	4604      	mov	r4, r0
 8005644:	b140      	cbz	r0, 8005658 <__sfmoreglue+0x28>
 8005646:	2100      	movs	r1, #0
 8005648:	e9c0 1600 	strd	r1, r6, [r0]
 800564c:	300c      	adds	r0, #12
 800564e:	60a0      	str	r0, [r4, #8]
 8005650:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005654:	f7ff ffa2 	bl	800559c <memset>
 8005658:	4620      	mov	r0, r4
 800565a:	bd70      	pop	{r4, r5, r6, pc}

0800565c <__sfp_lock_acquire>:
 800565c:	4801      	ldr	r0, [pc, #4]	; (8005664 <__sfp_lock_acquire+0x8>)
 800565e:	f000 b8b3 	b.w	80057c8 <__retarget_lock_acquire_recursive>
 8005662:	bf00      	nop
 8005664:	20004a8c 	.word	0x20004a8c

08005668 <__sfp_lock_release>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__sfp_lock_release+0x8>)
 800566a:	f000 b8ae 	b.w	80057ca <__retarget_lock_release_recursive>
 800566e:	bf00      	nop
 8005670:	20004a8c 	.word	0x20004a8c

08005674 <__sinit_lock_acquire>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__sinit_lock_acquire+0x8>)
 8005676:	f000 b8a7 	b.w	80057c8 <__retarget_lock_acquire_recursive>
 800567a:	bf00      	nop
 800567c:	20004a87 	.word	0x20004a87

08005680 <__sinit_lock_release>:
 8005680:	4801      	ldr	r0, [pc, #4]	; (8005688 <__sinit_lock_release+0x8>)
 8005682:	f000 b8a2 	b.w	80057ca <__retarget_lock_release_recursive>
 8005686:	bf00      	nop
 8005688:	20004a87 	.word	0x20004a87

0800568c <__sinit>:
 800568c:	b510      	push	{r4, lr}
 800568e:	4604      	mov	r4, r0
 8005690:	f7ff fff0 	bl	8005674 <__sinit_lock_acquire>
 8005694:	69a3      	ldr	r3, [r4, #24]
 8005696:	b11b      	cbz	r3, 80056a0 <__sinit+0x14>
 8005698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569c:	f7ff bff0 	b.w	8005680 <__sinit_lock_release>
 80056a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056a4:	6523      	str	r3, [r4, #80]	; 0x50
 80056a6:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <__sinit+0x68>)
 80056a8:	4a13      	ldr	r2, [pc, #76]	; (80056f8 <__sinit+0x6c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	bf04      	itt	eq
 80056b2:	2301      	moveq	r3, #1
 80056b4:	61a3      	streq	r3, [r4, #24]
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 f820 	bl	80056fc <__sfp>
 80056bc:	6060      	str	r0, [r4, #4]
 80056be:	4620      	mov	r0, r4
 80056c0:	f000 f81c 	bl	80056fc <__sfp>
 80056c4:	60a0      	str	r0, [r4, #8]
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 f818 	bl	80056fc <__sfp>
 80056cc:	2200      	movs	r2, #0
 80056ce:	60e0      	str	r0, [r4, #12]
 80056d0:	2104      	movs	r1, #4
 80056d2:	6860      	ldr	r0, [r4, #4]
 80056d4:	f7ff ff82 	bl	80055dc <std>
 80056d8:	68a0      	ldr	r0, [r4, #8]
 80056da:	2201      	movs	r2, #1
 80056dc:	2109      	movs	r1, #9
 80056de:	f7ff ff7d 	bl	80055dc <std>
 80056e2:	68e0      	ldr	r0, [r4, #12]
 80056e4:	2202      	movs	r2, #2
 80056e6:	2112      	movs	r1, #18
 80056e8:	f7ff ff78 	bl	80055dc <std>
 80056ec:	2301      	movs	r3, #1
 80056ee:	61a3      	str	r3, [r4, #24]
 80056f0:	e7d2      	b.n	8005698 <__sinit+0xc>
 80056f2:	bf00      	nop
 80056f4:	080064f0 	.word	0x080064f0
 80056f8:	08005625 	.word	0x08005625

080056fc <__sfp>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	4607      	mov	r7, r0
 8005700:	f7ff ffac 	bl	800565c <__sfp_lock_acquire>
 8005704:	4b1e      	ldr	r3, [pc, #120]	; (8005780 <__sfp+0x84>)
 8005706:	681e      	ldr	r6, [r3, #0]
 8005708:	69b3      	ldr	r3, [r6, #24]
 800570a:	b913      	cbnz	r3, 8005712 <__sfp+0x16>
 800570c:	4630      	mov	r0, r6
 800570e:	f7ff ffbd 	bl	800568c <__sinit>
 8005712:	3648      	adds	r6, #72	; 0x48
 8005714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005718:	3b01      	subs	r3, #1
 800571a:	d503      	bpl.n	8005724 <__sfp+0x28>
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	b30b      	cbz	r3, 8005764 <__sfp+0x68>
 8005720:	6836      	ldr	r6, [r6, #0]
 8005722:	e7f7      	b.n	8005714 <__sfp+0x18>
 8005724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005728:	b9d5      	cbnz	r5, 8005760 <__sfp+0x64>
 800572a:	4b16      	ldr	r3, [pc, #88]	; (8005784 <__sfp+0x88>)
 800572c:	60e3      	str	r3, [r4, #12]
 800572e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005732:	6665      	str	r5, [r4, #100]	; 0x64
 8005734:	f000 f847 	bl	80057c6 <__retarget_lock_init_recursive>
 8005738:	f7ff ff96 	bl	8005668 <__sfp_lock_release>
 800573c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005740:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005744:	6025      	str	r5, [r4, #0]
 8005746:	61a5      	str	r5, [r4, #24]
 8005748:	2208      	movs	r2, #8
 800574a:	4629      	mov	r1, r5
 800574c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005750:	f7ff ff24 	bl	800559c <memset>
 8005754:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005758:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800575c:	4620      	mov	r0, r4
 800575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005760:	3468      	adds	r4, #104	; 0x68
 8005762:	e7d9      	b.n	8005718 <__sfp+0x1c>
 8005764:	2104      	movs	r1, #4
 8005766:	4638      	mov	r0, r7
 8005768:	f7ff ff62 	bl	8005630 <__sfmoreglue>
 800576c:	4604      	mov	r4, r0
 800576e:	6030      	str	r0, [r6, #0]
 8005770:	2800      	cmp	r0, #0
 8005772:	d1d5      	bne.n	8005720 <__sfp+0x24>
 8005774:	f7ff ff78 	bl	8005668 <__sfp_lock_release>
 8005778:	230c      	movs	r3, #12
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	e7ee      	b.n	800575c <__sfp+0x60>
 800577e:	bf00      	nop
 8005780:	080064f0 	.word	0x080064f0
 8005784:	ffff0001 	.word	0xffff0001

08005788 <_fwalk_reent>:
 8005788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800578c:	4606      	mov	r6, r0
 800578e:	4688      	mov	r8, r1
 8005790:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005794:	2700      	movs	r7, #0
 8005796:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800579a:	f1b9 0901 	subs.w	r9, r9, #1
 800579e:	d505      	bpl.n	80057ac <_fwalk_reent+0x24>
 80057a0:	6824      	ldr	r4, [r4, #0]
 80057a2:	2c00      	cmp	r4, #0
 80057a4:	d1f7      	bne.n	8005796 <_fwalk_reent+0xe>
 80057a6:	4638      	mov	r0, r7
 80057a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ac:	89ab      	ldrh	r3, [r5, #12]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d907      	bls.n	80057c2 <_fwalk_reent+0x3a>
 80057b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057b6:	3301      	adds	r3, #1
 80057b8:	d003      	beq.n	80057c2 <_fwalk_reent+0x3a>
 80057ba:	4629      	mov	r1, r5
 80057bc:	4630      	mov	r0, r6
 80057be:	47c0      	blx	r8
 80057c0:	4307      	orrs	r7, r0
 80057c2:	3568      	adds	r5, #104	; 0x68
 80057c4:	e7e9      	b.n	800579a <_fwalk_reent+0x12>

080057c6 <__retarget_lock_init_recursive>:
 80057c6:	4770      	bx	lr

080057c8 <__retarget_lock_acquire_recursive>:
 80057c8:	4770      	bx	lr

080057ca <__retarget_lock_release_recursive>:
 80057ca:	4770      	bx	lr

080057cc <_malloc_r>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	1ccd      	adds	r5, r1, #3
 80057d0:	f025 0503 	bic.w	r5, r5, #3
 80057d4:	3508      	adds	r5, #8
 80057d6:	2d0c      	cmp	r5, #12
 80057d8:	bf38      	it	cc
 80057da:	250c      	movcc	r5, #12
 80057dc:	2d00      	cmp	r5, #0
 80057de:	4606      	mov	r6, r0
 80057e0:	db01      	blt.n	80057e6 <_malloc_r+0x1a>
 80057e2:	42a9      	cmp	r1, r5
 80057e4:	d903      	bls.n	80057ee <_malloc_r+0x22>
 80057e6:	230c      	movs	r3, #12
 80057e8:	6033      	str	r3, [r6, #0]
 80057ea:	2000      	movs	r0, #0
 80057ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ee:	f000 fda3 	bl	8006338 <__malloc_lock>
 80057f2:	4921      	ldr	r1, [pc, #132]	; (8005878 <_malloc_r+0xac>)
 80057f4:	680a      	ldr	r2, [r1, #0]
 80057f6:	4614      	mov	r4, r2
 80057f8:	b99c      	cbnz	r4, 8005822 <_malloc_r+0x56>
 80057fa:	4f20      	ldr	r7, [pc, #128]	; (800587c <_malloc_r+0xb0>)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	b923      	cbnz	r3, 800580a <_malloc_r+0x3e>
 8005800:	4621      	mov	r1, r4
 8005802:	4630      	mov	r0, r6
 8005804:	f000 fb2a 	bl	8005e5c <_sbrk_r>
 8005808:	6038      	str	r0, [r7, #0]
 800580a:	4629      	mov	r1, r5
 800580c:	4630      	mov	r0, r6
 800580e:	f000 fb25 	bl	8005e5c <_sbrk_r>
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	d123      	bne.n	800585e <_malloc_r+0x92>
 8005816:	230c      	movs	r3, #12
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	4630      	mov	r0, r6
 800581c:	f000 fd92 	bl	8006344 <__malloc_unlock>
 8005820:	e7e3      	b.n	80057ea <_malloc_r+0x1e>
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	1b5b      	subs	r3, r3, r5
 8005826:	d417      	bmi.n	8005858 <_malloc_r+0x8c>
 8005828:	2b0b      	cmp	r3, #11
 800582a:	d903      	bls.n	8005834 <_malloc_r+0x68>
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	441c      	add	r4, r3
 8005830:	6025      	str	r5, [r4, #0]
 8005832:	e004      	b.n	800583e <_malloc_r+0x72>
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	42a2      	cmp	r2, r4
 8005838:	bf0c      	ite	eq
 800583a:	600b      	streq	r3, [r1, #0]
 800583c:	6053      	strne	r3, [r2, #4]
 800583e:	4630      	mov	r0, r6
 8005840:	f000 fd80 	bl	8006344 <__malloc_unlock>
 8005844:	f104 000b 	add.w	r0, r4, #11
 8005848:	1d23      	adds	r3, r4, #4
 800584a:	f020 0007 	bic.w	r0, r0, #7
 800584e:	1ac2      	subs	r2, r0, r3
 8005850:	d0cc      	beq.n	80057ec <_malloc_r+0x20>
 8005852:	1a1b      	subs	r3, r3, r0
 8005854:	50a3      	str	r3, [r4, r2]
 8005856:	e7c9      	b.n	80057ec <_malloc_r+0x20>
 8005858:	4622      	mov	r2, r4
 800585a:	6864      	ldr	r4, [r4, #4]
 800585c:	e7cc      	b.n	80057f8 <_malloc_r+0x2c>
 800585e:	1cc4      	adds	r4, r0, #3
 8005860:	f024 0403 	bic.w	r4, r4, #3
 8005864:	42a0      	cmp	r0, r4
 8005866:	d0e3      	beq.n	8005830 <_malloc_r+0x64>
 8005868:	1a21      	subs	r1, r4, r0
 800586a:	4630      	mov	r0, r6
 800586c:	f000 faf6 	bl	8005e5c <_sbrk_r>
 8005870:	3001      	adds	r0, #1
 8005872:	d1dd      	bne.n	8005830 <_malloc_r+0x64>
 8005874:	e7cf      	b.n	8005816 <_malloc_r+0x4a>
 8005876:	bf00      	nop
 8005878:	200049a0 	.word	0x200049a0
 800587c:	200049a4 	.word	0x200049a4

08005880 <__sfputc_r>:
 8005880:	6893      	ldr	r3, [r2, #8]
 8005882:	3b01      	subs	r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	b410      	push	{r4}
 8005888:	6093      	str	r3, [r2, #8]
 800588a:	da08      	bge.n	800589e <__sfputc_r+0x1e>
 800588c:	6994      	ldr	r4, [r2, #24]
 800588e:	42a3      	cmp	r3, r4
 8005890:	db01      	blt.n	8005896 <__sfputc_r+0x16>
 8005892:	290a      	cmp	r1, #10
 8005894:	d103      	bne.n	800589e <__sfputc_r+0x1e>
 8005896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800589a:	f000 bb33 	b.w	8005f04 <__swbuf_r>
 800589e:	6813      	ldr	r3, [r2, #0]
 80058a0:	1c58      	adds	r0, r3, #1
 80058a2:	6010      	str	r0, [r2, #0]
 80058a4:	7019      	strb	r1, [r3, #0]
 80058a6:	4608      	mov	r0, r1
 80058a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <__sfputs_r>:
 80058ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b0:	4606      	mov	r6, r0
 80058b2:	460f      	mov	r7, r1
 80058b4:	4614      	mov	r4, r2
 80058b6:	18d5      	adds	r5, r2, r3
 80058b8:	42ac      	cmp	r4, r5
 80058ba:	d101      	bne.n	80058c0 <__sfputs_r+0x12>
 80058bc:	2000      	movs	r0, #0
 80058be:	e007      	b.n	80058d0 <__sfputs_r+0x22>
 80058c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c4:	463a      	mov	r2, r7
 80058c6:	4630      	mov	r0, r6
 80058c8:	f7ff ffda 	bl	8005880 <__sfputc_r>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d1f3      	bne.n	80058b8 <__sfputs_r+0xa>
 80058d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058d4 <_vfiprintf_r>:
 80058d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d8:	460d      	mov	r5, r1
 80058da:	b09d      	sub	sp, #116	; 0x74
 80058dc:	4614      	mov	r4, r2
 80058de:	4698      	mov	r8, r3
 80058e0:	4606      	mov	r6, r0
 80058e2:	b118      	cbz	r0, 80058ec <_vfiprintf_r+0x18>
 80058e4:	6983      	ldr	r3, [r0, #24]
 80058e6:	b90b      	cbnz	r3, 80058ec <_vfiprintf_r+0x18>
 80058e8:	f7ff fed0 	bl	800568c <__sinit>
 80058ec:	4b89      	ldr	r3, [pc, #548]	; (8005b14 <_vfiprintf_r+0x240>)
 80058ee:	429d      	cmp	r5, r3
 80058f0:	d11b      	bne.n	800592a <_vfiprintf_r+0x56>
 80058f2:	6875      	ldr	r5, [r6, #4]
 80058f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058f6:	07d9      	lsls	r1, r3, #31
 80058f8:	d405      	bmi.n	8005906 <_vfiprintf_r+0x32>
 80058fa:	89ab      	ldrh	r3, [r5, #12]
 80058fc:	059a      	lsls	r2, r3, #22
 80058fe:	d402      	bmi.n	8005906 <_vfiprintf_r+0x32>
 8005900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005902:	f7ff ff61 	bl	80057c8 <__retarget_lock_acquire_recursive>
 8005906:	89ab      	ldrh	r3, [r5, #12]
 8005908:	071b      	lsls	r3, r3, #28
 800590a:	d501      	bpl.n	8005910 <_vfiprintf_r+0x3c>
 800590c:	692b      	ldr	r3, [r5, #16]
 800590e:	b9eb      	cbnz	r3, 800594c <_vfiprintf_r+0x78>
 8005910:	4629      	mov	r1, r5
 8005912:	4630      	mov	r0, r6
 8005914:	f000 fb5a 	bl	8005fcc <__swsetup_r>
 8005918:	b1c0      	cbz	r0, 800594c <_vfiprintf_r+0x78>
 800591a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800591c:	07dc      	lsls	r4, r3, #31
 800591e:	d50e      	bpl.n	800593e <_vfiprintf_r+0x6a>
 8005920:	f04f 30ff 	mov.w	r0, #4294967295
 8005924:	b01d      	add	sp, #116	; 0x74
 8005926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592a:	4b7b      	ldr	r3, [pc, #492]	; (8005b18 <_vfiprintf_r+0x244>)
 800592c:	429d      	cmp	r5, r3
 800592e:	d101      	bne.n	8005934 <_vfiprintf_r+0x60>
 8005930:	68b5      	ldr	r5, [r6, #8]
 8005932:	e7df      	b.n	80058f4 <_vfiprintf_r+0x20>
 8005934:	4b79      	ldr	r3, [pc, #484]	; (8005b1c <_vfiprintf_r+0x248>)
 8005936:	429d      	cmp	r5, r3
 8005938:	bf08      	it	eq
 800593a:	68f5      	ldreq	r5, [r6, #12]
 800593c:	e7da      	b.n	80058f4 <_vfiprintf_r+0x20>
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	0598      	lsls	r0, r3, #22
 8005942:	d4ed      	bmi.n	8005920 <_vfiprintf_r+0x4c>
 8005944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005946:	f7ff ff40 	bl	80057ca <__retarget_lock_release_recursive>
 800594a:	e7e9      	b.n	8005920 <_vfiprintf_r+0x4c>
 800594c:	2300      	movs	r3, #0
 800594e:	9309      	str	r3, [sp, #36]	; 0x24
 8005950:	2320      	movs	r3, #32
 8005952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005956:	f8cd 800c 	str.w	r8, [sp, #12]
 800595a:	2330      	movs	r3, #48	; 0x30
 800595c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b20 <_vfiprintf_r+0x24c>
 8005960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005964:	f04f 0901 	mov.w	r9, #1
 8005968:	4623      	mov	r3, r4
 800596a:	469a      	mov	sl, r3
 800596c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005970:	b10a      	cbz	r2, 8005976 <_vfiprintf_r+0xa2>
 8005972:	2a25      	cmp	r2, #37	; 0x25
 8005974:	d1f9      	bne.n	800596a <_vfiprintf_r+0x96>
 8005976:	ebba 0b04 	subs.w	fp, sl, r4
 800597a:	d00b      	beq.n	8005994 <_vfiprintf_r+0xc0>
 800597c:	465b      	mov	r3, fp
 800597e:	4622      	mov	r2, r4
 8005980:	4629      	mov	r1, r5
 8005982:	4630      	mov	r0, r6
 8005984:	f7ff ff93 	bl	80058ae <__sfputs_r>
 8005988:	3001      	adds	r0, #1
 800598a:	f000 80aa 	beq.w	8005ae2 <_vfiprintf_r+0x20e>
 800598e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005990:	445a      	add	r2, fp
 8005992:	9209      	str	r2, [sp, #36]	; 0x24
 8005994:	f89a 3000 	ldrb.w	r3, [sl]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80a2 	beq.w	8005ae2 <_vfiprintf_r+0x20e>
 800599e:	2300      	movs	r3, #0
 80059a0:	f04f 32ff 	mov.w	r2, #4294967295
 80059a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059a8:	f10a 0a01 	add.w	sl, sl, #1
 80059ac:	9304      	str	r3, [sp, #16]
 80059ae:	9307      	str	r3, [sp, #28]
 80059b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059b4:	931a      	str	r3, [sp, #104]	; 0x68
 80059b6:	4654      	mov	r4, sl
 80059b8:	2205      	movs	r2, #5
 80059ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059be:	4858      	ldr	r0, [pc, #352]	; (8005b20 <_vfiprintf_r+0x24c>)
 80059c0:	f7fa fc0e 	bl	80001e0 <memchr>
 80059c4:	9a04      	ldr	r2, [sp, #16]
 80059c6:	b9d8      	cbnz	r0, 8005a00 <_vfiprintf_r+0x12c>
 80059c8:	06d1      	lsls	r1, r2, #27
 80059ca:	bf44      	itt	mi
 80059cc:	2320      	movmi	r3, #32
 80059ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d2:	0713      	lsls	r3, r2, #28
 80059d4:	bf44      	itt	mi
 80059d6:	232b      	movmi	r3, #43	; 0x2b
 80059d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059dc:	f89a 3000 	ldrb.w	r3, [sl]
 80059e0:	2b2a      	cmp	r3, #42	; 0x2a
 80059e2:	d015      	beq.n	8005a10 <_vfiprintf_r+0x13c>
 80059e4:	9a07      	ldr	r2, [sp, #28]
 80059e6:	4654      	mov	r4, sl
 80059e8:	2000      	movs	r0, #0
 80059ea:	f04f 0c0a 	mov.w	ip, #10
 80059ee:	4621      	mov	r1, r4
 80059f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f4:	3b30      	subs	r3, #48	; 0x30
 80059f6:	2b09      	cmp	r3, #9
 80059f8:	d94e      	bls.n	8005a98 <_vfiprintf_r+0x1c4>
 80059fa:	b1b0      	cbz	r0, 8005a2a <_vfiprintf_r+0x156>
 80059fc:	9207      	str	r2, [sp, #28]
 80059fe:	e014      	b.n	8005a2a <_vfiprintf_r+0x156>
 8005a00:	eba0 0308 	sub.w	r3, r0, r8
 8005a04:	fa09 f303 	lsl.w	r3, r9, r3
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	9304      	str	r3, [sp, #16]
 8005a0c:	46a2      	mov	sl, r4
 8005a0e:	e7d2      	b.n	80059b6 <_vfiprintf_r+0xe2>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	1d19      	adds	r1, r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	9103      	str	r1, [sp, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	bfbb      	ittet	lt
 8005a1c:	425b      	neglt	r3, r3
 8005a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a22:	9307      	strge	r3, [sp, #28]
 8005a24:	9307      	strlt	r3, [sp, #28]
 8005a26:	bfb8      	it	lt
 8005a28:	9204      	strlt	r2, [sp, #16]
 8005a2a:	7823      	ldrb	r3, [r4, #0]
 8005a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a2e:	d10c      	bne.n	8005a4a <_vfiprintf_r+0x176>
 8005a30:	7863      	ldrb	r3, [r4, #1]
 8005a32:	2b2a      	cmp	r3, #42	; 0x2a
 8005a34:	d135      	bne.n	8005aa2 <_vfiprintf_r+0x1ce>
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	1d1a      	adds	r2, r3, #4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	9203      	str	r2, [sp, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bfb8      	it	lt
 8005a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a46:	3402      	adds	r4, #2
 8005a48:	9305      	str	r3, [sp, #20]
 8005a4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b30 <_vfiprintf_r+0x25c>
 8005a4e:	7821      	ldrb	r1, [r4, #0]
 8005a50:	2203      	movs	r2, #3
 8005a52:	4650      	mov	r0, sl
 8005a54:	f7fa fbc4 	bl	80001e0 <memchr>
 8005a58:	b140      	cbz	r0, 8005a6c <_vfiprintf_r+0x198>
 8005a5a:	2340      	movs	r3, #64	; 0x40
 8005a5c:	eba0 000a 	sub.w	r0, r0, sl
 8005a60:	fa03 f000 	lsl.w	r0, r3, r0
 8005a64:	9b04      	ldr	r3, [sp, #16]
 8005a66:	4303      	orrs	r3, r0
 8005a68:	3401      	adds	r4, #1
 8005a6a:	9304      	str	r3, [sp, #16]
 8005a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a70:	482c      	ldr	r0, [pc, #176]	; (8005b24 <_vfiprintf_r+0x250>)
 8005a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a76:	2206      	movs	r2, #6
 8005a78:	f7fa fbb2 	bl	80001e0 <memchr>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d03f      	beq.n	8005b00 <_vfiprintf_r+0x22c>
 8005a80:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <_vfiprintf_r+0x254>)
 8005a82:	bb1b      	cbnz	r3, 8005acc <_vfiprintf_r+0x1f8>
 8005a84:	9b03      	ldr	r3, [sp, #12]
 8005a86:	3307      	adds	r3, #7
 8005a88:	f023 0307 	bic.w	r3, r3, #7
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	9303      	str	r3, [sp, #12]
 8005a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a92:	443b      	add	r3, r7
 8005a94:	9309      	str	r3, [sp, #36]	; 0x24
 8005a96:	e767      	b.n	8005968 <_vfiprintf_r+0x94>
 8005a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	e7a5      	b.n	80059ee <_vfiprintf_r+0x11a>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	3401      	adds	r4, #1
 8005aa6:	9305      	str	r3, [sp, #20]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	f04f 0c0a 	mov.w	ip, #10
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ab4:	3a30      	subs	r2, #48	; 0x30
 8005ab6:	2a09      	cmp	r2, #9
 8005ab8:	d903      	bls.n	8005ac2 <_vfiprintf_r+0x1ee>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0c5      	beq.n	8005a4a <_vfiprintf_r+0x176>
 8005abe:	9105      	str	r1, [sp, #20]
 8005ac0:	e7c3      	b.n	8005a4a <_vfiprintf_r+0x176>
 8005ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e7f0      	b.n	8005aae <_vfiprintf_r+0x1da>
 8005acc:	ab03      	add	r3, sp, #12
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4b16      	ldr	r3, [pc, #88]	; (8005b2c <_vfiprintf_r+0x258>)
 8005ad4:	a904      	add	r1, sp, #16
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f3af 8000 	nop.w
 8005adc:	4607      	mov	r7, r0
 8005ade:	1c78      	adds	r0, r7, #1
 8005ae0:	d1d6      	bne.n	8005a90 <_vfiprintf_r+0x1bc>
 8005ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ae4:	07d9      	lsls	r1, r3, #31
 8005ae6:	d405      	bmi.n	8005af4 <_vfiprintf_r+0x220>
 8005ae8:	89ab      	ldrh	r3, [r5, #12]
 8005aea:	059a      	lsls	r2, r3, #22
 8005aec:	d402      	bmi.n	8005af4 <_vfiprintf_r+0x220>
 8005aee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005af0:	f7ff fe6b 	bl	80057ca <__retarget_lock_release_recursive>
 8005af4:	89ab      	ldrh	r3, [r5, #12]
 8005af6:	065b      	lsls	r3, r3, #25
 8005af8:	f53f af12 	bmi.w	8005920 <_vfiprintf_r+0x4c>
 8005afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005afe:	e711      	b.n	8005924 <_vfiprintf_r+0x50>
 8005b00:	ab03      	add	r3, sp, #12
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	462a      	mov	r2, r5
 8005b06:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <_vfiprintf_r+0x258>)
 8005b08:	a904      	add	r1, sp, #16
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f000 f880 	bl	8005c10 <_printf_i>
 8005b10:	e7e4      	b.n	8005adc <_vfiprintf_r+0x208>
 8005b12:	bf00      	nop
 8005b14:	08006514 	.word	0x08006514
 8005b18:	08006534 	.word	0x08006534
 8005b1c:	080064f4 	.word	0x080064f4
 8005b20:	08006554 	.word	0x08006554
 8005b24:	0800655e 	.word	0x0800655e
 8005b28:	00000000 	.word	0x00000000
 8005b2c:	080058af 	.word	0x080058af
 8005b30:	0800655a 	.word	0x0800655a

08005b34 <_printf_common>:
 8005b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b38:	4616      	mov	r6, r2
 8005b3a:	4699      	mov	r9, r3
 8005b3c:	688a      	ldr	r2, [r1, #8]
 8005b3e:	690b      	ldr	r3, [r1, #16]
 8005b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b44:	4293      	cmp	r3, r2
 8005b46:	bfb8      	it	lt
 8005b48:	4613      	movlt	r3, r2
 8005b4a:	6033      	str	r3, [r6, #0]
 8005b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b50:	4607      	mov	r7, r0
 8005b52:	460c      	mov	r4, r1
 8005b54:	b10a      	cbz	r2, 8005b5a <_printf_common+0x26>
 8005b56:	3301      	adds	r3, #1
 8005b58:	6033      	str	r3, [r6, #0]
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	0699      	lsls	r1, r3, #26
 8005b5e:	bf42      	ittt	mi
 8005b60:	6833      	ldrmi	r3, [r6, #0]
 8005b62:	3302      	addmi	r3, #2
 8005b64:	6033      	strmi	r3, [r6, #0]
 8005b66:	6825      	ldr	r5, [r4, #0]
 8005b68:	f015 0506 	ands.w	r5, r5, #6
 8005b6c:	d106      	bne.n	8005b7c <_printf_common+0x48>
 8005b6e:	f104 0a19 	add.w	sl, r4, #25
 8005b72:	68e3      	ldr	r3, [r4, #12]
 8005b74:	6832      	ldr	r2, [r6, #0]
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	42ab      	cmp	r3, r5
 8005b7a:	dc26      	bgt.n	8005bca <_printf_common+0x96>
 8005b7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b80:	1e13      	subs	r3, r2, #0
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	bf18      	it	ne
 8005b86:	2301      	movne	r3, #1
 8005b88:	0692      	lsls	r2, r2, #26
 8005b8a:	d42b      	bmi.n	8005be4 <_printf_common+0xb0>
 8005b8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b90:	4649      	mov	r1, r9
 8005b92:	4638      	mov	r0, r7
 8005b94:	47c0      	blx	r8
 8005b96:	3001      	adds	r0, #1
 8005b98:	d01e      	beq.n	8005bd8 <_printf_common+0xa4>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	68e5      	ldr	r5, [r4, #12]
 8005b9e:	6832      	ldr	r2, [r6, #0]
 8005ba0:	f003 0306 	and.w	r3, r3, #6
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	bf08      	it	eq
 8005ba8:	1aad      	subeq	r5, r5, r2
 8005baa:	68a3      	ldr	r3, [r4, #8]
 8005bac:	6922      	ldr	r2, [r4, #16]
 8005bae:	bf0c      	ite	eq
 8005bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb4:	2500      	movne	r5, #0
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	bfc4      	itt	gt
 8005bba:	1a9b      	subgt	r3, r3, r2
 8005bbc:	18ed      	addgt	r5, r5, r3
 8005bbe:	2600      	movs	r6, #0
 8005bc0:	341a      	adds	r4, #26
 8005bc2:	42b5      	cmp	r5, r6
 8005bc4:	d11a      	bne.n	8005bfc <_printf_common+0xc8>
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	e008      	b.n	8005bdc <_printf_common+0xa8>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4652      	mov	r2, sl
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	47c0      	blx	r8
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d103      	bne.n	8005be0 <_printf_common+0xac>
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be0:	3501      	adds	r5, #1
 8005be2:	e7c6      	b.n	8005b72 <_printf_common+0x3e>
 8005be4:	18e1      	adds	r1, r4, r3
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	2030      	movs	r0, #48	; 0x30
 8005bea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bee:	4422      	add	r2, r4
 8005bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	e7c7      	b.n	8005b8c <_printf_common+0x58>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	4622      	mov	r2, r4
 8005c00:	4649      	mov	r1, r9
 8005c02:	4638      	mov	r0, r7
 8005c04:	47c0      	blx	r8
 8005c06:	3001      	adds	r0, #1
 8005c08:	d0e6      	beq.n	8005bd8 <_printf_common+0xa4>
 8005c0a:	3601      	adds	r6, #1
 8005c0c:	e7d9      	b.n	8005bc2 <_printf_common+0x8e>
	...

08005c10 <_printf_i>:
 8005c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c14:	460c      	mov	r4, r1
 8005c16:	4691      	mov	r9, r2
 8005c18:	7e27      	ldrb	r7, [r4, #24]
 8005c1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c1c:	2f78      	cmp	r7, #120	; 0x78
 8005c1e:	4680      	mov	r8, r0
 8005c20:	469a      	mov	sl, r3
 8005c22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c26:	d807      	bhi.n	8005c38 <_printf_i+0x28>
 8005c28:	2f62      	cmp	r7, #98	; 0x62
 8005c2a:	d80a      	bhi.n	8005c42 <_printf_i+0x32>
 8005c2c:	2f00      	cmp	r7, #0
 8005c2e:	f000 80d8 	beq.w	8005de2 <_printf_i+0x1d2>
 8005c32:	2f58      	cmp	r7, #88	; 0x58
 8005c34:	f000 80a3 	beq.w	8005d7e <_printf_i+0x16e>
 8005c38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c40:	e03a      	b.n	8005cb8 <_printf_i+0xa8>
 8005c42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c46:	2b15      	cmp	r3, #21
 8005c48:	d8f6      	bhi.n	8005c38 <_printf_i+0x28>
 8005c4a:	a001      	add	r0, pc, #4	; (adr r0, 8005c50 <_printf_i+0x40>)
 8005c4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c50:	08005ca9 	.word	0x08005ca9
 8005c54:	08005cbd 	.word	0x08005cbd
 8005c58:	08005c39 	.word	0x08005c39
 8005c5c:	08005c39 	.word	0x08005c39
 8005c60:	08005c39 	.word	0x08005c39
 8005c64:	08005c39 	.word	0x08005c39
 8005c68:	08005cbd 	.word	0x08005cbd
 8005c6c:	08005c39 	.word	0x08005c39
 8005c70:	08005c39 	.word	0x08005c39
 8005c74:	08005c39 	.word	0x08005c39
 8005c78:	08005c39 	.word	0x08005c39
 8005c7c:	08005dc9 	.word	0x08005dc9
 8005c80:	08005ced 	.word	0x08005ced
 8005c84:	08005dab 	.word	0x08005dab
 8005c88:	08005c39 	.word	0x08005c39
 8005c8c:	08005c39 	.word	0x08005c39
 8005c90:	08005deb 	.word	0x08005deb
 8005c94:	08005c39 	.word	0x08005c39
 8005c98:	08005ced 	.word	0x08005ced
 8005c9c:	08005c39 	.word	0x08005c39
 8005ca0:	08005c39 	.word	0x08005c39
 8005ca4:	08005db3 	.word	0x08005db3
 8005ca8:	680b      	ldr	r3, [r1, #0]
 8005caa:	1d1a      	adds	r2, r3, #4
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	600a      	str	r2, [r1, #0]
 8005cb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0a3      	b.n	8005e04 <_printf_i+0x1f4>
 8005cbc:	6825      	ldr	r5, [r4, #0]
 8005cbe:	6808      	ldr	r0, [r1, #0]
 8005cc0:	062e      	lsls	r6, r5, #24
 8005cc2:	f100 0304 	add.w	r3, r0, #4
 8005cc6:	d50a      	bpl.n	8005cde <_printf_i+0xce>
 8005cc8:	6805      	ldr	r5, [r0, #0]
 8005cca:	600b      	str	r3, [r1, #0]
 8005ccc:	2d00      	cmp	r5, #0
 8005cce:	da03      	bge.n	8005cd8 <_printf_i+0xc8>
 8005cd0:	232d      	movs	r3, #45	; 0x2d
 8005cd2:	426d      	negs	r5, r5
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd8:	485e      	ldr	r0, [pc, #376]	; (8005e54 <_printf_i+0x244>)
 8005cda:	230a      	movs	r3, #10
 8005cdc:	e019      	b.n	8005d12 <_printf_i+0x102>
 8005cde:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ce2:	6805      	ldr	r5, [r0, #0]
 8005ce4:	600b      	str	r3, [r1, #0]
 8005ce6:	bf18      	it	ne
 8005ce8:	b22d      	sxthne	r5, r5
 8005cea:	e7ef      	b.n	8005ccc <_printf_i+0xbc>
 8005cec:	680b      	ldr	r3, [r1, #0]
 8005cee:	6825      	ldr	r5, [r4, #0]
 8005cf0:	1d18      	adds	r0, r3, #4
 8005cf2:	6008      	str	r0, [r1, #0]
 8005cf4:	0628      	lsls	r0, r5, #24
 8005cf6:	d501      	bpl.n	8005cfc <_printf_i+0xec>
 8005cf8:	681d      	ldr	r5, [r3, #0]
 8005cfa:	e002      	b.n	8005d02 <_printf_i+0xf2>
 8005cfc:	0669      	lsls	r1, r5, #25
 8005cfe:	d5fb      	bpl.n	8005cf8 <_printf_i+0xe8>
 8005d00:	881d      	ldrh	r5, [r3, #0]
 8005d02:	4854      	ldr	r0, [pc, #336]	; (8005e54 <_printf_i+0x244>)
 8005d04:	2f6f      	cmp	r7, #111	; 0x6f
 8005d06:	bf0c      	ite	eq
 8005d08:	2308      	moveq	r3, #8
 8005d0a:	230a      	movne	r3, #10
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d12:	6866      	ldr	r6, [r4, #4]
 8005d14:	60a6      	str	r6, [r4, #8]
 8005d16:	2e00      	cmp	r6, #0
 8005d18:	bfa2      	ittt	ge
 8005d1a:	6821      	ldrge	r1, [r4, #0]
 8005d1c:	f021 0104 	bicge.w	r1, r1, #4
 8005d20:	6021      	strge	r1, [r4, #0]
 8005d22:	b90d      	cbnz	r5, 8005d28 <_printf_i+0x118>
 8005d24:	2e00      	cmp	r6, #0
 8005d26:	d04d      	beq.n	8005dc4 <_printf_i+0x1b4>
 8005d28:	4616      	mov	r6, r2
 8005d2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d2e:	fb03 5711 	mls	r7, r3, r1, r5
 8005d32:	5dc7      	ldrb	r7, [r0, r7]
 8005d34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d38:	462f      	mov	r7, r5
 8005d3a:	42bb      	cmp	r3, r7
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	d9f4      	bls.n	8005d2a <_printf_i+0x11a>
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d10b      	bne.n	8005d5c <_printf_i+0x14c>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	07df      	lsls	r7, r3, #31
 8005d48:	d508      	bpl.n	8005d5c <_printf_i+0x14c>
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	6861      	ldr	r1, [r4, #4]
 8005d4e:	4299      	cmp	r1, r3
 8005d50:	bfde      	ittt	le
 8005d52:	2330      	movle	r3, #48	; 0x30
 8005d54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d5c:	1b92      	subs	r2, r2, r6
 8005d5e:	6122      	str	r2, [r4, #16]
 8005d60:	f8cd a000 	str.w	sl, [sp]
 8005d64:	464b      	mov	r3, r9
 8005d66:	aa03      	add	r2, sp, #12
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	f7ff fee2 	bl	8005b34 <_printf_common>
 8005d70:	3001      	adds	r0, #1
 8005d72:	d14c      	bne.n	8005e0e <_printf_i+0x1fe>
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	b004      	add	sp, #16
 8005d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d7e:	4835      	ldr	r0, [pc, #212]	; (8005e54 <_printf_i+0x244>)
 8005d80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	680e      	ldr	r6, [r1, #0]
 8005d88:	061f      	lsls	r7, r3, #24
 8005d8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d8e:	600e      	str	r6, [r1, #0]
 8005d90:	d514      	bpl.n	8005dbc <_printf_i+0x1ac>
 8005d92:	07d9      	lsls	r1, r3, #31
 8005d94:	bf44      	itt	mi
 8005d96:	f043 0320 	orrmi.w	r3, r3, #32
 8005d9a:	6023      	strmi	r3, [r4, #0]
 8005d9c:	b91d      	cbnz	r5, 8005da6 <_printf_i+0x196>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	f023 0320 	bic.w	r3, r3, #32
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	2310      	movs	r3, #16
 8005da8:	e7b0      	b.n	8005d0c <_printf_i+0xfc>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	f043 0320 	orr.w	r3, r3, #32
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	2378      	movs	r3, #120	; 0x78
 8005db4:	4828      	ldr	r0, [pc, #160]	; (8005e58 <_printf_i+0x248>)
 8005db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dba:	e7e3      	b.n	8005d84 <_printf_i+0x174>
 8005dbc:	065e      	lsls	r6, r3, #25
 8005dbe:	bf48      	it	mi
 8005dc0:	b2ad      	uxthmi	r5, r5
 8005dc2:	e7e6      	b.n	8005d92 <_printf_i+0x182>
 8005dc4:	4616      	mov	r6, r2
 8005dc6:	e7bb      	b.n	8005d40 <_printf_i+0x130>
 8005dc8:	680b      	ldr	r3, [r1, #0]
 8005dca:	6826      	ldr	r6, [r4, #0]
 8005dcc:	6960      	ldr	r0, [r4, #20]
 8005dce:	1d1d      	adds	r5, r3, #4
 8005dd0:	600d      	str	r5, [r1, #0]
 8005dd2:	0635      	lsls	r5, r6, #24
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	d501      	bpl.n	8005ddc <_printf_i+0x1cc>
 8005dd8:	6018      	str	r0, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <_printf_i+0x1d2>
 8005ddc:	0671      	lsls	r1, r6, #25
 8005dde:	d5fb      	bpl.n	8005dd8 <_printf_i+0x1c8>
 8005de0:	8018      	strh	r0, [r3, #0]
 8005de2:	2300      	movs	r3, #0
 8005de4:	6123      	str	r3, [r4, #16]
 8005de6:	4616      	mov	r6, r2
 8005de8:	e7ba      	b.n	8005d60 <_printf_i+0x150>
 8005dea:	680b      	ldr	r3, [r1, #0]
 8005dec:	1d1a      	adds	r2, r3, #4
 8005dee:	600a      	str	r2, [r1, #0]
 8005df0:	681e      	ldr	r6, [r3, #0]
 8005df2:	6862      	ldr	r2, [r4, #4]
 8005df4:	2100      	movs	r1, #0
 8005df6:	4630      	mov	r0, r6
 8005df8:	f7fa f9f2 	bl	80001e0 <memchr>
 8005dfc:	b108      	cbz	r0, 8005e02 <_printf_i+0x1f2>
 8005dfe:	1b80      	subs	r0, r0, r6
 8005e00:	6060      	str	r0, [r4, #4]
 8005e02:	6863      	ldr	r3, [r4, #4]
 8005e04:	6123      	str	r3, [r4, #16]
 8005e06:	2300      	movs	r3, #0
 8005e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e0c:	e7a8      	b.n	8005d60 <_printf_i+0x150>
 8005e0e:	6923      	ldr	r3, [r4, #16]
 8005e10:	4632      	mov	r2, r6
 8005e12:	4649      	mov	r1, r9
 8005e14:	4640      	mov	r0, r8
 8005e16:	47d0      	blx	sl
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d0ab      	beq.n	8005d74 <_printf_i+0x164>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	079b      	lsls	r3, r3, #30
 8005e20:	d413      	bmi.n	8005e4a <_printf_i+0x23a>
 8005e22:	68e0      	ldr	r0, [r4, #12]
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	4298      	cmp	r0, r3
 8005e28:	bfb8      	it	lt
 8005e2a:	4618      	movlt	r0, r3
 8005e2c:	e7a4      	b.n	8005d78 <_printf_i+0x168>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4632      	mov	r2, r6
 8005e32:	4649      	mov	r1, r9
 8005e34:	4640      	mov	r0, r8
 8005e36:	47d0      	blx	sl
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d09b      	beq.n	8005d74 <_printf_i+0x164>
 8005e3c:	3501      	adds	r5, #1
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	9903      	ldr	r1, [sp, #12]
 8005e42:	1a5b      	subs	r3, r3, r1
 8005e44:	42ab      	cmp	r3, r5
 8005e46:	dcf2      	bgt.n	8005e2e <_printf_i+0x21e>
 8005e48:	e7eb      	b.n	8005e22 <_printf_i+0x212>
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	f104 0619 	add.w	r6, r4, #25
 8005e50:	e7f5      	b.n	8005e3e <_printf_i+0x22e>
 8005e52:	bf00      	nop
 8005e54:	08006565 	.word	0x08006565
 8005e58:	08006576 	.word	0x08006576

08005e5c <_sbrk_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4d06      	ldr	r5, [pc, #24]	; (8005e78 <_sbrk_r+0x1c>)
 8005e60:	2300      	movs	r3, #0
 8005e62:	4604      	mov	r4, r0
 8005e64:	4608      	mov	r0, r1
 8005e66:	602b      	str	r3, [r5, #0]
 8005e68:	f7fa fec2 	bl	8000bf0 <_sbrk>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d102      	bne.n	8005e76 <_sbrk_r+0x1a>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	b103      	cbz	r3, 8005e76 <_sbrk_r+0x1a>
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	20004a90 	.word	0x20004a90

08005e7c <__sread>:
 8005e7c:	b510      	push	{r4, lr}
 8005e7e:	460c      	mov	r4, r1
 8005e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e84:	f000 fab4 	bl	80063f0 <_read_r>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	bfab      	itete	ge
 8005e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e90:	181b      	addge	r3, r3, r0
 8005e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e96:	bfac      	ite	ge
 8005e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e9a:	81a3      	strhlt	r3, [r4, #12]
 8005e9c:	bd10      	pop	{r4, pc}

08005e9e <__swrite>:
 8005e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea2:	461f      	mov	r7, r3
 8005ea4:	898b      	ldrh	r3, [r1, #12]
 8005ea6:	05db      	lsls	r3, r3, #23
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	4616      	mov	r6, r2
 8005eae:	d505      	bpl.n	8005ebc <__swrite+0x1e>
 8005eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f000 f9c8 	bl	800624c <_lseek_r>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	4632      	mov	r2, r6
 8005eca:	463b      	mov	r3, r7
 8005ecc:	4628      	mov	r0, r5
 8005ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed2:	f000 b869 	b.w	8005fa8 <_write_r>

08005ed6 <__sseek>:
 8005ed6:	b510      	push	{r4, lr}
 8005ed8:	460c      	mov	r4, r1
 8005eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ede:	f000 f9b5 	bl	800624c <_lseek_r>
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	bf15      	itete	ne
 8005ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ef2:	81a3      	strheq	r3, [r4, #12]
 8005ef4:	bf18      	it	ne
 8005ef6:	81a3      	strhne	r3, [r4, #12]
 8005ef8:	bd10      	pop	{r4, pc}

08005efa <__sclose>:
 8005efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efe:	f000 b8d3 	b.w	80060a8 <_close_r>
	...

08005f04 <__swbuf_r>:
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	460e      	mov	r6, r1
 8005f08:	4614      	mov	r4, r2
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	b118      	cbz	r0, 8005f16 <__swbuf_r+0x12>
 8005f0e:	6983      	ldr	r3, [r0, #24]
 8005f10:	b90b      	cbnz	r3, 8005f16 <__swbuf_r+0x12>
 8005f12:	f7ff fbbb 	bl	800568c <__sinit>
 8005f16:	4b21      	ldr	r3, [pc, #132]	; (8005f9c <__swbuf_r+0x98>)
 8005f18:	429c      	cmp	r4, r3
 8005f1a:	d12b      	bne.n	8005f74 <__swbuf_r+0x70>
 8005f1c:	686c      	ldr	r4, [r5, #4]
 8005f1e:	69a3      	ldr	r3, [r4, #24]
 8005f20:	60a3      	str	r3, [r4, #8]
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	071a      	lsls	r2, r3, #28
 8005f26:	d52f      	bpl.n	8005f88 <__swbuf_r+0x84>
 8005f28:	6923      	ldr	r3, [r4, #16]
 8005f2a:	b36b      	cbz	r3, 8005f88 <__swbuf_r+0x84>
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	6820      	ldr	r0, [r4, #0]
 8005f30:	1ac0      	subs	r0, r0, r3
 8005f32:	6963      	ldr	r3, [r4, #20]
 8005f34:	b2f6      	uxtb	r6, r6
 8005f36:	4283      	cmp	r3, r0
 8005f38:	4637      	mov	r7, r6
 8005f3a:	dc04      	bgt.n	8005f46 <__swbuf_r+0x42>
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 f948 	bl	80061d4 <_fflush_r>
 8005f44:	bb30      	cbnz	r0, 8005f94 <__swbuf_r+0x90>
 8005f46:	68a3      	ldr	r3, [r4, #8]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	60a3      	str	r3, [r4, #8]
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	6022      	str	r2, [r4, #0]
 8005f52:	701e      	strb	r6, [r3, #0]
 8005f54:	6963      	ldr	r3, [r4, #20]
 8005f56:	3001      	adds	r0, #1
 8005f58:	4283      	cmp	r3, r0
 8005f5a:	d004      	beq.n	8005f66 <__swbuf_r+0x62>
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	07db      	lsls	r3, r3, #31
 8005f60:	d506      	bpl.n	8005f70 <__swbuf_r+0x6c>
 8005f62:	2e0a      	cmp	r6, #10
 8005f64:	d104      	bne.n	8005f70 <__swbuf_r+0x6c>
 8005f66:	4621      	mov	r1, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 f933 	bl	80061d4 <_fflush_r>
 8005f6e:	b988      	cbnz	r0, 8005f94 <__swbuf_r+0x90>
 8005f70:	4638      	mov	r0, r7
 8005f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <__swbuf_r+0x9c>)
 8005f76:	429c      	cmp	r4, r3
 8005f78:	d101      	bne.n	8005f7e <__swbuf_r+0x7a>
 8005f7a:	68ac      	ldr	r4, [r5, #8]
 8005f7c:	e7cf      	b.n	8005f1e <__swbuf_r+0x1a>
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <__swbuf_r+0xa0>)
 8005f80:	429c      	cmp	r4, r3
 8005f82:	bf08      	it	eq
 8005f84:	68ec      	ldreq	r4, [r5, #12]
 8005f86:	e7ca      	b.n	8005f1e <__swbuf_r+0x1a>
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 f81e 	bl	8005fcc <__swsetup_r>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d0cb      	beq.n	8005f2c <__swbuf_r+0x28>
 8005f94:	f04f 37ff 	mov.w	r7, #4294967295
 8005f98:	e7ea      	b.n	8005f70 <__swbuf_r+0x6c>
 8005f9a:	bf00      	nop
 8005f9c:	08006514 	.word	0x08006514
 8005fa0:	08006534 	.word	0x08006534
 8005fa4:	080064f4 	.word	0x080064f4

08005fa8 <_write_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	; (8005fc8 <_write_r+0x20>)
 8005fac:	4604      	mov	r4, r0
 8005fae:	4608      	mov	r0, r1
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	602a      	str	r2, [r5, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f7fa fdc9 	bl	8000b4e <_write>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	d102      	bne.n	8005fc6 <_write_r+0x1e>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	b103      	cbz	r3, 8005fc6 <_write_r+0x1e>
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	bd38      	pop	{r3, r4, r5, pc}
 8005fc8:	20004a90 	.word	0x20004a90

08005fcc <__swsetup_r>:
 8005fcc:	4b32      	ldr	r3, [pc, #200]	; (8006098 <__swsetup_r+0xcc>)
 8005fce:	b570      	push	{r4, r5, r6, lr}
 8005fd0:	681d      	ldr	r5, [r3, #0]
 8005fd2:	4606      	mov	r6, r0
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	b125      	cbz	r5, 8005fe2 <__swsetup_r+0x16>
 8005fd8:	69ab      	ldr	r3, [r5, #24]
 8005fda:	b913      	cbnz	r3, 8005fe2 <__swsetup_r+0x16>
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f7ff fb55 	bl	800568c <__sinit>
 8005fe2:	4b2e      	ldr	r3, [pc, #184]	; (800609c <__swsetup_r+0xd0>)
 8005fe4:	429c      	cmp	r4, r3
 8005fe6:	d10f      	bne.n	8006008 <__swsetup_r+0x3c>
 8005fe8:	686c      	ldr	r4, [r5, #4]
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ff0:	0719      	lsls	r1, r3, #28
 8005ff2:	d42c      	bmi.n	800604e <__swsetup_r+0x82>
 8005ff4:	06dd      	lsls	r5, r3, #27
 8005ff6:	d411      	bmi.n	800601c <__swsetup_r+0x50>
 8005ff8:	2309      	movs	r3, #9
 8005ffa:	6033      	str	r3, [r6, #0]
 8005ffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	f04f 30ff 	mov.w	r0, #4294967295
 8006006:	e03e      	b.n	8006086 <__swsetup_r+0xba>
 8006008:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <__swsetup_r+0xd4>)
 800600a:	429c      	cmp	r4, r3
 800600c:	d101      	bne.n	8006012 <__swsetup_r+0x46>
 800600e:	68ac      	ldr	r4, [r5, #8]
 8006010:	e7eb      	b.n	8005fea <__swsetup_r+0x1e>
 8006012:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <__swsetup_r+0xd8>)
 8006014:	429c      	cmp	r4, r3
 8006016:	bf08      	it	eq
 8006018:	68ec      	ldreq	r4, [r5, #12]
 800601a:	e7e6      	b.n	8005fea <__swsetup_r+0x1e>
 800601c:	0758      	lsls	r0, r3, #29
 800601e:	d512      	bpl.n	8006046 <__swsetup_r+0x7a>
 8006020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006022:	b141      	cbz	r1, 8006036 <__swsetup_r+0x6a>
 8006024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006028:	4299      	cmp	r1, r3
 800602a:	d002      	beq.n	8006032 <__swsetup_r+0x66>
 800602c:	4630      	mov	r0, r6
 800602e:	f000 f98f 	bl	8006350 <_free_r>
 8006032:	2300      	movs	r3, #0
 8006034:	6363      	str	r3, [r4, #52]	; 0x34
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800603c:	81a3      	strh	r3, [r4, #12]
 800603e:	2300      	movs	r3, #0
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f043 0308 	orr.w	r3, r3, #8
 800604c:	81a3      	strh	r3, [r4, #12]
 800604e:	6923      	ldr	r3, [r4, #16]
 8006050:	b94b      	cbnz	r3, 8006066 <__swsetup_r+0x9a>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800605c:	d003      	beq.n	8006066 <__swsetup_r+0x9a>
 800605e:	4621      	mov	r1, r4
 8006060:	4630      	mov	r0, r6
 8006062:	f000 f929 	bl	80062b8 <__smakebuf_r>
 8006066:	89a0      	ldrh	r0, [r4, #12]
 8006068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800606c:	f010 0301 	ands.w	r3, r0, #1
 8006070:	d00a      	beq.n	8006088 <__swsetup_r+0xbc>
 8006072:	2300      	movs	r3, #0
 8006074:	60a3      	str	r3, [r4, #8]
 8006076:	6963      	ldr	r3, [r4, #20]
 8006078:	425b      	negs	r3, r3
 800607a:	61a3      	str	r3, [r4, #24]
 800607c:	6923      	ldr	r3, [r4, #16]
 800607e:	b943      	cbnz	r3, 8006092 <__swsetup_r+0xc6>
 8006080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006084:	d1ba      	bne.n	8005ffc <__swsetup_r+0x30>
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	0781      	lsls	r1, r0, #30
 800608a:	bf58      	it	pl
 800608c:	6963      	ldrpl	r3, [r4, #20]
 800608e:	60a3      	str	r3, [r4, #8]
 8006090:	e7f4      	b.n	800607c <__swsetup_r+0xb0>
 8006092:	2000      	movs	r0, #0
 8006094:	e7f7      	b.n	8006086 <__swsetup_r+0xba>
 8006096:	bf00      	nop
 8006098:	20000010 	.word	0x20000010
 800609c:	08006514 	.word	0x08006514
 80060a0:	08006534 	.word	0x08006534
 80060a4:	080064f4 	.word	0x080064f4

080060a8 <_close_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d06      	ldr	r5, [pc, #24]	; (80060c4 <_close_r+0x1c>)
 80060ac:	2300      	movs	r3, #0
 80060ae:	4604      	mov	r4, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	f7fa fd67 	bl	8000b86 <_close>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_close_r+0x1a>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_close_r+0x1a>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	20004a90 	.word	0x20004a90

080060c8 <__sflush_r>:
 80060c8:	898a      	ldrh	r2, [r1, #12]
 80060ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ce:	4605      	mov	r5, r0
 80060d0:	0710      	lsls	r0, r2, #28
 80060d2:	460c      	mov	r4, r1
 80060d4:	d458      	bmi.n	8006188 <__sflush_r+0xc0>
 80060d6:	684b      	ldr	r3, [r1, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	dc05      	bgt.n	80060e8 <__sflush_r+0x20>
 80060dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dc02      	bgt.n	80060e8 <__sflush_r+0x20>
 80060e2:	2000      	movs	r0, #0
 80060e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ea:	2e00      	cmp	r6, #0
 80060ec:	d0f9      	beq.n	80060e2 <__sflush_r+0x1a>
 80060ee:	2300      	movs	r3, #0
 80060f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060f4:	682f      	ldr	r7, [r5, #0]
 80060f6:	602b      	str	r3, [r5, #0]
 80060f8:	d032      	beq.n	8006160 <__sflush_r+0x98>
 80060fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060fc:	89a3      	ldrh	r3, [r4, #12]
 80060fe:	075a      	lsls	r2, r3, #29
 8006100:	d505      	bpl.n	800610e <__sflush_r+0x46>
 8006102:	6863      	ldr	r3, [r4, #4]
 8006104:	1ac0      	subs	r0, r0, r3
 8006106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006108:	b10b      	cbz	r3, 800610e <__sflush_r+0x46>
 800610a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800610c:	1ac0      	subs	r0, r0, r3
 800610e:	2300      	movs	r3, #0
 8006110:	4602      	mov	r2, r0
 8006112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006114:	6a21      	ldr	r1, [r4, #32]
 8006116:	4628      	mov	r0, r5
 8006118:	47b0      	blx	r6
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	d106      	bne.n	800612e <__sflush_r+0x66>
 8006120:	6829      	ldr	r1, [r5, #0]
 8006122:	291d      	cmp	r1, #29
 8006124:	d82c      	bhi.n	8006180 <__sflush_r+0xb8>
 8006126:	4a2a      	ldr	r2, [pc, #168]	; (80061d0 <__sflush_r+0x108>)
 8006128:	40ca      	lsrs	r2, r1
 800612a:	07d6      	lsls	r6, r2, #31
 800612c:	d528      	bpl.n	8006180 <__sflush_r+0xb8>
 800612e:	2200      	movs	r2, #0
 8006130:	6062      	str	r2, [r4, #4]
 8006132:	04d9      	lsls	r1, r3, #19
 8006134:	6922      	ldr	r2, [r4, #16]
 8006136:	6022      	str	r2, [r4, #0]
 8006138:	d504      	bpl.n	8006144 <__sflush_r+0x7c>
 800613a:	1c42      	adds	r2, r0, #1
 800613c:	d101      	bne.n	8006142 <__sflush_r+0x7a>
 800613e:	682b      	ldr	r3, [r5, #0]
 8006140:	b903      	cbnz	r3, 8006144 <__sflush_r+0x7c>
 8006142:	6560      	str	r0, [r4, #84]	; 0x54
 8006144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006146:	602f      	str	r7, [r5, #0]
 8006148:	2900      	cmp	r1, #0
 800614a:	d0ca      	beq.n	80060e2 <__sflush_r+0x1a>
 800614c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006150:	4299      	cmp	r1, r3
 8006152:	d002      	beq.n	800615a <__sflush_r+0x92>
 8006154:	4628      	mov	r0, r5
 8006156:	f000 f8fb 	bl	8006350 <_free_r>
 800615a:	2000      	movs	r0, #0
 800615c:	6360      	str	r0, [r4, #52]	; 0x34
 800615e:	e7c1      	b.n	80060e4 <__sflush_r+0x1c>
 8006160:	6a21      	ldr	r1, [r4, #32]
 8006162:	2301      	movs	r3, #1
 8006164:	4628      	mov	r0, r5
 8006166:	47b0      	blx	r6
 8006168:	1c41      	adds	r1, r0, #1
 800616a:	d1c7      	bne.n	80060fc <__sflush_r+0x34>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0c4      	beq.n	80060fc <__sflush_r+0x34>
 8006172:	2b1d      	cmp	r3, #29
 8006174:	d001      	beq.n	800617a <__sflush_r+0xb2>
 8006176:	2b16      	cmp	r3, #22
 8006178:	d101      	bne.n	800617e <__sflush_r+0xb6>
 800617a:	602f      	str	r7, [r5, #0]
 800617c:	e7b1      	b.n	80060e2 <__sflush_r+0x1a>
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	e7ad      	b.n	80060e4 <__sflush_r+0x1c>
 8006188:	690f      	ldr	r7, [r1, #16]
 800618a:	2f00      	cmp	r7, #0
 800618c:	d0a9      	beq.n	80060e2 <__sflush_r+0x1a>
 800618e:	0793      	lsls	r3, r2, #30
 8006190:	680e      	ldr	r6, [r1, #0]
 8006192:	bf08      	it	eq
 8006194:	694b      	ldreq	r3, [r1, #20]
 8006196:	600f      	str	r7, [r1, #0]
 8006198:	bf18      	it	ne
 800619a:	2300      	movne	r3, #0
 800619c:	eba6 0807 	sub.w	r8, r6, r7
 80061a0:	608b      	str	r3, [r1, #8]
 80061a2:	f1b8 0f00 	cmp.w	r8, #0
 80061a6:	dd9c      	ble.n	80060e2 <__sflush_r+0x1a>
 80061a8:	6a21      	ldr	r1, [r4, #32]
 80061aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061ac:	4643      	mov	r3, r8
 80061ae:	463a      	mov	r2, r7
 80061b0:	4628      	mov	r0, r5
 80061b2:	47b0      	blx	r6
 80061b4:	2800      	cmp	r0, #0
 80061b6:	dc06      	bgt.n	80061c6 <__sflush_r+0xfe>
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061be:	81a3      	strh	r3, [r4, #12]
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	e78e      	b.n	80060e4 <__sflush_r+0x1c>
 80061c6:	4407      	add	r7, r0
 80061c8:	eba8 0800 	sub.w	r8, r8, r0
 80061cc:	e7e9      	b.n	80061a2 <__sflush_r+0xda>
 80061ce:	bf00      	nop
 80061d0:	20400001 	.word	0x20400001

080061d4 <_fflush_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	690b      	ldr	r3, [r1, #16]
 80061d8:	4605      	mov	r5, r0
 80061da:	460c      	mov	r4, r1
 80061dc:	b913      	cbnz	r3, 80061e4 <_fflush_r+0x10>
 80061de:	2500      	movs	r5, #0
 80061e0:	4628      	mov	r0, r5
 80061e2:	bd38      	pop	{r3, r4, r5, pc}
 80061e4:	b118      	cbz	r0, 80061ee <_fflush_r+0x1a>
 80061e6:	6983      	ldr	r3, [r0, #24]
 80061e8:	b90b      	cbnz	r3, 80061ee <_fflush_r+0x1a>
 80061ea:	f7ff fa4f 	bl	800568c <__sinit>
 80061ee:	4b14      	ldr	r3, [pc, #80]	; (8006240 <_fflush_r+0x6c>)
 80061f0:	429c      	cmp	r4, r3
 80061f2:	d11b      	bne.n	800622c <_fflush_r+0x58>
 80061f4:	686c      	ldr	r4, [r5, #4]
 80061f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0ef      	beq.n	80061de <_fflush_r+0xa>
 80061fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006200:	07d0      	lsls	r0, r2, #31
 8006202:	d404      	bmi.n	800620e <_fflush_r+0x3a>
 8006204:	0599      	lsls	r1, r3, #22
 8006206:	d402      	bmi.n	800620e <_fflush_r+0x3a>
 8006208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800620a:	f7ff fadd 	bl	80057c8 <__retarget_lock_acquire_recursive>
 800620e:	4628      	mov	r0, r5
 8006210:	4621      	mov	r1, r4
 8006212:	f7ff ff59 	bl	80060c8 <__sflush_r>
 8006216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006218:	07da      	lsls	r2, r3, #31
 800621a:	4605      	mov	r5, r0
 800621c:	d4e0      	bmi.n	80061e0 <_fflush_r+0xc>
 800621e:	89a3      	ldrh	r3, [r4, #12]
 8006220:	059b      	lsls	r3, r3, #22
 8006222:	d4dd      	bmi.n	80061e0 <_fflush_r+0xc>
 8006224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006226:	f7ff fad0 	bl	80057ca <__retarget_lock_release_recursive>
 800622a:	e7d9      	b.n	80061e0 <_fflush_r+0xc>
 800622c:	4b05      	ldr	r3, [pc, #20]	; (8006244 <_fflush_r+0x70>)
 800622e:	429c      	cmp	r4, r3
 8006230:	d101      	bne.n	8006236 <_fflush_r+0x62>
 8006232:	68ac      	ldr	r4, [r5, #8]
 8006234:	e7df      	b.n	80061f6 <_fflush_r+0x22>
 8006236:	4b04      	ldr	r3, [pc, #16]	; (8006248 <_fflush_r+0x74>)
 8006238:	429c      	cmp	r4, r3
 800623a:	bf08      	it	eq
 800623c:	68ec      	ldreq	r4, [r5, #12]
 800623e:	e7da      	b.n	80061f6 <_fflush_r+0x22>
 8006240:	08006514 	.word	0x08006514
 8006244:	08006534 	.word	0x08006534
 8006248:	080064f4 	.word	0x080064f4

0800624c <_lseek_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4d07      	ldr	r5, [pc, #28]	; (800626c <_lseek_r+0x20>)
 8006250:	4604      	mov	r4, r0
 8006252:	4608      	mov	r0, r1
 8006254:	4611      	mov	r1, r2
 8006256:	2200      	movs	r2, #0
 8006258:	602a      	str	r2, [r5, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	f7fa fcba 	bl	8000bd4 <_lseek>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d102      	bne.n	800626a <_lseek_r+0x1e>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	b103      	cbz	r3, 800626a <_lseek_r+0x1e>
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	bd38      	pop	{r3, r4, r5, pc}
 800626c:	20004a90 	.word	0x20004a90

08006270 <__swhatbuf_r>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	460e      	mov	r6, r1
 8006274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006278:	2900      	cmp	r1, #0
 800627a:	b096      	sub	sp, #88	; 0x58
 800627c:	4614      	mov	r4, r2
 800627e:	461d      	mov	r5, r3
 8006280:	da07      	bge.n	8006292 <__swhatbuf_r+0x22>
 8006282:	2300      	movs	r3, #0
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	89b3      	ldrh	r3, [r6, #12]
 8006288:	061a      	lsls	r2, r3, #24
 800628a:	d410      	bmi.n	80062ae <__swhatbuf_r+0x3e>
 800628c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006290:	e00e      	b.n	80062b0 <__swhatbuf_r+0x40>
 8006292:	466a      	mov	r2, sp
 8006294:	f000 f8be 	bl	8006414 <_fstat_r>
 8006298:	2800      	cmp	r0, #0
 800629a:	dbf2      	blt.n	8006282 <__swhatbuf_r+0x12>
 800629c:	9a01      	ldr	r2, [sp, #4]
 800629e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062a6:	425a      	negs	r2, r3
 80062a8:	415a      	adcs	r2, r3
 80062aa:	602a      	str	r2, [r5, #0]
 80062ac:	e7ee      	b.n	800628c <__swhatbuf_r+0x1c>
 80062ae:	2340      	movs	r3, #64	; 0x40
 80062b0:	2000      	movs	r0, #0
 80062b2:	6023      	str	r3, [r4, #0]
 80062b4:	b016      	add	sp, #88	; 0x58
 80062b6:	bd70      	pop	{r4, r5, r6, pc}

080062b8 <__smakebuf_r>:
 80062b8:	898b      	ldrh	r3, [r1, #12]
 80062ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062bc:	079d      	lsls	r5, r3, #30
 80062be:	4606      	mov	r6, r0
 80062c0:	460c      	mov	r4, r1
 80062c2:	d507      	bpl.n	80062d4 <__smakebuf_r+0x1c>
 80062c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	2301      	movs	r3, #1
 80062ce:	6163      	str	r3, [r4, #20]
 80062d0:	b002      	add	sp, #8
 80062d2:	bd70      	pop	{r4, r5, r6, pc}
 80062d4:	ab01      	add	r3, sp, #4
 80062d6:	466a      	mov	r2, sp
 80062d8:	f7ff ffca 	bl	8006270 <__swhatbuf_r>
 80062dc:	9900      	ldr	r1, [sp, #0]
 80062de:	4605      	mov	r5, r0
 80062e0:	4630      	mov	r0, r6
 80062e2:	f7ff fa73 	bl	80057cc <_malloc_r>
 80062e6:	b948      	cbnz	r0, 80062fc <__smakebuf_r+0x44>
 80062e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ec:	059a      	lsls	r2, r3, #22
 80062ee:	d4ef      	bmi.n	80062d0 <__smakebuf_r+0x18>
 80062f0:	f023 0303 	bic.w	r3, r3, #3
 80062f4:	f043 0302 	orr.w	r3, r3, #2
 80062f8:	81a3      	strh	r3, [r4, #12]
 80062fa:	e7e3      	b.n	80062c4 <__smakebuf_r+0xc>
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <__smakebuf_r+0x7c>)
 80062fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	6020      	str	r0, [r4, #0]
 8006304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006308:	81a3      	strh	r3, [r4, #12]
 800630a:	9b00      	ldr	r3, [sp, #0]
 800630c:	6163      	str	r3, [r4, #20]
 800630e:	9b01      	ldr	r3, [sp, #4]
 8006310:	6120      	str	r0, [r4, #16]
 8006312:	b15b      	cbz	r3, 800632c <__smakebuf_r+0x74>
 8006314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006318:	4630      	mov	r0, r6
 800631a:	f000 f88d 	bl	8006438 <_isatty_r>
 800631e:	b128      	cbz	r0, 800632c <__smakebuf_r+0x74>
 8006320:	89a3      	ldrh	r3, [r4, #12]
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	81a3      	strh	r3, [r4, #12]
 800632c:	89a0      	ldrh	r0, [r4, #12]
 800632e:	4305      	orrs	r5, r0
 8006330:	81a5      	strh	r5, [r4, #12]
 8006332:	e7cd      	b.n	80062d0 <__smakebuf_r+0x18>
 8006334:	08005625 	.word	0x08005625

08006338 <__malloc_lock>:
 8006338:	4801      	ldr	r0, [pc, #4]	; (8006340 <__malloc_lock+0x8>)
 800633a:	f7ff ba45 	b.w	80057c8 <__retarget_lock_acquire_recursive>
 800633e:	bf00      	nop
 8006340:	20004a88 	.word	0x20004a88

08006344 <__malloc_unlock>:
 8006344:	4801      	ldr	r0, [pc, #4]	; (800634c <__malloc_unlock+0x8>)
 8006346:	f7ff ba40 	b.w	80057ca <__retarget_lock_release_recursive>
 800634a:	bf00      	nop
 800634c:	20004a88 	.word	0x20004a88

08006350 <_free_r>:
 8006350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006352:	2900      	cmp	r1, #0
 8006354:	d048      	beq.n	80063e8 <_free_r+0x98>
 8006356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800635a:	9001      	str	r0, [sp, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f1a1 0404 	sub.w	r4, r1, #4
 8006362:	bfb8      	it	lt
 8006364:	18e4      	addlt	r4, r4, r3
 8006366:	f7ff ffe7 	bl	8006338 <__malloc_lock>
 800636a:	4a20      	ldr	r2, [pc, #128]	; (80063ec <_free_r+0x9c>)
 800636c:	9801      	ldr	r0, [sp, #4]
 800636e:	6813      	ldr	r3, [r2, #0]
 8006370:	4615      	mov	r5, r2
 8006372:	b933      	cbnz	r3, 8006382 <_free_r+0x32>
 8006374:	6063      	str	r3, [r4, #4]
 8006376:	6014      	str	r4, [r2, #0]
 8006378:	b003      	add	sp, #12
 800637a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800637e:	f7ff bfe1 	b.w	8006344 <__malloc_unlock>
 8006382:	42a3      	cmp	r3, r4
 8006384:	d90b      	bls.n	800639e <_free_r+0x4e>
 8006386:	6821      	ldr	r1, [r4, #0]
 8006388:	1862      	adds	r2, r4, r1
 800638a:	4293      	cmp	r3, r2
 800638c:	bf04      	itt	eq
 800638e:	681a      	ldreq	r2, [r3, #0]
 8006390:	685b      	ldreq	r3, [r3, #4]
 8006392:	6063      	str	r3, [r4, #4]
 8006394:	bf04      	itt	eq
 8006396:	1852      	addeq	r2, r2, r1
 8006398:	6022      	streq	r2, [r4, #0]
 800639a:	602c      	str	r4, [r5, #0]
 800639c:	e7ec      	b.n	8006378 <_free_r+0x28>
 800639e:	461a      	mov	r2, r3
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	b10b      	cbz	r3, 80063a8 <_free_r+0x58>
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	d9fa      	bls.n	800639e <_free_r+0x4e>
 80063a8:	6811      	ldr	r1, [r2, #0]
 80063aa:	1855      	adds	r5, r2, r1
 80063ac:	42a5      	cmp	r5, r4
 80063ae:	d10b      	bne.n	80063c8 <_free_r+0x78>
 80063b0:	6824      	ldr	r4, [r4, #0]
 80063b2:	4421      	add	r1, r4
 80063b4:	1854      	adds	r4, r2, r1
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	6011      	str	r1, [r2, #0]
 80063ba:	d1dd      	bne.n	8006378 <_free_r+0x28>
 80063bc:	681c      	ldr	r4, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	6053      	str	r3, [r2, #4]
 80063c2:	4421      	add	r1, r4
 80063c4:	6011      	str	r1, [r2, #0]
 80063c6:	e7d7      	b.n	8006378 <_free_r+0x28>
 80063c8:	d902      	bls.n	80063d0 <_free_r+0x80>
 80063ca:	230c      	movs	r3, #12
 80063cc:	6003      	str	r3, [r0, #0]
 80063ce:	e7d3      	b.n	8006378 <_free_r+0x28>
 80063d0:	6825      	ldr	r5, [r4, #0]
 80063d2:	1961      	adds	r1, r4, r5
 80063d4:	428b      	cmp	r3, r1
 80063d6:	bf04      	itt	eq
 80063d8:	6819      	ldreq	r1, [r3, #0]
 80063da:	685b      	ldreq	r3, [r3, #4]
 80063dc:	6063      	str	r3, [r4, #4]
 80063de:	bf04      	itt	eq
 80063e0:	1949      	addeq	r1, r1, r5
 80063e2:	6021      	streq	r1, [r4, #0]
 80063e4:	6054      	str	r4, [r2, #4]
 80063e6:	e7c7      	b.n	8006378 <_free_r+0x28>
 80063e8:	b003      	add	sp, #12
 80063ea:	bd30      	pop	{r4, r5, pc}
 80063ec:	200049a0 	.word	0x200049a0

080063f0 <_read_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4d07      	ldr	r5, [pc, #28]	; (8006410 <_read_r+0x20>)
 80063f4:	4604      	mov	r4, r0
 80063f6:	4608      	mov	r0, r1
 80063f8:	4611      	mov	r1, r2
 80063fa:	2200      	movs	r2, #0
 80063fc:	602a      	str	r2, [r5, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	f7fa fb88 	bl	8000b14 <_read>
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	d102      	bne.n	800640e <_read_r+0x1e>
 8006408:	682b      	ldr	r3, [r5, #0]
 800640a:	b103      	cbz	r3, 800640e <_read_r+0x1e>
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	20004a90 	.word	0x20004a90

08006414 <_fstat_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4d07      	ldr	r5, [pc, #28]	; (8006434 <_fstat_r+0x20>)
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	f7fa fbbc 	bl	8000b9e <_fstat>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d102      	bne.n	8006430 <_fstat_r+0x1c>
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	b103      	cbz	r3, 8006430 <_fstat_r+0x1c>
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	bd38      	pop	{r3, r4, r5, pc}
 8006432:	bf00      	nop
 8006434:	20004a90 	.word	0x20004a90

08006438 <_isatty_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	4d06      	ldr	r5, [pc, #24]	; (8006454 <_isatty_r+0x1c>)
 800643c:	2300      	movs	r3, #0
 800643e:	4604      	mov	r4, r0
 8006440:	4608      	mov	r0, r1
 8006442:	602b      	str	r3, [r5, #0]
 8006444:	f7fa fbbb 	bl	8000bbe <_isatty>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_isatty_r+0x1a>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	b103      	cbz	r3, 8006452 <_isatty_r+0x1a>
 8006450:	6023      	str	r3, [r4, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	20004a90 	.word	0x20004a90

08006458 <_init>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr

08006464 <_fini>:
 8006464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006466:	bf00      	nop
 8006468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646a:	bc08      	pop	{r3}
 800646c:	469e      	mov	lr, r3
 800646e:	4770      	bx	lr
